{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"SpykeTools: A high-level python toolbox for advanced large-scale neuronal data analyses"},{"location":"#key-features","title":"Key features","text":"<ul> <li>Use of free, open-source programming language (i.e., Python).</li> <li>Designed to efficiently cope with high-dimensional neural data and can scale to large channel counts.</li> <li>Neurodata Without Borders (NWB) format as Input.</li> <li>Users can call high-level functions rather than scripting together many modules.</li> <li>Focus on running parallel jobs to analyse spiking neural data.</li> <li>Extensive functionality for extraction of high-dimensional neural patterns.</li> </ul>"},{"location":"#setup","title":"Setup","text":"(Recomended) Conda (Linux/Windows/MacOS)Debian/Ubuntu <ul> <li>Create a conda environment: <pre><code>conda env create --file environment.yml\n</code></pre></li> <li>Activate your conda environment: <pre><code>conda activate SpykeTools\n</code></pre></li> </ul> <p>Open a terminal and do: <pre><code>sudo apt-get install allensdk=0.14.4 jupyter numba scikit-learn python=3.6.10 umap-learn\n</code></pre></p> <p>The work on SpykeTools was supported by the BMF (Bundesministerium fuer Bildung und Forschung), Computational Life Sciences, project BINDA (031L0167), Germany.</p>"},{"location":"about/","title":"Palmas placuere velamina molles","text":""},{"location":"about/#gravis-nam-dixit-hunc-ora-flammas-est","title":"Gravis nam dixit hunc ora flammas est","text":"<p>Lorem markdownum iacebas non cepisse parvae et sed iram, locis. Ab arbor nocuisse Stabiasque decepit ignis barbaricoque undis Spercheides modo, copia grates exceptas totoque quondam scylla quidque nobis. Nivea opem vultum aera leto donec soror nec, ait.</p> <p>Fuerat excepit dare collige, oculos quem noster contigit lacrimis parit geminaverat vocat. Et Dryantis caelum adquirit, inrita mota inquit de exiguo laesit, nec amicior dilata, iuvenis ad viderat. Inplicuit Eetioneas fidumque induit corpus doctae Iovi: deprendit Matri. Aspexisse domini. Habebat novitate sparsosque bello inter ministros recessu flores; modo utilis, nivea secum, nec nec purasque Eurus subsequitur.</p>"},{"location":"about/#notasti-si-custos-modum-est-obiectat-dum","title":"Notasti si custos modum est obiectat dum","text":"<p>Et inquit erat, patrios voce ignes domo illa falsa; corpora ab tecum et. Inflata viscera ast edere, Meropisque atras prodigiosa loquentis aversae Phoco paries, qui. Nati mater ingeniis en greges cladem Iuppiter in pio tamen fatum que. Mortisque quod, tingui sacrorum pariter densa, horrentia, ingeniis et! Retinet iuvenes vultu sororibus subsedit: quoque et rapta silvas: undique ipse de deae.</p> <pre><code>key_bar = 2 - -5;\nbiometricsPeripheral = protocol;\nvar ppcAlignment = terminal_activex - modem_apple_freeware(wrapVolume) -\n        desktop_raw.hertz(\n        safeWildcard.dualDialog.multitaskingMashupSpooling(userSearchHacker,\n        parity_text, -4), expansion_drive);\n</code></pre>"},{"location":"about/#corripit-residant","title":"Corripit residant","text":"<p>Cohors Curibus humanam census. Pro candida qui iubet ille tumida dicentem tempus, silet et neve cognoscere? Aethere rubuerunt illo; diu in velle: nactusque duos, aselli Phrygii haerebat minus mox. Umentes dabat nocet ad atque enim lacrimabile Orci certamine criminis me scilicet Procnen nubibus includite; visa haec.</p> <p>Magna cruore comesque in Ancaeus fornace fusis pennis tum qui vocas rubetis ramum virago de quam. Poenas horrent turpe arbitrium! Solent vertitur facietque membris dea amantem verba non nunc, legit sinuatoque dixit inmensos in. Tum omnis, effugies aditu si Iphi dei actusque modo.</p> <ul> <li>Ephyren sceptrum quoque animoque</li> <li>Alta modum</li> <li>In nec titubare terrae saxa ad senior</li> <li>Titubat gressus serasque laudat</li> <li>Membra chordas hanc pallidus</li> </ul> <p>Videntur altera, sic genitas! Nec numen incipit, est est ingenium videt templa; polenta pectoraque florem, praesuta. Simulac digitos nec cava velamina vestrum lacusque auras deiecto, negat!</p>"},{"location":"citing/","title":"Citing","text":""},{"location":"citing/#citing-spyketools","title":"Citing SpykeTools","text":"<p>If you use SpykeTools in your research, please cite our publication on biorxiv:</p> <pre><code>@article{sotomayor2023spyketools,\n  title={\n    SpykeTools: A High-level Python Toolbox for Advanced \n    Large-scale Neuronal Data Analyses\n  },\n  author={Sotomayor-G{\\'o}mez, Boris and Vinck, Martin},\n  journal={bioRxiv},\n  year={2023},\n  publisher={Cold Spring Harbor Laboratory}\n}\n</code></pre> <p>Depending on the used methods, please cite the following works: </p> <ul> <li>SpikeShip distance1</li> <li>ISI, SPIKE, and RI-SPIKE distances (PySpyke)2</li> <li>Victor-Purpura distance (Elephant toolkit)3</li> </ul>  Sotomayor-Gomez et al. (2023) - SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns  <pre><code>@article{sotomayor2020spikeship,\n  title={SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns},\n  author={Sotomayor-G{\\'o}mez, Boris and Battaglia, Francesco P and Vinck, Martin},\n  journal={bioRxiv},\n  pages={2020--06},\n  year={2020},\n  publisher={Cold Spring Harbor Laboratory}\n}\n</code></pre>  [2] Mulansky et al. (2020) - PySpike - A Python library for analyzing spike train synchrony  <pre><code>@article{mulansky2016pyspike,\n  title={PySpike\u2014A Python library for analyzing spike train synchrony},\n  author={Mulansky, Mario and Kreuz, Thomas},\n  journal={SoftwareX},\n  volume={5},\n  pages={183--189},\n  year={2016},\n  publisher={Elsevier}\n}\n</code></pre>  [3] Denker M et al. (2018) Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephant framework <pre><code>@conference{elephant18,\nauthor = {Denker, M. and Yegenoglu, A. and Gr\u00fcn, S.},\nbooktitle = {Neuroinformatics 2018},\ntitle = {{C}ollaborative {HPC}-enabled workflows on the {HBP} {C}ollaboratory using the {E}lephant framework},\npages = {P19},\nyear = {2018}\ndoi = {10.12751/incf.ni2018.0019},\nurl = {https://abstracts.g-node.org/conference/NI2018/abstracts#/uuid/023bec4e-0c35-4563-81ce-2c6fac282abd},\n}\n</code></pre> <p>Info</p> <p>SpykeTools uses an adapted version of the spike train metrics ISI, SPIKE, and RI-SPIKE from PySpike and Victor-Purpura distance from Elephant for compatibility reasons. </p> <ol> <li> <p>Sotomayor-G\u00f3mez, B., Battaglia, F. P., &amp; Vinck, M. (2020). SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns. bioRxiv, 2020-06. Article.\u00a0\u21a9</p> </li> <li> <p>Mario Mulansky, Thomas Kreuz, PySpike - A Python library for analyzing spike train synchrony, Software X 5, 183 (2016). Article.\u00a0\u21a9</p> </li> <li> <p>Denker, M., Yegenoglu, A., &amp; Gr\u00fcn, S. (2018). Collaborative HPC-enabled workflows on the HBP Collaboratory using the Elephant framework (No. FZJ-2018-04998). Computational and Systems Neuroscience. Article.\u00a0\u21a9</p> </li> </ol>"},{"location":"clustering.ARI_score/","title":"1. Adjusted Rand Index (ARI)","text":""},{"location":"clustering.ARI_score/#spyketools.clustering.ARI_score.ari_KMeans","title":"<code>ari_KMeans(emb, labels_true, n_components=None, random_state=None)</code>","text":"<p>Adjusted Rand Index^1 (ARI) score via KMeans clustering (Scikit Learn[^3]).</p> <p>Parameters:</p> Name Type Description Default <code>emb</code> <code>numpy.array</code> <p>Embedding (2xM-dimesional array).</p> required <code>labels_true</code> <code>numpy.array</code> <p>Array with ground-truth labels.</p> required <code>n_components</code> <code>int</code> <p>Number of components to find using KMeans algorithm.</p> <code>None</code> <code>random_state</code> <code>int</code> <p>Seed for random_state param (Scikit Learn).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>score</code> <code>float</code> <p>ARI score value using KMeans clustering.</p> <p>Examples:</p> <pre><code>import numpy as np\n\n# simulating data from three Gaussian distributions.\npoints1 = np.random.normal(0, 10, (200,2))\npoints2 = np.random.normal(30, 10, (200,2))\npoints3 = np.random.normal(60, 10, (200,2))\nemb = np.concatenate([points1, points2, points3])\nlabels = np.array([(i//200) for i in range(600)])\n\n# evaluation of clustering performance\nfrom spyketools.clustering import ari_KMeans\nari_KMeans(emb, labels, n_components=None, random_state=0)\n# Output: 0.7772247810881237\n</code></pre> <ol> <li> <p>L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075 \u21a9</p> </li> <li> <p>D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004. \u21a9</p> </li> <li> <p>Scikit Learn API. https://scikit-learn.org/stable/modules/generated/sklearn.metrics.adjusted_rand_score.html. \u21a9</p> </li> </ol> Source code in <code>spyketools/clustering/ARI_score.py</code> <pre><code>def ari_KMeans(emb, labels_true, n_components=None, random_state=None):\n\"\"\"\n    Adjusted Rand Index[^1][^2] (ARI) score via KMeans clustering (Scikit Learn[^3]).\n\n    Parameters\n    ----------\n    emb : numpy.array\n        Embedding (2xM-dimesional array).\n    labels_true : numpy.array\n        Array with ground-truth labels.\n    n_components : int\n        Number of components to find using KMeans algorithm.\n    random_state : int\n        Seed for random_state param (Scikit Learn).\n\n    Returns\n    -------\n    score : float\n        ARI score value using KMeans clustering.\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n\n    # simulating data from three Gaussian distributions.\n    points1 = np.random.normal(0, 10, (200,2))\n    points2 = np.random.normal(30, 10, (200,2))\n    points3 = np.random.normal(60, 10, (200,2))\n    emb = np.concatenate([points1, points2, points3])\n    labels = np.array([(i//200) for i in range(600)])\n\n    # evaluation of clustering performance\n    from spyketools.clustering import ari_KMeans\n    ari_KMeans(emb, labels, n_components=None, random_state=0)\n    # Output: 0.7772247810881237\n    ```\n\n    [^1]:\n        *L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075*\n    [^2]:\n        *D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004.*\n    [^3]:\n        *Scikit Learn API. https://scikit-learn.org/stable/modules/generated/sklearn.metrics.adjusted_rand_score.html.*\n\n    \"\"\"\n\n    if n_components is None:\n        n_components = len(np.unique(labels_true))\n    labels_pred = KMeans(n_clusters=n_components, random_state=random_state).fit_predict(emb)#.labels_\n    return adjusted_rand_score(labels_true, labels_pred)\n</code></pre>"},{"location":"clustering.ARI_score/#spyketools.clustering.ARI_score.ari_GM","title":"<code>ari_GM(emb, labels_true, max_iter=100, n_components=None, random_state=None)</code>","text":"<p>Adjusted Rand Index^1 (ARI) score via Gaussian Mixture (GM) clustering (Scikit Learn[^3]).</p> <p>Parameters:</p> Name Type Description Default <code>emb</code> <code>numpy.array</code> <p>Embedding (2xM-dimesional array).</p> required <code>labels_true</code> <code>numpy.array</code> <p>Array with ground-truth labels.</p> required <code>max_iter</code> <code>int</code> <p>Maximum number of iteration for GM algorithm.</p> <code>100</code> <code>n_components</code> <code>int</code> <p>Number of components to find using GM algorithm.</p> <code>None</code> <code>random_state</code> <code>int</code> <p>Seed for random_state param (Scikit Learn).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>score</code> <code>float</code> <p>ARI score value using GM clustering.</p> <p>Examples:</p> <pre><code>import numpy as np\n\n# simulating data from three Gaussian distributions.\npoints1 = np.random.normal(0, 10, (200,2))\npoints2 = np.random.normal(30, 10, (200,2))\npoints3 = np.random.normal(60, 10, (200,2))\nemb = np.concatenate([points1, points2, points3])\nlabels = np.array([(i//200) for i in range(600)])\n\n# evaluation of clustering performance\nfrom spyketools.clustering import ari_GM\n\nari_GM(emb, labels, n_components=None, random_state=0)\n\n# Output: 0.7928597274827337\n</code></pre> <ol> <li> <p>L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075 \u21a9</p> </li> <li> <p>D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004. \u21a9</p> </li> <li> <p>Scikit Learn API. https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html#sklearn.mixture.GaussianMixture. \u21a9</p> </li> </ol> Source code in <code>spyketools/clustering/ARI_score.py</code> <pre><code>def ari_GM(emb, labels_true, max_iter=100, n_components=None, random_state=None):\n\"\"\"\n    Adjusted Rand Index[^1][^2] (ARI) score via Gaussian Mixture (GM) clustering (Scikit Learn[^3]).\n\n    Parameters\n    ----------\n    emb : numpy.array\n        Embedding (2xM-dimesional array).\n    labels_true : numpy.array\n        Array with ground-truth labels.\n    max_iter : int\n        Maximum number of iteration for GM algorithm.\n    n_components : int\n        Number of components to find using GM algorithm.\n    random_state : int\n        Seed for random_state param (Scikit Learn).\n\n    Returns\n    -------\n    score : float\n        ARI score value using GM clustering.\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n\n    # simulating data from three Gaussian distributions.\n    points1 = np.random.normal(0, 10, (200,2))\n    points2 = np.random.normal(30, 10, (200,2))\n    points3 = np.random.normal(60, 10, (200,2))\n    emb = np.concatenate([points1, points2, points3])\n    labels = np.array([(i//200) for i in range(600)])\n\n    # evaluation of clustering performance\n    from spyketools.clustering import ari_GM\n\n    ari_GM(emb, labels, n_components=None, random_state=0)\n\n    # Output: 0.7928597274827337\n    ```\n\n    [^1]:\n        *L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075*\n    [^2]:\n        *D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004.*\n    [^3]:\n        *Scikit Learn API. https://scikit-learn.org/stable/modules/generated/sklearn.mixture.GaussianMixture.html#sklearn.mixture.GaussianMixture.*\n    \"\"\"\n\n    if n_components is None:\n        n_components = len(np.unique(labels_true))\n    labels_pred = GaussianMixture(n_components=n_components, max_iter=max_iter, random_state=random_state).fit_predict(emb)\n    return adjusted_rand_score(labels_true, labels_pred)\n</code></pre>"},{"location":"clustering.ARI_score/#spyketools.clustering.ARI_score.ari_HDBSCAN","title":"<code>ari_HDBSCAN(emb, labels_true)</code>","text":"<p>Adjusted Rand Index^1 (ARI) score via \"Hierarchical Density-Based Spatial  Clustering of Applications with Noise\" (HDBSCAN) algorithm^3.</p> <p>Parameters:</p> Name Type Description Default <code>emb</code> <code>numpy.array</code> <p>Embedding (2xM-dimesional array).</p> required <code>labels_true</code> <code>numpy.array</code> <p>Array with ground-truth labels.</p> required <p>Returns:</p> Name Type Description <code>score</code> <code>float</code> <p>ARI score value using HDBSCAN clustering.</p> <p>Examples:</p> <pre><code>import numpy as np\n\n# simulating data from three Gaussian distributions.\npoints1 = np.random.normal(0, 10, (200,2))\npoints2 = np.random.normal(30, 10, (200,2))\npoints3 = np.random.normal(60, 10, (200,2))\nemb = np.concatenate([points1, points2, points3])\nlabels = np.array([(i//200) for i in range(600)])\n\n# evaluation of clustering performance\nfrom spyketools.clustering import ari_HDBSCAN\nari_HDBSCAN(emb, labels, n_components=None, random_state=0)\n# Output: 0.7656426881931003\n</code></pre> <ol> <li> <p>L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075 \u21a9</p> </li> <li> <p>D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004. \u21a9</p> </li> <li> <p>McInnes, L., Healy, J., &amp; Astels, S. (2017). hdbscan: Hierarchical density based clustering. J. Open Source Softw., 2(11), 205.\u00a0\u21a9</p> </li> <li> <p>HDBSCAN  docs. https://hdbscan.readthedocs.io/en/latest/index.html. \u21a9</p> </li> </ol> Source code in <code>spyketools/clustering/ARI_score.py</code> <pre><code>def ari_HDBSCAN(emb, labels_true):\n\"\"\"\n    Adjusted Rand Index[^1][^2] (ARI) score via \"Hierarchical Density-Based Spatial \n    Clustering of Applications with Noise\" (HDBSCAN) algorithm[^3][^4].\n\n    Parameters\n    ----------\n    emb : numpy.array\n        Embedding (2xM-dimesional array).\n    labels_true : numpy.array\n        Array with ground-truth labels.\n\n    Returns\n    -------\n    score : float\n        ARI score value using HDBSCAN clustering.\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n\n    # simulating data from three Gaussian distributions.\n    points1 = np.random.normal(0, 10, (200,2))\n    points2 = np.random.normal(30, 10, (200,2))\n    points3 = np.random.normal(60, 10, (200,2))\n    emb = np.concatenate([points1, points2, points3])\n    labels = np.array([(i//200) for i in range(600)])\n\n    # evaluation of clustering performance\n    from spyketools.clustering import ari_HDBSCAN\n    ari_HDBSCAN(emb, labels, n_components=None, random_state=0)\n    # Output: 0.7656426881931003\n    ```\n\n    [^1]:\n        *L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075*\n    [^2]:\n        *D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004.*\n    [^3]:\n        *McInnes, L., Healy, J., &amp; Astels, S. (2017). hdbscan: Hierarchical density based clustering. J. Open Source Softw., 2(11), 205*.\n    [^4]:\n        *HDBSCAN  docs. https://hdbscan.readthedocs.io/en/latest/index.html.*\n    \"\"\"\n    labels_pred = hdbscan.HDBSCAN().fit(emb).labels_\n    return adjusted_rand_score(labels_true, labels_pred)\n</code></pre>"},{"location":"clustering.ARI_score/#spyketools.clustering.ARI_score.ari_custom","title":"<code>ari_custom(labels_true, labels_pred)</code>","text":"<p>Adjusted Rand Index^1 (ARI) score using a custom clustering algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>labels_true</code> <code>numpy.array</code> <p>Array with ground-truth labels.</p> required <code>labels_pred</code> <code>numpy.array</code> <p>Array with labels from any other clustering algorithm.</p> required <p>Returns:</p> Name Type Description <code>score</code> <code>float</code> <p>ARI score value using a custom clustering algorithm.</p> <p>Examples:</p> <ol> <li> <p>L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075 \u21a9</p> </li> <li> <p>D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004. \u21a9</p> </li> </ol> Source code in <code>spyketools/clustering/ARI_score.py</code> <pre><code>def ari_custom(labels_true, labels_pred):\n\"\"\"\n    Adjusted Rand Index[^1][^2] (ARI) score using a custom clustering algorithm.\n\n    Parameters\n    ----------\n    labels_true : numpy.array\n        Array with ground-truth labels.\n    labels_pred : numpy.array\n        Array with labels from any other clustering algorithm.\n\n    Returns\n    -------\n    score : float\n        ARI score value using a custom clustering algorithm.\n\n    **Examples:**\n\n    [^1]:\n        *L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075*\n    [^2]:\n        *D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004.*\n    \"\"\"\n    return adjusted_rand_score(labels_true, labels_pred)\n</code></pre>"},{"location":"clustering.discriminability_index/","title":"3. Discriminability Index (DI)","text":""},{"location":"clustering.silhouette_score/","title":"2. Silhouette score","text":"<p>Computation of embedding performance via Silhouette score^1 (Scikit Learn[^2]).</p> <p>Parameters:</p> Name Type Description Default <code>emb</code> <code>numpy.array</code> <p>Embedding (2xM-dimesional array).</p> required <code>labels_true</code> <code>numpy.array</code> <p>Array with ground-truth labels.</p> required <p>Returns:</p> Name Type Description <code>score</code> <code>float</code> <p>Silhouette score.</p> <p>Examples:</p> <pre><code>import numpy as np\n\n# simulating data from three Gaussian distributions.\npoints1 = np.random.normal(0, 10, (200,2))\npoints2 = np.random.normal(30, 10, (200,2))\npoints3 = np.random.normal(60, 10, (200,2))\nemb = np.concatenate([points1, points2, points3])\nlabels = np.array([(i//200) for i in range(600)])\n\n# evaluation of clustering performance\nfrom spyketools.clustering import silhouette_score\nsilhouette(emb, labels, n_components=None, random_state=0)\n# Output: 0.7772247810881237\n</code></pre> <ol> <li> <p>Peter J. Rousseeuw (1987). \u201cSilhouettes: a Graphical Aid to the Interpretation and Validation of Cluster Analysis\u201d. Computational and Applied Mathematics 20: 53-65. \u21a9</p> </li> <li> <p>Scikit Learn API. https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score. \u21a9</p> </li> </ol> Source code in <code>spyketools/clustering/silhouette_score.py</code> <pre><code>def silhouette_score(emb, labels_true):\n\"\"\"\n    Computation of embedding performance via Silhouette score[^1][^2] (Scikit Learn[^2]).\n\n    Parameters\n    ----------\n    emb : numpy.array\n        Embedding (2xM-dimesional array).\n    labels_true : numpy.array\n        Array with ground-truth labels.\n\n    Returns\n    -------\n    score : float\n        Silhouette score.\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n\n    # simulating data from three Gaussian distributions.\n    points1 = np.random.normal(0, 10, (200,2))\n    points2 = np.random.normal(30, 10, (200,2))\n    points3 = np.random.normal(60, 10, (200,2))\n    emb = np.concatenate([points1, points2, points3])\n    labels = np.array([(i//200) for i in range(600)])\n\n    # evaluation of clustering performance\n    from spyketools.clustering import silhouette_score\n    silhouette(emb, labels, n_components=None, random_state=0)\n    # Output: 0.7772247810881237\n    ```\n\n    [^1]:\n        *Peter J. Rousseeuw (1987). \u201cSilhouettes: a Graphical Aid to the Interpretation and Validation of Cluster Analysis\u201d. Computational and Applied Mathematics 20: 53-65.*\n    [^2]:\n        *Scikit Learn API. https://scikit-learn.org/stable/modules/generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score.*\n    \"\"\"\n\n    return sil(emb, labels_true)\n</code></pre>"},{"location":"datasets.load_allen_brain_ds/","title":"Pre-processed datasets","text":""},{"location":"datasets.load_allen_brain_ds/#1-allen-brain-institute-drifting-gratings-presentations","title":"1. Allen Brain Institute (Drifting gratings presentations)","text":"<p>Method to load pre-computed arrays from the public available datasets of  Allen Brain Institute through AllenSDK. It contains data of Neuropixel recordings in mice's visual areas.  Spikes are stored as relative spike times for 1000 neurons randomly selected from 32 sessions.</p> <p>For more details, see http://help.brain-map.org/display/observatory/Documentation. </p> <p>Parameters:</p> Name Type Description Default <code>return_labels</code> <code>bool</code> <p>If True, it returns the stim. labels (i.e., drifting gratings' orientation).</p> <code>True</code> <p>Returns:</p> Name Type Description <code>spike_times</code> <code>numpy.ndarray</code> <p>Array with relative spike times.</p> <code>ii_spikes_times</code> <code>numpy.ndarray</code> <p><code>(M,N,2)</code>-Array with indices per neuron (N) and epoch (M).</p> <code>stim_labels</code> <code>numpy.ndarray</code> <p><code>M</code>-dimensional array with drifting gratings' orientations. </p> <p>Examples:</p> <pre><code>import numpy as np\nfrom spyketools.datasets import load_allen_brain_ds\n\n# reading data\nspike_times, ii_spike_times, stim_labels = load_allen_brain_ds()\n\nspike_times.shape\n# Output: 153635\n\n# number of epochs/trials\nii_spike_times.shape[0]\n# Output: 200\n\n# number of neurons\nii_spike_times.shape[1]\n# Output: 1000\n\n# number of stim. labels:\nlen(np.unique(stim_labels))\n# Output: 4\n</code></pre> Source code in <code>spyketools/datasets.py</code> <pre><code>def load_allen_brain_ds(return_labels=True):\n\"\"\"\n    Method to load pre-computed arrays from the public available datasets of \n    Allen Brain Institute through AllenSDK.\n    It contains data of Neuropixel recordings in mice's visual areas. \n    Spikes are stored as relative spike times for 1000 neurons randomly selected from 32 sessions.\n\n    For more details, see [http://help.brain-map.org/display/observatory/Documentation](http://help.brain-map.org/display/observatory/Documentation). \n\n    Parameters\n    ----------\n    return_labels : bool\n        If True, it returns the stim. labels (i.e., drifting gratings' orientation).\n\n    Returns\n    -------\n    spike_times : numpy.ndarray\n        Array with relative spike times.\n    ii_spikes_times: numpy.ndarray\n        `(M,N,2)`-Array with indices per neuron (N) and epoch (M).\n    stim_labels: numpy.ndarray\n        `M`-dimensional array with drifting gratings' orientations. \n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n    from spyketools.datasets import load_allen_brain_ds\n\n    # reading data\n    spike_times, ii_spike_times, stim_labels = load_allen_brain_ds()\n\n    spike_times.shape\n    # Output: 153635\n\n    # number of epochs/trials\n    ii_spike_times.shape[0]\n    # Output: 200\n\n    # number of neurons\n    ii_spike_times.shape[1]\n    # Output: 1000\n\n    # number of stim. labels:\n    len(np.unique(stim_labels))\n    # Output: 4\n    ```\n\n    \"\"\"\n    spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\n    ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n    stim_label     = np.load(\"demo_dataset_allen/stim_label.npy\")\n\n    if return_labels:\n        return spike_times, ii_spike_times, stim_label\n    return spike_times, ii_spike_times\n</code></pre>"},{"location":"distances.ISI/","title":"2. Inter-Spike Interval (ISI) distance","text":""},{"location":"distances.ISI/#spyketools.distances.ISI","title":"<code>spyketools.distances.ISI</code>","text":""},{"location":"distances.ISI/#spyketools.distances.ISI.ISI_distance","title":"<code>ISI_distance(t1, t2, t_start, t_end=0, mode='njit')</code>","text":"<p>Computation of ISI[^1] distance between two spike trains with relative spike times.</p> <p>Note: This method is based on Mariomulansky's implementation (Cython).  For further details, see PySpike github repository.</p> <p>Parameters:</p> Name Type Description Default <code>t1</code> <code>numpy.array</code> <p>First non-empty spike train.</p> required <code>t2</code> <code>numpy.array</code> <p>Second non-empty spike train.</p> required <code>t_start</code> <code>float</code> <p>Start time of spike trains (usually, it equals 0).</p> required <code>t_end</code> <code>float</code> <p>End time of spike trains (usually, it equals the window length size).</p> <code>0</code> <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>ISI distance between two spike trains.</p> <ol> <li> <p>Kreuz T, Haas JS, Morelli A, Abarbanel HDI, Politi A, Measuring spike train synchrony. J Neurosci Methods 165, 151 (2007).\u00a0\u21a9</p> </li> </ol> Source code in <code>spyketools/distances/ISI.py</code> <pre><code>def ISI_distance(t1, t2, t_start , t_end=0, mode='njit'):\n\"\"\"\n    Computation of ISI[^1] distance between two spike trains with relative spike times.\n\n    *Note:* This method is based on Mariomulansky's implementation (Cython). \n    For further details, see [PySpike github repository](https://github.com/mariomulansky/PySpike/blob/504ded4b3129a1bb7fdcfdc74fb394f838687345/pyspike/cython/cython_distances.pyx).\n\n    Parameters\n    ----------\n    t1 : numpy.array\n        First non-empty spike train.\n    t2 : numpy.array\n        Second non-empty spike train.\n    t_start : float\n        Start time of spike trains (usually, it equals 0).\n    t_end : float\n        End time of spike trains (usually, it equals the window length size).\n\n    Returns\n    -------\n    distance : float\n        ISI distance between two spike trains.\n\n    [^1]:\n        *Kreuz T, Haas JS, Morelli A, Abarbanel HDI, Politi A, Measuring spike train synchrony. J Neurosci Methods 165, 151 (2007)*.\n    \"\"\"\n    if t_end == 0 :\n        t_end = np.max(spike_times)\n    t_start = 0;\n\n    # TODO\n    # validations\n    # sorted?\n    # every spike in corresponding range?\n    if mode=='py':\n        return py_ISI_distance(t1, t2, t_start, t_end)\n    elif mode=='njit':\n        return ISI_dist(t1, t2, t_start, t_end)\n    else:\n        raise NotImplementedError(\"mode=='%s' is not implemented yet.\" % mode)\n</code></pre>"},{"location":"distances.ISI/#spyketools.distances.ISI.ISI_pairwise_distances","title":"<code>ISI_pairwise_distances(spike_times, ii_spike_times, window_length, diag_value=0, num_threads=-1)</code>","text":"<p>Compute ISI distance directly on spike times of all <code>M</code> trials/epochs with <code>N</code> channels/neurons using all available CPU cores.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <code>ii_spike_times</code> <code>numpy.ndarray</code> <p><code>(M,N,2)</code> dimensional matrix containing the start and end index for the <code>spike_times</code> array for any given epoch and channel combination.</p> required <code>window_length</code> <code>float</code> <p>Window length.</p> required <code>diag_value</code> <code>float</code> <p>Value to fill the diagonal.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p><code>(M,M)</code> distance matrix.</p> <p>Example:</p> <pre><code># importing modules\nimport numpy as np\nfrom spyketools.distances.ISI import ISI_pairwise_distance\n\n# reading example data\nspike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n# computation of pairwise distances\nISI_pairwise_distances(\n    spike_times, \n    ii_spike_times, \n    window_length=1.0, \n    diag_value=0)\n</code></pre> Source code in <code>spyketools/distances/ISI.py</code> <pre><code>def ISI_pairwise_distances(spike_times, ii_spike_times, window_length, diag_value=0, num_threads=-1):\n\"\"\"\n    Compute ISI distance directly on spike times of all `M` trials/epochs with `N` channels/neurons\n    using all available CPU cores.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n    ii_spike_times : numpy.ndarray\n        `(M,N,2)` dimensional matrix containing the start and end index for the `spike_times` array\n        for any given epoch and channel combination.\n    window_length : float\n        Window length.\n    diag_value : float\n        Value to fill the diagonal.\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        `(M,M)` distance matrix.\n\n\n    **Example:**\n\n    ```python\n    # importing modules\n    import numpy as np\n    from spyketools.distances.ISI import ISI_pairwise_distance\n\n    # reading example data\n    spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\n    ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n    # computation of pairwise distances\n    ISI_pairwise_distances(\n        spike_times, \n        ii_spike_times, \n        window_length=1.0, \n        diag_value=0)\n    ```\n    \"\"\"\n\n    # combination of epochs\n    n_epochs = ii_spike_times.shape[0]\n\n    epoch_index_pairs = np.array(\n        list(itertools.combinations(range(n_epochs), 2)),\n        dtype=int)\n\n    set_nthreads(num_threads)\n\n    return ISI_distance_pw(spike_times, ii_spike_times, epoch_index_pairs, window_length)\n</code></pre>"},{"location":"distances.RISPIKE/","title":"4. Rate-Independent SPIKE (RI-SPIKE) distance","text":""},{"location":"distances.RISPIKE/#spyketools.distances.RISPIKE.RISPIKE_distance","title":"<code>RISPIKE_distance(t1, t2, t_start, t_end=0, mode='njit')</code>","text":"<p>Computation of Rate-Independent SPIKE (RI-SPIKE)[^1] distance between two spike trains  with relative spike times.</p> <p>Note: This method is based on PySpike's implementation (Python).  For further details, see PySpike github repository.</p> <p>Parameters:</p> Name Type Description Default <code>t1</code> <code>numpy.array</code> <p>First non-empty spike train.</p> required <code>t2</code> <code>numpy.array</code> <p>Second non-empty spike train.</p> required <code>cost</code> <code>float</code> <p>Cost per unit time to move a spike. If not specified, cost equals the  average of lengths of t1 and t2.</p> required <code>mode</code> <code>str</code> <p>Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.</p> <code>'njit'</code> <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>SPIKE distance between two spike trains.</p> <p>Examples:</p> <pre><code>import numpy as np\nfrom spyketools.distances.SPIKE import SPIKE_distance\n\nspike_train_i = np.array([1.2,2,3.2])\nspike_train_j = np.array([1,2,3])\n\nSPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n# Output: 0.1188\n</code></pre> <pre><code>import numpy as np\nfrom spyketools.distances.SPIKE import SPIKE_distance\n\nspike_train_i = np.array([1,2,3,4])\nspike_train_j = np.array([1,2,3,3.5])\n\nSPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n# Output: 0.1418\n</code></pre> <ol> <li> <p>Satuvuori E, Mulansky M, Bozanic N, Malvestio I, Zeldenrust F, Lenk K, and Kreuz T, Measures of spike train synchrony for data with multiple time-scales, J Neurosci Methods 287, 25 (2017) .\u00a0\u21a9</p> </li> </ol> Source code in <code>spyketools/distances/RISPIKE.py</code> <pre><code>def RISPIKE_distance(t1, t2, t_start , t_end=0, mode='njit'):\n\"\"\"\n    Computation of Rate-Independent SPIKE (RI-SPIKE)[^1] distance between two spike trains \n    with relative spike times.\n\n    *Note:* This method is based on PySpike's implementation (Python). \n    For further details, see [PySpike github repository](https://github.com/mariomulansky/PySpike/blob/504ded4b3129a1bb7fdcfdc74fb394f838687345/pyspike/cython/cython_distances.pyx).\n\n    Parameters\n    ----------\n    t1 : numpy.array\n        First non-empty spike train.\n    t2 : numpy.array\n        Second non-empty spike train.\n    cost : float\n        Cost per unit time to move a spike. If not specified, cost equals the \n        average of lengths of t1 and t2.\n    mode : str\n        Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.\n\n\n    Returns\n    -------\n    distance : float\n        SPIKE distance between two spike trains.\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n    from spyketools.distances.SPIKE import SPIKE_distance\n\n    spike_train_i = np.array([1.2,2,3.2])\n    spike_train_j = np.array([1,2,3])\n\n    SPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n    # Output: 0.1188\n    ```\n\n    ```python\n    import numpy as np\n    from spyketools.distances.SPIKE import SPIKE_distance\n\n    spike_train_i = np.array([1,2,3,4])\n    spike_train_j = np.array([1,2,3,3.5])\n\n    SPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n    # Output: 0.1418\n    ```\n\n    [^1]:\n        *Satuvuori E, Mulansky M, Bozanic N, Malvestio I, Zeldenrust F, Lenk K, and Kreuz T, Measures of spike train synchrony for data with multiple time-scales, J Neurosci Methods 287, 25 (2017) *.\n\n    \"\"\"\n    if t_end == 0 :\n        t_end = np.max(spike_times)\n    t_start = 0;\n\n    # validations\n    # sorted?\n    # every spike in corresponding range?\n    # \n\n    if mode=='py':\n        return py_RISPIKE_distance(t1, t2, t_start, t_end)\n    elif mode=='njit':\n        return RISPIKE_dist(t1, t2, t_start, t_end)\n    else:\n        raise NotImplementedError(\"mode=='%s' is not implemented yet.\" % mode)\n</code></pre>"},{"location":"distances.RISPIKE/#spyketools.distances.RISPIKE.RISPIKE_pairwise_distances","title":"<code>RISPIKE_pairwise_distances(spike_times, ii_spike_times, window_length, diag_value=0, num_threads=-1)</code>","text":"<p>Compute SPIKE distance directly on spike times of all <code>M</code>  trials/epochs with <code>N</code> channels/neurons using all available CPU cores.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <code>ii_spike_times</code> <code>numpy.ndarray</code> <p><code>(M,N,2)</code> dimensional matrix containing the start and end index for the  <code>spike_times</code> array for any given epoch and channel combination.</p> required <code>window_length</code> <code>float</code> <p>Window length for edge corrections.</p> required <code>diag_value</code> <code>float</code> <p>Value to fill the diagonal.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p><code>(M,M)</code> distance matrix.</p> <p>Example:</p> <pre><code># importing modules\nimport numpy as np\nfrom spyketools.proc.distances.SPIKE import SPIKE_pairwise_distances\n\n# reading example data\nspike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n# computation of pairwise distances\nSPIKE_pairwise_distances(\n    spike_times, \n    ii_spike_times, \n    cost=1.5)\n</code></pre> Source code in <code>spyketools/distances/RISPIKE.py</code> <pre><code>def RISPIKE_pairwise_distances(spike_times, ii_spike_times, window_length, diag_value=0, num_threads=-1):\n\"\"\"\n    Compute SPIKE distance directly on spike times of all `M` \n    trials/epochs with `N` channels/neurons using all available CPU cores.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n    ii_spike_times : numpy.ndarray\n        `(M,N,2)` dimensional matrix containing the start and end index for the \n        `spike_times` array for any given epoch and channel combination.\n    window_length : float\n        Window length for edge corrections.\n    diag_value : float\n        Value to fill the diagonal.\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        `(M,M)` distance matrix.\n\n    **Example:**\n\n    ```python\n    # importing modules\n    import numpy as np\n    from spyketools.proc.distances.SPIKE import SPIKE_pairwise_distances\n\n    # reading example data\n    spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\n    ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n    # computation of pairwise distances\n    SPIKE_pairwise_distances(\n        spike_times, \n        ii_spike_times, \n        cost=1.5)\n    ```\n    \"\"\"\n\n    M = ii_spike_times.shape[0]\n    N = ii_spike_times.shape[1]\n\n    epoch_index_pairs = np.array(list(itertools.combinations(range(M), 2)), dtype=int)\n\n    set_nthreads(num_threads)\n\n    dist, _ = RISPIKE_distance_pw(\n        spike_times, ii_spike_times, epoch_index_pairs, t_end=window_length, diag_value=diag_value)\n\n    return dist\n</code></pre>"},{"location":"distances.SPIKE/","title":"3. SPIKE distance","text":""},{"location":"distances.SPIKE/#spyketools.distances.SPIKE.SPIKE_distance","title":"<code>SPIKE_distance(t1, t2, t_start, t_end=0, mode='njit')</code>","text":"<p>Computation of SPIKE[^1] distance between two spike trains  with relative spike times.</p> <p>Note: This method is based on PySpike's implementation (Python).  For further details, see PySpike github repository.</p> <p>Parameters:</p> Name Type Description Default <code>t1</code> <code>numpy.array</code> <p>First non-empty spike train.</p> required <code>t2</code> <code>numpy.array</code> <p>Second non-empty spike train.</p> required <code>cost</code> <code>float</code> <p>Cost per unit time to move a spike. If not specified, cost equals the  average of lengths of t1 and t2.</p> required <code>mode</code> <code>str</code> <p>Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.</p> <code>'njit'</code> <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>SPIKE distance between two spike trains.</p> <p>Examples:</p> <pre><code>import numpy as np\nfrom spyketools.distances.SPIKE import SPIKE_distance\n\nspike_train_i = np.array([1.2,2,3.2])\nspike_train_j = np.array([1,2,3])\n\nSPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n# Output: 0.1188\n</code></pre> <pre><code>import numpy as np\nfrom spyketools.distances.SPIKE import SPIKE_distance\n\nspike_train_i = np.array([1,2,3,4])\nspike_train_j = np.array([1,2,3,3.5])\n\nSPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n# Output: 0.1418\n</code></pre> <ol> <li> <p>Kreuz T, Chicharro D, Houghton C, Andrzejak RG, Mormann F, Monitoring spike train synchrony. J Neurophysiol 109, 1457 (2013).\u00a0\u21a9</p> </li> </ol> Source code in <code>spyketools/distances/SPIKE.py</code> <pre><code>def SPIKE_distance(t1, t2, t_start , t_end=0, mode='njit'):\n\"\"\"\n    Computation of SPIKE[^1] distance between two spike trains \n    with relative spike times.\n\n    *Note:* This method is based on PySpike's implementation (Python). \n    For further details, see [PySpike github repository](https://github.com/mariomulansky/PySpike/blob/504ded4b3129a1bb7fdcfdc74fb394f838687345/pyspike/cython/cython_distances.pyx).\n\n    Parameters\n    ----------\n    t1 : numpy.array\n        First non-empty spike train.\n    t2 : numpy.array\n        Second non-empty spike train.\n    cost : float\n        Cost per unit time to move a spike. If not specified, cost equals the \n        average of lengths of t1 and t2.\n    mode : str\n        Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.\n\n\n    Returns\n    -------\n    distance : float\n        SPIKE distance between two spike trains.\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n    from spyketools.distances.SPIKE import SPIKE_distance\n\n    spike_train_i = np.array([1.2,2,3.2])\n    spike_train_j = np.array([1,2,3])\n\n    SPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n    # Output: 0.1188\n    ```\n\n    ```python\n    import numpy as np\n    from spyketools.distances.SPIKE import SPIKE_distance\n\n    spike_train_i = np.array([1,2,3,4])\n    spike_train_j = np.array([1,2,3,3.5])\n\n    SPIKE_distance(spike_train_i, spike_train_j, t_start=0, t_end=5) \n    # Output: 0.1418\n    ```\n\n    [^1]:\n        *Kreuz T, Chicharro D, Houghton C, Andrzejak RG, Mormann F, Monitoring spike train synchrony. J Neurophysiol 109, 1457 (2013)*.\n\n    \"\"\"\n\n    if t_end == 0 :\n        t_end = np.max(spike_times)\n    t_start = 0;\n\n    # validations\n    # sorted?\n    # every spike in corresponding range?\n    # \n\n    if mode=='py':\n        return py_SPIKE(t1, t2, t_start, t_end)\n    elif mode=='njit':\n        return SPIKE_dist(t1, t2, t_start, t_end)\n    else:\n        raise NotImplementedError(\"mode=='%s' is not implemented yet.\" % mode)\n</code></pre>"},{"location":"distances.SPIKE/#spyketools.distances.SPIKE.SPIKE_pairwise_distances","title":"<code>SPIKE_pairwise_distances(spike_times, ii_spike_times, window_length, diag_value=0, num_threads=-1)</code>","text":"<p>Compute SPIKE distance directly on spike times of all <code>M</code>  trials/epochs with <code>N</code> channels/neurons using all available CPU cores.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <code>ii_spike_times</code> <code>numpy.ndarray</code> <p><code>(M,N,2)</code> dimensional matrix containing the start and end index for the  <code>spike_times</code> array for any given epoch and channel combination.</p> required <code>window_length</code> <code>float</code> <p>Window length for edge corrections.</p> required <code>diag_value</code> <code>float</code> <p>Value to fill the diagonal.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p><code>(M,M)</code> distance matrix.</p> <p>Example:</p> <pre><code># importing modules\nimport numpy as np\nfrom spyketools.proc.distances.SPIKE import SPIKE_pairwise_distances\n\n# reading example data\nspike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n# computation of pairwise distances\nSPIKE_pairwise_distances(\n    spike_times, \n    ii_spike_times, \n    cost=1.5)\n</code></pre> Source code in <code>spyketools/distances/SPIKE.py</code> <pre><code>def SPIKE_pairwise_distances(spike_times, ii_spike_times, window_length, diag_value=0, num_threads=-1):\n\"\"\"\n    Compute SPIKE distance directly on spike times of all `M` \n    trials/epochs with `N` channels/neurons using all available CPU cores.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n    ii_spike_times : numpy.ndarray\n        `(M,N,2)` dimensional matrix containing the start and end index for the \n        `spike_times` array for any given epoch and channel combination.\n    window_length : float\n        Window length for edge corrections.\n    diag_value : float\n        Value to fill the diagonal.\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        `(M,M)` distance matrix.\n\n    **Example:**\n\n    ```python\n    # importing modules\n    import numpy as np\n    from spyketools.proc.distances.SPIKE import SPIKE_pairwise_distances\n\n    # reading example data\n    spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\n    ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n    # computation of pairwise distances\n    SPIKE_pairwise_distances(\n        spike_times, \n        ii_spike_times, \n        cost=1.5)\n    ```\n    \"\"\"\n\n    M = ii_spike_times.shape[0]\n    N = ii_spike_times.shape[1]\n\n    epoch_index_pairs = np.array(list(itertools.combinations(range(M), 2)), dtype=int)\n\n    set_nthreads(num_threads)\n\n    dist, _ = SPIKE_distance_pw(\n        spike_times, ii_spike_times, epoch_index_pairs, t_end=window_length, diag_value=diag_value)\n\n    return dist\n</code></pre>"},{"location":"distances.SPOTDis/","title":"5. Spike Pattern Optimal Transport (SPOT) distance","text":""},{"location":"distances.SPOTDis/#spyketools.distances.SPOTDis.signature_emd_","title":"<code>signature_emd_(x, y)</code>","text":"<p>A fast implementation of the EMD on sparse 1D signatures like described in: Grossberger, L., Battaglia, FP. and Vinck, M. (2018). Unsupervised clustering of temporal patterns in high-dimensional neuronal ensembles using a novel dissimilarity measure. Source: https://github.com/LGro/spot/tree/main.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>numpy.ndarray</code> <p>List of occurrences / a histogram signature Note: Needs to be non-empty and longer or equally long as y</p> required <code>y</code> <code>numpy.ndarray</code> <p>List of occurrences / a histogram signature Notes: Needs to be non-empty and shorter or equally long as x</p> required <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>Earth Mover's Distances between the two signatures / occurrence lists</p> Source code in <code>spyketools/distances/SPOTDis.py</code> <pre><code>@jit(nopython=True)\ndef signature_emd_(x, y):\n\"\"\"\n    A fast implementation of the EMD on sparse 1D signatures like described in:\n    Grossberger, L., Battaglia, FP. and Vinck, M. (2018). Unsupervised clustering\n    of temporal patterns in high-dimensional neuronal ensembles using a novel\n    dissimilarity measure. Source: https://github.com/LGro/spot/tree/main.\n\n    Parameters\n    ----------\n    x : numpy.ndarray\n        List of occurrences / a histogram signature\n        Note: Needs to be non-empty and longer or equally long as y\n    y : numpy.ndarray\n        List of occurrences / a histogram signature\n        Notes: Needs to be non-empty and shorter or equally long as x\n\n    Returns\n    -------\n    distance : float\n        Earth Mover's Distances between the two signatures / occurrence lists\n\n    \"\"\"\n\n    Q = len(x)\n    R = len(y)\n\n    if Q == 0 or R == 0:\n        return np.nan\n\n    if Q &lt; R:\n        raise AttributeError('First argument must be longer than or equally long as second.')\n\n    x.sort()\n    y.sort()\n\n    # Use integers as weights since they are less prome to precision issues when subtracting\n    w_x = R # = Q*R/Q\n    w_y = Q # = Q*R/R\n\n    emd = 0.\n    q = 0\n    r = 0\n\n    while q &lt; Q:\n        if w_x &lt;= w_y:\n            cost = w_x * abs(x[q] - y[r])\n            w_y -= w_x\n            w_x = R\n            q += 1\n        else:\n            cost = w_y * abs(x[q] - y[r])\n            w_x -= w_y\n            w_y = Q\n            r += 1\n\n        emd += cost\n\n    # Correct for the initial scaling to integer weights\n    return emd/(Q*R)\n</code></pre>"},{"location":"distances.SPOTDis/#spyketools.distances.SPOTDis.xcorr_spotdis_cpu_","title":"<code>xcorr_spotdis_cpu_(spike_times, ii_spike_times, epoch_index_pairs)</code>","text":"<p>Compute distances between channel cross correlation pairs using all available CPU cores. The specific type of distance is provided via the parameter 'metric'.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <p>ii_spike_times : numpy.ndarray     MxNx2 dimensional matrix containing the start and end index for the spike_times array     for any given epoch and channel combination</p> <p>epoch_index_pairs : numpy.ndarray     (M*(M-1)/2)x2 dimensional matrix containing all unique epoch index pairs</p> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p>MxM distance matrix with numpy.nan for unknown distances and on the diagonal</p> Source code in <code>spyketools/distances/SPOTDis.py</code> <pre><code>@jit(nopython=True, parallel=True)\ndef xcorr_spotdis_cpu_(spike_times, ii_spike_times, epoch_index_pairs):\n\"\"\"Compute distances between channel cross correlation pairs using all available CPU cores.\n    The specific type of distance is provided via the parameter 'metric'.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n\n    ii_spike_times : numpy.ndarray\n        MxNx2 dimensional matrix containing the start and end index for the spike_times array\n        for any given epoch and channel combination\n\n    epoch_index_pairs : numpy.ndarray\n        (M*(M-1)/2)x2 dimensional matrix containing all unique epoch index pairs\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        MxM distance matrix with numpy.nan for unknown distances and on the diagonal\n    \"\"\"\n\n    # Get data dimensions\n    n_epochs = ii_spike_times.shape[0]\n    n_channels = ii_spike_times.shape[1]\n    n_epoch_index_pairs = epoch_index_pairs.shape[0]\n\n    # Initialize distance matrix\n    distances = np.full((n_epochs, n_epochs), np.nan)\n\n    nan_count = 0.0\n\n    # For each epoch pair\n    for i in prange(n_epoch_index_pairs):\n        e1 = epoch_index_pairs[i,0]\n        e2 = epoch_index_pairs[i,1]\n\n        # Compute distances for all xcorr pairs between the two epochs\n        xcorr_distances = np.full(int(n_channels * (n_channels-1) / 2), np.nan)\n        n_xcorr_distances = 0\n        i_xcorr_distance = -1\n        for c1 in range(n_channels):\n            for c2 in range(c1):\n                i_xcorr_distance += 1\n\n                # Only compute the xcorrs and distance in case there is a spike in all relevant channels\n                if ((ii_spike_times[e1,c1,1] - ii_spike_times[e1,c1,0]) &gt; 0\n                    and (ii_spike_times[e1,c2,1] - ii_spike_times[e1,c2,0]) &gt; 0\n                    and (ii_spike_times[e2,c1,1] - ii_spike_times[e2,c1,0]) &gt; 0\n                    and (ii_spike_times[e2,c2,1] - ii_spike_times[e2,c2,0]) &gt; 0):\n\n                    # Compute the xcorrs\n                    xcorr1 = xcorr_list(\n                            spike_times[ii_spike_times[e1,c1,0]:ii_spike_times[e1,c1,1]],\n                            spike_times[ii_spike_times[e1,c2,0]:ii_spike_times[e1,c2,1]])\n                    xcorr2 = xcorr_list(\n                            spike_times[ii_spike_times[e2,c1,0]:ii_spike_times[e2,c1,1]],\n                            spike_times[ii_spike_times[e2,c2,0]:ii_spike_times[e2,c2,1]])\n\n                    # EMD\n                    if len(xcorr1) &gt;= len(xcorr2):\n                        xcorr_distances[i_xcorr_distance] = signature_emd_(xcorr1, xcorr2)\n                    else:\n                        xcorr_distances[i_xcorr_distance] = signature_emd_(xcorr2, xcorr1)\n\n                    n_xcorr_distances = n_xcorr_distances + 1\n                else:\n                    nan_count = nan_count + 1\n\n        # Save average xcorr distance\n        if n_xcorr_distances &gt; 0:\n            distances[e1, e2] = np.nanmean(xcorr_distances)\n            distances[e2, e1] = distances[e1, e2]\n\n    percent_nan = nan_count / ((n_channels*(n_channels-1)/2)*n_epoch_index_pairs)\n\n    return distances, percent_nan\n</code></pre>"},{"location":"distances.SPOTDis/#spyketools.distances.SPOTDis.spike_spotdis_cpu_","title":"<code>spike_spotdis_cpu_(spike_times, ii_spike_times, epoch_index_pairs)</code>","text":"<p>Compute the given metric directly on spike times of all M epochs with N channels using all available CPU cores.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <p>ii_spike_times : numpy.ndarray     MxNx2 dimensional matrix containing the start and end index for the spike_times array     for any given epoch and channel combination</p> <p>epoch_index_pairs : numpy.ndarray     (M*(M-1)/2)x2 dimensional matrix containing all unique epoch index pairs</p> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p>MxM distance matrix with numpy.nan for unknown distances and on the diagonal</p> Source code in <code>spyketools/distances/SPOTDis.py</code> <pre><code>@jit(nopython=True, parallel=True)\ndef spike_spotdis_cpu_(spike_times, ii_spike_times, epoch_index_pairs):\n\"\"\"Compute the given metric directly on spike times of all M epochs with N channels\n    using all available CPU cores.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n\n    ii_spike_times : numpy.ndarray\n        MxNx2 dimensional matrix containing the start and end index for the spike_times array\n        for any given epoch and channel combination\n\n    epoch_index_pairs : numpy.ndarray\n        (M*(M-1)/2)x2 dimensional matrix containing all unique epoch index pairs\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        MxM distance matrix with numpy.nan for unknown distances and on the diagonal\n    \"\"\"\n\n    # Get data dimensions\n    n_epochs = ii_spike_times.shape[0]\n    n_channels = ii_spike_times.shape[1]\n    n_epoch_index_pairs = epoch_index_pairs.shape[0]\n\n    # Initialize distance matrix\n    distances = np.full((n_epochs, n_epochs), np.nan)\n\n    nan_count = 0.0\n\n    # For each epoch pair\n    for i in prange(n_epoch_index_pairs):\n        e1 = epoch_index_pairs[i,0]\n        e2 = epoch_index_pairs[i,1]\n\n        # Compute distances for all neuron pairs between the two epochs\n        neuron_distances = np.full(n_channels, np.nan)\n        for c in range(n_channels):\n            # Only compute the emd if there is a spike in that channels in both epochs\n            if ((ii_spike_times[e1,c,1] - ii_spike_times[e1,c,0]) &gt; 0\n                and (ii_spike_times[e2,c,1] - ii_spike_times[e2,c,0]) &gt; 0):\n\n                channel_spikes_e1 = spike_times[ii_spike_times[e1,c,0]:ii_spike_times[e1,c,1]]\n                channel_spikes_e2 = spike_times[ii_spike_times[e2,c,0]:ii_spike_times[e2,c,1]]\n\n                # EMD\n                if len(channel_spikes_e1) &gt;= len(channel_spikes_e2):\n                    neuron_distances[c] = signature_emd_(channel_spikes_e1, channel_spikes_e2)\n                else:\n                    neuron_distances[c] = signature_emd_(channel_spikes_e2, channel_spikes_e1)\n\n            else:\n                nan_count = nan_count + 1\n\n        # Save average and std of distances\n        distances[e1, e2] = np.nanmean(neuron_distances)\n        distances[e2, e1] = distances[e1, e2]\n\n    percent_nan = nan_count / (n_channels*n_epoch_index_pairs)\n\n    # Set diagonal to zero\n    for i in range(n_epochs):\n        distances[i, i] = 0\n        #distance_stds[i, i] = 0\n\n    #return distances, distance_stds, percent_nan\n    return distances, percent_nan\n</code></pre>"},{"location":"distances.SPOTDis/#spyketools.distances.SPOTDis.distances","title":"<code>distances(spike_times, ii_spike_times, epoch_length=1.0, metric='SPOTD_xcorr')</code>","text":"<p>Compute temporal distances based on various versions of the SPOTDis, using CPU parallelization.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <p>ii_spike_times : numpy.ndarray     MxNx2 dimensional matrix containing the start and end index for the spike_times array     for any given epoch and channel combination</p> <p>metric : str     Pick the specific metric by combining the metric ID with either 'xcorr' to compute it on     pairwise xcorr histograms or 'times' to compute it directly on spike times.     Currently available:         * SPOTD_xcorr         * SPOTD_xcorr_pooled         * SPOTD_spikes</p> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p>MxM distance matrix with numpy.nan for unknown distances</p> Source code in <code>spyketools/distances/SPOTDis.py</code> <pre><code>def distances(spike_times, ii_spike_times, epoch_length=1.0, metric='SPOTD_xcorr'):\n\"\"\"Compute temporal distances based on various versions of the SPOTDis, using CPU parallelization.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n\n    ii_spike_times : numpy.ndarray\n        MxNx2 dimensional matrix containing the start and end index for the spike_times array\n        for any given epoch and channel combination\n\n    metric : str\n        Pick the specific metric by combining the metric ID with either 'xcorr' to compute it on\n        pairwise xcorr histograms or 'times' to compute it directly on spike times.\n        Currently available:\n            * SPOTD_xcorr\n            * SPOTD_xcorr_pooled\n            * SPOTD_spikes\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        MxM distance matrix with numpy.nan for unknown distances\n    \"\"\"\n\n    n_epochs = ii_spike_times.shape[0]\n\n    epoch_index_pairs = np.array(\n        list(itertools.combinations(range(n_epochs), 2)),\n        dtype=int)\n\n    # SPOTDis comparing the pairwise xcorrs of channels\n    if metric == 'SPOTD_xcorr':\n        distances, percent_nan = xcorr_spotdis_cpu_(\n            spike_times, ii_spike_times, epoch_index_pairs)\n        distances = distances / (2*epoch_length)\n\n    # SPOTDis comparing the xcorr of a channel with all other channels pooled\n    elif metric == 'SPOTD_xcorr_pooled':\n        distances, percent_nan = xcorr_pooled_spotdis_cpu_(\n            spike_times, ii_spike_times, epoch_index_pairs)\n        distances = distances / (2*epoch_length)\n\n    # SPOTDis comparing raw spike trains\n    elif metric == 'SPOTD_spikes':\n        distances, percent_nan = spike_spotdis_cpu_(\n            spike_times, ii_spike_times, epoch_index_pairs)\n        distances = distances / epoch_length\n\n    # Otherwise, raise exception\n    else:\n        raise NotImplementedError('Metric \"{}\" unavailable, check doc-string for alternatives.'.format(\n            metric))\n\n    np.fill_diagonal(distances, 0)\n\n    return distances\n</code></pre>"},{"location":"distances.SPOTDis/#spyketools.distances.SPOTDis.xcorr_list","title":"<code>xcorr_list(in1, in2)</code>","text":"<p>List of all time delays from a full cross correlation of the two inputs</p> <p>Parameters:</p> Name Type Description Default <code>in1</code> <code>numpy.ndarray</code> <p>Occurence times / indices</p> required <code>in2</code> <code>numpy.ndarray</code> <p>Occurence times / indices</p> required Source code in <code>spyketools/distances/SPOTDis.py</code> <pre><code>@jit(nopython=True)\ndef xcorr_list(in1, in2):\n\"\"\"List of all time delays from a full cross correlation of the two inputs\n\n    Parameters\n    ----------\n    in1 : numpy.ndarray\n        Occurence times / indices\n    in2 : numpy.ndarray\n        Occurence times / indices\n    \"\"\"\n\n    n1 = len(in1)\n    n2 = len(in2)\n\n    C = [0.0]*(n1*n2)\n    for i in range(n1):\n        for j in range(n2):\n            C[i*n2+j] = in2[j] - in1[i]\n\n    return C\n</code></pre>"},{"location":"distances.firing_rate/","title":"Distances.firing rate","text":""},{"location":"distances.firing_rate/#spyketools.distances.firing_rate.get_SC_diss","title":"<code>get_SC_diss(ii_spike_times)</code>","text":"<p>Return the collection values. Returns:     The collection values.</p> Source code in <code>spyketools/distances/firing_rate.py</code> <pre><code>@njit\ndef get_SC_diss(ii_spike_times):\n    # function get_SC_diss(ii_spike_times):\n\"\"\"Return the collection values.\n        Returns:\n            The collection values.\n        \"\"\"\n    # pairwise\n    M = ii_spike_times.shape[0]\n    N = ii_spike_times.shape[1]\n    sc_dis = np.zeros(shape=(M,M))\n    for e0 in range(ii_spike_times.shape[0]):\n        for e1 in range(e0+1, ii_spike_times.shape[0]):\n            tmp_st1 = ii_spike_times[e0,:,1]-ii_spike_times[e0,:,0]\n            tmp_st2 = ii_spike_times[e1,:,1]-ii_spike_times[e1,:,0]\n            sc_dis[e0, e1] = np.sqrt(np.sum((tmp_st1-tmp_st2)**2))\n            sc_dis[e1, e0] = sc_dis[e0, e1]\n    return sc_dis\n</code></pre>"},{"location":"distances.firing_rate/#spyketools.distances.firing_rate.distance","title":"<code>distance(ii_spike_times, mode='simple', normalized=False, window_length=1, nan_diag=False)</code>","text":"<p>mode: simple, pairwise.</p> Source code in <code>spyketools/distances/firing_rate.py</code> <pre><code>def distance(ii_spike_times, mode='simple', normalized=False, window_length=1, nan_diag=False):\n\"\"\"\n    mode: simple, pairwise.\n    \"\"\"\n    dist = None\n    if mode=='simple':\n        raise(\"mode '%s' is not implemented yet is not implemented\" % mode)\n    elif mode=='pairwise':\n        if normalized:\n            dist = get_SC_diss_z(ii_spike_times)\n        else:\n            dist = get_SC_diss(ii_spike_times)\n    else:\n        raise(\"Error: mode '%s' is not implemented\" % mode)\n\n    if nan_diag:\n        np.fill_diagonal(dist, np.nan)\n    return dist/window_length\n</code></pre>"},{"location":"distances.spikeship/","title":"6. SpikeShip distance","text":""},{"location":"distances.spikeship/#spyketools.distances.spikeship.spikeship_distance","title":"<code>spikeship_distance(t1, t2, mode='njit')</code>","text":"<p>Computation of SpikeShip[^1] between two spike trains (relative spike times).</p> <p>Parameters:</p> Name Type Description Default <code>t1</code> <code>numpy.array</code> <p>First non-empty spike train</p> required <code>t2</code> <code>numpy.array</code> <p>Second non-empty spike train</p> required <code>mode</code> <code>str</code> <p>Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.</p> <code>'njit'</code> <p>Returns:</p> Name Type Description <code>f</code> <code>float</code> <p>SpikeShip value for two spike trains</p> <p>Examples:</p> <pre><code>import numpy as np\nfrom spyketools.distances.spikeship import spikeship_distance\n\nspike_train_i = np.array([1.2,2,3.2])\nspike_train_j = np.array([1,2,3])\n\nspikeship_distance(spike_train_i, spike_train_j) \n</code></pre> <ol> <li> <p>Sotomayor-G\u00f3mez, B., Battaglia, F. P., &amp; Vinck, M. (2020). SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns. bioRxiv, 2020-06. \u21a9</p> </li> </ol> Source code in <code>spyketools/distances/spikeship.py</code> <pre><code>def spikeship_distance(t1, t2, mode='njit'):\n\"\"\"\n    Computation of SpikeShip[^1] between two spike trains (relative spike times).\n\n    Parameters\n    ----------\n    t1 : numpy.array\n        First non-empty spike train\n    t2 : numpy.array\n        Second non-empty spike train\n    mode : str\n        Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.\n\n    Returns\n    -------\n    f : float\n        SpikeShip value for two spike trains\n\n    **Examples:**\n\n    ```python    \n    import numpy as np\n    from spyketools.distances.spikeship import spikeship_distance\n\n    spike_train_i = np.array([1.2,2,3.2])\n    spike_train_j = np.array([1,2,3])\n\n    spikeship_distance(spike_train_i, spike_train_j) \n    ```\n\n    [^1]:\n        *Sotomayor-G\u00f3mez, B., Battaglia, F. P., &amp; Vinck, M. (2020). SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns. bioRxiv, 2020-06.*\n\n    \"\"\"\n    if mode=='njit':\n        len_t1 = len(t1)\n        len_t2 = len(t2)\n        if len_t1 != len_t2:\n            if len_t1 &gt; len_t2:\n                c_temp = signature_emd_ss(t1, t2)\n                C = c_temp[0]\n                W = c_temp[1] / (len_t1 * len_t2)\n            else:\n                c_temp = signature_emd_ss(t2, t1)\n                C = -c_temp[0] \n                W =  c_temp[1] / (len_t1 * len_t2)\n        else:\n            c_temp = signature_emd_ss(t2, t1)\n\n            C = c_temp[0]\n            W = 1.0/c_temp[1]\n\n        g = weighted_median_(C, W)\n\n        return np.sum(np.abs((C-g)*W))\n    else:\n        len_t1 = len(t1)\n        len_t2 = len(t2)\n        if len_t1 != len_t2:\n            if len_t1 &gt; len_t2:\n                c_temp = py_signature_emd_ss(t1, t2)\n                C = c_temp[0]\n                W = c_temp[1] / (len_t1 * len_t2)\n            else:\n                c_temp = py_signature_emd_ss(t2, t1)\n                C = -c_temp[0] \n                W =  c_temp[1] / (len_t1 * len_t2)\n        else:\n            c_temp = py_signature_emd_ss(t2, t1)\n\n            C = c_temp[0]\n            W = 1.0/c_temp[1]\n\n        g = py_weighted_median_(C, W)\n\n        return np.sum(np.abs((C-g)*W))\n</code></pre>"},{"location":"distances.spikeship/#spyketools.distances.spikeship.spikeship_pairwise_distances","title":"<code>spikeship_pairwise_distances(spike_times, ii_spike_times, num_threads=-1)</code>","text":"<p>Compute SpikeShip[^1] distance directly on spike times of all <code>M</code>  trials/epochs with <code>N</code> channels/neurons using all available CPU cores.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <code>ii_spike_times</code> <code>numpy.ndarray</code> <p>MxNx2 dimensional matrix containing the start and end index for the spike_times array for any given epoch and channel combination</p> required <p>Returns:</p> Name Type Description <code>f</code> <code>numpy.ndarray</code> <p><code>(M,M)</code> matrix with $f$ distances (neuron-specific shifts) with <code>numpy.nan</code> for unknown distances</p> <p>Example:</p> <pre><code># importing modules\nfrom spyketools.datasets import load_allen_brain_ds\nfrom spyketools.proc.distances.spikeship import spikeship_pairwise_distances\n\n# reading data\nspike_times, ii_spike_times, _ = load_allen_brain_ds()\n\n# computation of pairwise distances\nspikeship_pairwise_distances(spike_times, ii_spike_times)\n</code></pre> <ol> <li> <p>Sotomayor-G\u00f3mez, B., Battaglia, F. P., &amp; Vinck, M. (2020). SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns. bioRxiv, 2020-06. \u21a9</p> </li> </ol> Source code in <code>spyketools/distances/spikeship.py</code> <pre><code>def spikeship_pairwise_distances(spike_times, ii_spike_times, num_threads=-1):\n\"\"\"\n    Compute SpikeShip[^1] distance directly on spike times of all `M` \n    trials/epochs with `N` channels/neurons using all available CPU cores.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n    ii_spike_times : numpy.ndarray\n        MxNx2 dimensional matrix containing the start and end index for the spike_times array\n        for any given epoch and channel combination\n\n    Returns\n    -------\n    f : numpy.ndarray\n        `(M,M)` matrix with $f$ distances (neuron-specific shifts) with `numpy.nan` for unknown distances\n\n    **Example:**\n\n    ```python\n    # importing modules\n    from spyketools.datasets import load_allen_brain_ds\n    from spyketools.proc.distances.spikeship import spikeship_pairwise_distances\n\n    # reading data\n    spike_times, ii_spike_times, _ = load_allen_brain_ds()\n\n    # computation of pairwise distances\n    spikeship_pairwise_distances(spike_times, ii_spike_times)\n    ```\n\n    [^1]:\n        *Sotomayor-G\u00f3mez, B., Battaglia, F. P., &amp; Vinck, M. (2020). SpikeShip: A method for fast, unsupervised discovery of high-dimensional neural spiking patterns. bioRxiv, 2020-06.*\n    \"\"\"\n\n    if spike_times.ndim != 1: #First argument must be longer than or equally long as second\n        raise AttributeError('First argument must be 1-dim but it is %i-dim' % spike_times.ndim)\n    if ii_spike_times.ndim != 3:\n        raise AttributeError('Second argument must be 3-dim (i.e., MxNx2) but it is %i-dim' % ii_spike_times.ndim)\n\n    n_epochs = ii_spike_times.shape[0]\n\n    epoch_index_pairs = np.array(\n        list(itertools.combinations(range(n_epochs), 2)),\n        dtype=int)\n\n    set_nthreads(num_threads)\n\n    return distances_SpikeShip(ii_spike_times, spike_times, epoch_index_pairs)\n</code></pre>"},{"location":"distances.victor_purpura/","title":"1. Victor-Purpura (VP) distance","text":""},{"location":"distances.victor_purpura/#spyketools.distances.victor_purpura","title":"<code>spyketools.distances.victor_purpura</code>","text":""},{"location":"distances.victor_purpura/#spyketools.distances.victor_purpura.VP_distance","title":"<code>VP_distance(t1, t2, cost=None, mode='njit')</code>","text":"<p>Computation of Victor-Purpura[^1] distance between two spike trains  with relative spike times.</p> <p>Note: This method is based on Mariomulansky's implementation (Python).  For further details, see Elephant github repository.</p> <p>Parameters:</p> Name Type Description Default <code>t1</code> <code>numpy.array</code> <p>First non-empty spike train.</p> required <code>t2</code> <code>numpy.array</code> <p>Second non-empty spike train.</p> required <code>cost</code> <code>float</code> <p>Cost per unit time to move a spike. If not specified, cost equals the  average of lengths of t1 and t2.</p> <code>None</code> <code>mode</code> <code>str</code> <p>Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.</p> <code>'njit'</code> <p>Returns:</p> Name Type Description <code>distance</code> <code>float</code> <p>Victor-Purpura distance between two spike trains.</p> <p>Examples: <pre><code>import numpy as np\nfrom spyketools.distances.victor_purpura_distance import VP_distance_single\n\nspike_train_i = np.array([1,2,3,4])\nspike_train_j = np.array([1,2,3])\ncost = 1\nVP_distance_single(spike_train_i, spike_train_j, cost=cost) \n# Output: 1.0\n</code></pre></p> <pre><code>import numpy as np\nfrom spyketools.distances.victor_purpura_distance import VP_distance_single\n\nspike_train_i = np.array([1.2,2,3.2])\nspike_train_j = np.array([1,2,3])\ncost = 1\nVP_distance_single(spike_train_i, spike_train_j, cost=cost) \n# Output: 0.4\n</code></pre> <pre><code>import numpy as np\nfrom spyketools.distances.victor_purpura_distance import VP_distance_single\n\nspike_train_i = np.array([1,2,3,4])\nspike_train_j = np.array([1,2,3,3.5])\ncost = 0.5\n\nVP_distance_single(spike_train_i, spike_train_j, cost=cost) \n# Output: 0.25\n</code></pre> <ol> <li> <p>Aronov, Dmitriy. \"Fast algorithm for the metric-space analysis of simultaneous responses of multiple single neurons.\" Journal of Neuroscience Methods 124.2 (2003): 175-179. \u21a9</p> </li> </ol> Source code in <code>spyketools/distances/victor_purpura.py</code> <pre><code>def VP_distance(t1, t2, cost=None, mode='njit'):\n\"\"\"\n    Computation of Victor-Purpura[^1] distance between two spike trains \n    with relative spike times.\n\n    *Note:* This method is based on Mariomulansky's implementation (Python). \n    For further details, see [Elephant github repository](https://github.com/nicodjimenez/fit_neuron/blob/\n        7b18b6599a3324a3418045282818363fea9aede5/fit_neuron/evaluate/\n        spkd_lib.py#L178).\n\n    Parameters\n    ----------\n    t1 : numpy.array\n        First non-empty spike train.\n    t2 : numpy.array\n        Second non-empty spike train.\n    cost : float\n        Cost per unit time to move a spike. If not specified, cost equals the \n        average of lengths of t1 and t2.\n    mode : str\n        Mode of execution. Options are 'py' (python) and 'njit' (compiled) only.\n\n\n    Returns\n    -------\n    distance : float\n        Victor-Purpura distance between two spike trains.\n\n    **Examples:**\n    ```python\n    import numpy as np\n    from spyketools.distances.victor_purpura_distance import VP_distance_single\n\n    spike_train_i = np.array([1,2,3,4])\n    spike_train_j = np.array([1,2,3])\n    cost = 1\n    VP_distance_single(spike_train_i, spike_train_j, cost=cost) \n    # Output: 1.0\n    ```\n\n    ```python    \n    import numpy as np\n    from spyketools.distances.victor_purpura_distance import VP_distance_single\n\n    spike_train_i = np.array([1.2,2,3.2])\n    spike_train_j = np.array([1,2,3])\n    cost = 1\n    VP_distance_single(spike_train_i, spike_train_j, cost=cost) \n    # Output: 0.4\n    ```\n\n    ```python\n    import numpy as np\n    from spyketools.distances.victor_purpura_distance import VP_distance_single\n\n    spike_train_i = np.array([1,2,3,4])\n    spike_train_j = np.array([1,2,3,3.5])\n    cost = 0.5\n\n    VP_distance_single(spike_train_i, spike_train_j, cost=cost) \n    # Output: 0.25\n    ```\n\n    [^1]:\n        *Aronov, Dmitriy. \"Fast algorithm for the metric-space analysis\n        of simultaneous responses of multiple single neurons.\" Journal\n        of Neuroscience Methods 124.2 (2003): 175-179.*\n\n    \"\"\"\n    if cost is None:\n        cost = (len(st1)+len(st2))/2.\n\n    if mode=='py':\n        return py_victor_purpura_distance(t1, t2, cost)\n    elif mode=='njit':\n        return victor_purpura_distance(t1, t2, cost)\n</code></pre>"},{"location":"distances.victor_purpura/#spyketools.distances.victor_purpura.VP_pairwise_distances","title":"<code>VP_pairwise_distances(spike_times, ii_spike_times, cost=None, diag_value=0, num_threads=-1)</code>","text":"<p>Compute Victor-Purpura (VP) distance directly on spike times of all <code>M</code>  trials/epochs with <code>N</code> channels/neurons using all available CPU cores.</p> <p>Parameters:</p> Name Type Description Default <code>spike_times</code> <code>numpy.ndarray</code> <p>1 dimensional matrix containing all spike times</p> required <code>ii_spike_times</code> <code>numpy.ndarray</code> <p><code>(M,N,2)</code> dimensional matrix containing the start and end index for the  <code>spike_times</code> array for any given epoch and channel combination.</p> required <code>cost</code> <code>float</code> <p>Cost per unit time to move a spike. If not specified, cost equals to the  average spike counts.</p> <code>None</code> <code>diag_value</code> <code>float</code> <p>Value to fill the diagonal.</p> <code>0</code> <p>Returns:</p> Name Type Description <code>distances</code> <code>numpy.ndarray</code> <p><code>(M,M)</code> distance matrix.</p> <p>Example:</p> <pre><code># importing modules\nimport numpy as np\nfrom spyketools.distances.victor_purpura import VP_pairwise_distances\n\n# reading example data\nspike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n# computation of pairwise distances\nVP_pairwise_distances(\n    spike_times, \n    ii_spike_times, \n    cost=1.5)\n</code></pre> <p>Runtime warning</p> <p>The computation of this distance might take a long time!  The computational complexity of the pairwise VP distances is $\\mathcal{O}(M^2N^2n^2)$123,  where:</p> <ul> <li>$M$: # trials</li> <li>$N$: # neurons, and </li> <li>$n$: average spike counts across trials.</li> </ul> <ol> <li> <p>Aronov, Dmitriy. \"Fast algorithm for the metric-space analysis of simultaneous responses of multiple single neurons.\" Journal of Neuroscience Methods 124.2 (2003): 175-179. \u21a9</p> </li> <li> <p>Victor, J. D. &amp; Purpura, K. P. Nature and precision of temporal coding in  visual cortex: a metric-space analysis. J. neurophysiology 76, 1310\u20131326 (1996). \u21a9</p> </li> <li> <p>Victor, J. D. &amp; Purpura, K. P. Metric-space analysis of spike trains: theory,  algorithms and application. Network: computation neural systems 8, 127\u2013164 (1997). \u21a9</p> </li> </ol> Source code in <code>spyketools/distances/victor_purpura.py</code> <pre><code>def VP_pairwise_distances(spike_times, ii_spike_times, cost=None, diag_value=0, num_threads=-1):\n\"\"\"\n    Compute Victor-Purpura (VP) distance directly on spike times of all `M` \n    trials/epochs with `N` channels/neurons using all available CPU cores.\n\n    Parameters\n    ----------\n    spike_times : numpy.ndarray\n        1 dimensional matrix containing all spike times\n    ii_spike_times : numpy.ndarray\n        `(M,N,2)` dimensional matrix containing the start and end index for the \n        `spike_times` array for any given epoch and channel combination.\n    cost : float\n        Cost per unit time to move a spike. If not specified, cost equals to the \n        average spike counts.\n    diag_value : float\n        Value to fill the diagonal.\n\n    Returns\n    -------\n    distances : numpy.ndarray\n        `(M,M)` distance matrix.\n\n    **Example:**\n\n    ```python\n    # importing modules\n    import numpy as np\n    from spyketools.distances.victor_purpura import VP_pairwise_distances\n\n    # reading example data\n    spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\n    ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n\n    # computation of pairwise distances\n    VP_pairwise_distances(\n        spike_times, \n        ii_spike_times, \n        cost=1.5)\n    ```\n\n    !!! warning \"Runtime warning\"\n        The computation of this distance might take a long time! \n        The computational complexity of the pairwise VP distances is $\\mathcal{O}(M^2N^2n^2)$[^1][^2][^3], \n        where:\n\n        + $M$: # trials\n        + $N$: # neurons, and \n        + $n$: average spike counts across trials.\n\n    [^1]:\n        *Aronov, Dmitriy. \"Fast algorithm for the metric-space analysis\n        of simultaneous responses of multiple single neurons.\" Journal\n        of Neuroscience Methods 124.2 (2003): 175-179.*\n    [^2]:\n        *Victor, J. D. &amp; Purpura, K. P. Nature and precision of temporal coding in \n        visual cortex: a metric-space analysis. J. neurophysiology 76, 1310\u20131326 (1996).*\n    [^3]:\n        *Victor, J. D. &amp; Purpura, K. P. Metric-space analysis of spike trains: theory, \n        algorithms and application. Network: computation neural systems 8, 127\u2013164 (1997).*\n    \"\"\"\n\n    M = ii_spike_times.shape[0]\n    N = ii_spike_times.shape[1]\n    if cost is None:\n        cost = np.mean(ii_spike_times[:,:,1]-ii_spike_times[:,:,0])\n\n    epoch_index_pairs = np.array(list(itertools.combinations(range(M), 2)), dtype=int)\n\n    set_nthreads(num_threads)\n\n    dist, _ = victor_purpura_distance_pw(\n        spike_times, ii_spike_times, epoch_index_pairs, cost, diag_value)\n\n    return dist\n</code></pre>"},{"location":"io.DataManager/","title":"Handling neuronal data in NWB format","text":""},{"location":"io.DataManager/#spyketools.io.DataManager","title":"<code>spyketools.io.DataManager</code>","text":"<p><code>DataManager</code> helps users to have access to specific data from NWB datasets by applying filters across neuron (i.e., brain area) and/or trials/epochs (i.e., stimulus name). </p> <p>Parameters:</p> Name Type Description Default <code>db_path</code> <code>str</code> <p>Full path to dataset (NWB format only).</p> required <code>verbose</code> <code>bool</code> <p>If True, DataManager show debug information in console.</p> <code>False</code> <p>Example: <pre><code>from spyketools.io.DataManager import DataManager\ndb_path = '~/sotomayorb/AllenSDK_datasets/1026124216'\n\n# reading data\nmy_db = DataManager(db_path = db_path, verbose=True)\nmy_db.read()\n\n# selection of trials\nstim_mask   = my_db.apply_epoch_filter_mask({\n        'stimulus_name' : 'drifting_gratings',\n        'orientation' : [0,45,90,135]\n        })\n# selection of neurons per brain area\nneuron_mask = my_db.apply_neuron_filter_mask({\n        'areas' : ['VISp', 'VISal','VISpm','VISrl','VISl']\n        })\n\n# data filtering (In-Memory dataset)\nspike_times, ii_spike_times, stim_label = my_db.get_selected_data(\n        window_length=0.1,\n        stim_label_name='orientation'\n)\n</code></pre></p> Source code in <code>spyketools/io/DataManager.py</code> <pre><code>class DataManager():\n\t# class DataManager():\n\"\"\"\n\t`DataManager` helps users to have access to specific data from NWB datasets by applying filters\n\tacross neuron (i.e., brain area) and/or trials/epochs (i.e., stimulus name). \n\n\tParameters\n\t----------\n\tdb_path : str\n\t\tFull path to dataset (NWB format only).\n\tverbose : bool\n\t\tIf True, DataManager show debug information in console.\n\n\t**Example:**\n\t```python\n\tfrom spyketools.io.DataManager import DataManager\n\tdb_path = '~/sotomayorb/AllenSDK_datasets/1026124216'\n\n\t# reading data\n\tmy_db = DataManager(db_path = db_path, verbose=True)\n\tmy_db.read()\n\n\t# selection of trials\n\tstim_mask   = my_db.apply_epoch_filter_mask({\n\t\t'stimulus_name' : 'drifting_gratings',\n\t\t'orientation' : [0,45,90,135]\n\t\t})\n\t# selection of neurons per brain area\n\tneuron_mask = my_db.apply_neuron_filter_mask({\n\t\t'areas' : ['VISp', 'VISal','VISpm','VISrl','VISl']\n\t\t})\n\n\t# data filtering (In-Memory dataset)\n\tspike_times, ii_spike_times, stim_label = my_db.get_selected_data(\n\t\twindow_length=0.1,\n\t\tstim_label_name='orientation'\n\t)\n\t```\n\t\"\"\"\n\n\tdef __init__(self, db_path, verbose=False):\t\t\n\t\tif verbose:\n\t\t\tprint (\"Setting path = %s\" % db_path)\n\n\t\tself.session                = None \n\t\tself.stimulus_presentations = None\n\t\tself.neurons                = None\n\n\t\t# reading metadata in constructor\n\t\tself.meta_neuron_areas      = []\n\n\t\t# filters\n\t\tself.neurons_filter         = {} #NeuronsFilter()\n\t\tself.stimuli_filter         = {} #StimuliFilter()\n\t\tself.epoch_filter_mask      = None\n\t\tself.epoch_neuron_mask      = None\n\t\tself.db_path                = db_path\n\n\tdef read(self, verbose=False):\n\t\tself.session = EcephysSession.from_nwb_path(self.db_path)\n\t\tself.meta_neuron_areas = list(self.session.metadata['structure_acronyms'])\n\n\t\tif verbose:\n\t\t\tprint (\"Session loaded: `%s`\" % self.db_path)\n\n\t\t# STIM filtering\n\t\tself.stimulus_presentations = self.session.stimulus_presentations\n\t\tif ('stimulus_name' in self.stimuli_filter):\n\t\t\tself.apply_stimuli_filter(self.stimuli_filter['stimulus_name'])\n\t\t\tif verbose:\n\t\t\t\tprint (\"self. stimulus_presentations: Finished\")\n\t\telse:\n\t\t\tself.stimulus_presentations = self.session.stimulus_presentations\n\n\t\t# NEURON filtering\n\t\tself.neurons = self.session.units\n\t\tif 'area' in self.neurons_filter:\n\t\t\tself.apply_neuron_filter()\n\t\t\tif verbose:\n\t\t\t\tself.neurons_filter.summary()\n\t\t\t\tprint (\"self.neurons: Finished\")\n\n\tdef set_neurons_filter(self, neuron_filter):\n\t\tif 'area' in neuron_filter:\n\t\t\tself.neurons_filter = neuron_filter['area']\n\tdef set_stimuli_filter(self, stimulus_filter):\n\t\tif 'stimulus_name' in stimulus_filter: #if type(stimulus_name)!=type(None):\n\t\t\tself.stimuli_filter = stimulus_filter['stimulus_name']\n\n\tdef apply_neuron_filter(self):\n\t\tself.neurons = self.session.units[self.session.units.ecephys_structure_acronym.isin(self.neurons_filter)]\n\n\tdef apply_stimuli_filter(self):\n\t\tnum_rows  = len(self.session.stimulus_presentations.stimulus_name)\n\t\tmask_name = np.zeros(shape=(num_rows), dtype = np.bool)\n\t\tfor stim_name in self.stimuli_filter.stimulus_name: # for each stimulus name, we add ones to the `mask_name` variable\n\t\t\tmask_name |= (self.stimulus_presentations.stimulus_name == stim_name)\n\t\tself.stimulus_presentations = self.stimulus_presentations[mask_name]\n\n\n\t# ---\n\n\t#docable\n\tdef apply_epoch_filter_mask(self, dict_filter):\n\t\tmask = np.ones(shape=len(self.session.stimulus_presentations), dtype=np.bool)\n\t\tfor k, v in dict_filter.items():\n\t\t\tif isinstance(v, list):\n\t\t\t\ttemp_mask = np.zeros(shape=len(self.session.stimulus_presentations), dtype=np.bool)\n\t\t\t\tfor item in v:\n\t\t\t\t\ttemp_mask = temp_mask | (self.session.stimulus_presentations[k] == item)\n\t\t\t\tmask = mask &amp; temp_mask\n\t\t\telse:\n\t\t\t\tmask = mask &amp; (self.session.stimulus_presentations[k] == v)\n\t\tprint ('%i neurons out of %i' % (np.sum(mask),len(mask)))\n\t\tself.epoch_filter_mask = np.array(mask)\n\n\t#docable\n\tdef apply_neuron_filter_mask(self, dict_filter):\n\t\tmask = self.session.units.ecephys_structure_acronym.isin(dict_filter['areas'])\n\t\tprint ('%i neurons out of %i' % (np.sum(mask),len(mask)))\n\t\tself.neuron_filter_mask = np.array(mask)\n\n\n\t# Not Implemented yet # \n\tdef valid_criterias_epoch_selection(self, dict_filter):\n\t\tif not isinstance(dict_filter, dict):\n\t\t\traise TypeError(\"Input must be a dictionary (%s found)\" % str(type(dict_filter)))\n\n\t\tdataset_column_names = list(self.session.stimulus_presentations.keys())\n\n\t\t# find if keys are part can be found\n\t\tfor k in dict_filter.keys():\n\t\t\tif not k in dataset_column_names:\n\t\t\t\traise NotImplementedError(\"dataset does not contain column '%s'.\" % k)\n\n\t\treturn True\n\n\t#docable\n\tdef get_selected_data(self, window_length, stim_label_name):\n\"\"\"\n\t\tMethod to apply filters and extract data from the public available datasets of\n\t\twith NWB data format. \n\t\tSpikes are stored as relative spike times.\n\n\t\tFor more details, see [http://help.brain-map.org/display/observatory/Documentation](http://help.brain-map.org/display/observatory/Documentation). \n\n\t\tParameters\n\t\t----------\n\t\twindow_length : float\n\t\t\tWindow length for spike train analysis.\n\t\tstim_label_name : str\n\t\t\tIf True, it returns the stim. labels (i.e., drifting gratings' orientation).\n\n\t\tReturns\n\t\t-------\n\t\tspike_times : numpy.ndarray\n\t\t\tArray with relative spike times.\n\t\tii_spikes_times: numpy.ndarray\n\t\t\t`(M,N,2)`-Array with indices per neuron (N) and epoch (M).\n\t\tstim_labels: numpy.ndarray\n\t\t\t`M`-dimensional array with stimulus information (e.g. drifting gratings' orientations). \n\t\t\"\"\"\n\n\t\tl_start_time = np.array(self.session.stimulus_presentations[self.epoch_filter_mask]['start_time'])\n\t\tstim_labels = np.array(self.session.stimulus_presentations[self.epoch_filter_mask][stim_label_name])\n\n\t\tsel_neuron_activity = np.array(np.array(list(self.session.spike_times.values())))[self.neuron_filter_mask]\n\n\t\tM = len(l_start_time)\n\t\tN = np.sum(self.neuron_filter_mask, dtype=np.int)\n\n\t\tindex = 0\n\t\tspike_times = []; ii_spike_times = []\n\t\tfor i_e in range(M):\n\t\t\tstart_time = l_start_time[i_e]\n\n\t\t\ttemp_ii_spike_times = []\n\t\t\tfor neuron_id in range(N):\n\t\t\t\tspike_train = sel_neuron_activity[neuron_id]\n\t\t\t\tst = spike_train[(spike_train &gt;= start_time) &amp; (spike_train &lt; (start_time+window_length))].copy()\n\t\t\t\tst -= start_time\n\n\t\t\t\ttemp_ii_spike_times.append([index, index+len(st)])\n\t\t\t\tindex += len(st)\n\t\t\t\tspike_times.append(st)\n\n\t\t\tii_spike_times.append(temp_ii_spike_times)\n\n\t\tspike_times = np.concatenate(spike_times)\n\t\tii_spike_times = np.array(ii_spike_times)\n\n\t\treturn spike_times, ii_spike_times, stim_labels\n</code></pre>"},{"location":"io.DataManager/#spyketools.io.DataManager.DataManager.get_selected_data","title":"<code>get_selected_data(window_length, stim_label_name)</code>","text":"<p>Method to apply filters and extract data from the public available datasets of with NWB data format.  Spikes are stored as relative spike times.</p> <p>For more details, see http://help.brain-map.org/display/observatory/Documentation. </p> <p>Parameters:</p> Name Type Description Default <code>window_length</code> <code>float</code> <p>Window length for spike train analysis.</p> required <code>stim_label_name</code> <code>str</code> <p>If True, it returns the stim. labels (i.e., drifting gratings' orientation).</p> required <p>Returns:</p> Name Type Description <code>spike_times</code> <code>numpy.ndarray</code> <p>Array with relative spike times.</p> <code>ii_spikes_times</code> <code>numpy.ndarray</code> <p><code>(M,N,2)</code>-Array with indices per neuron (N) and epoch (M).</p> <code>stim_labels</code> <code>numpy.ndarray</code> <p><code>M</code>-dimensional array with stimulus information (e.g. drifting gratings' orientations).</p> Source code in <code>spyketools/io/DataManager.py</code> <pre><code>def get_selected_data(self, window_length, stim_label_name):\n\"\"\"\n\tMethod to apply filters and extract data from the public available datasets of\n\twith NWB data format. \n\tSpikes are stored as relative spike times.\n\n\tFor more details, see [http://help.brain-map.org/display/observatory/Documentation](http://help.brain-map.org/display/observatory/Documentation). \n\n\tParameters\n\t----------\n\twindow_length : float\n\t\tWindow length for spike train analysis.\n\tstim_label_name : str\n\t\tIf True, it returns the stim. labels (i.e., drifting gratings' orientation).\n\n\tReturns\n\t-------\n\tspike_times : numpy.ndarray\n\t\tArray with relative spike times.\n\tii_spikes_times: numpy.ndarray\n\t\t`(M,N,2)`-Array with indices per neuron (N) and epoch (M).\n\tstim_labels: numpy.ndarray\n\t\t`M`-dimensional array with stimulus information (e.g. drifting gratings' orientations). \n\t\"\"\"\n\n\tl_start_time = np.array(self.session.stimulus_presentations[self.epoch_filter_mask]['start_time'])\n\tstim_labels = np.array(self.session.stimulus_presentations[self.epoch_filter_mask][stim_label_name])\n\n\tsel_neuron_activity = np.array(np.array(list(self.session.spike_times.values())))[self.neuron_filter_mask]\n\n\tM = len(l_start_time)\n\tN = np.sum(self.neuron_filter_mask, dtype=np.int)\n\n\tindex = 0\n\tspike_times = []; ii_spike_times = []\n\tfor i_e in range(M):\n\t\tstart_time = l_start_time[i_e]\n\n\t\ttemp_ii_spike_times = []\n\t\tfor neuron_id in range(N):\n\t\t\tspike_train = sel_neuron_activity[neuron_id]\n\t\t\tst = spike_train[(spike_train &gt;= start_time) &amp; (spike_train &lt; (start_time+window_length))].copy()\n\t\t\tst -= start_time\n\n\t\t\ttemp_ii_spike_times.append([index, index+len(st)])\n\t\t\tindex += len(st)\n\t\t\tspike_times.append(st)\n\n\t\tii_spike_times.append(temp_ii_spike_times)\n\n\tspike_times = np.concatenate(spike_times)\n\tii_spike_times = np.array(ii_spike_times)\n\n\treturn spike_times, ii_spike_times, stim_labels\n</code></pre>"},{"location":"manifold.tsne/","title":"1. 2D T-distributed Stochastic Neighbor Embedding (t-SNE)","text":""},{"location":"manifold.tsne/#spyketools.manifold.tsne.tsne_emb","title":"<code>tsne_emb(diss_matrix, metric='precomputed', perplexity=30, random_state=None)</code>","text":"<p>Computation of 2D T-distributed Stochastic Neighbor Embedding (t-SNE) ^1^3 (Scikit Learn[^5]).</p> <p>Parameters:</p> Name Type Description Default <code>diss_matrix</code> <code>numpy.array</code> <p>Dissimilarity matrix from pairwise distances (i.e. <code>(M,M)</code>-dimesional array).</p> required <code>metric</code> <code>str</code> <p>Metric to compute embedding. By default, the dissimilarity matrix <code>diss_matrix</code> is used (<code>'pre-computed'</code>).</p> <code>'precomputed'</code> <code>perplexity</code> <p>Perplexity value for t-SNE embedding.</p> <code>30</code> <code>random_state</code> <p>Seed for random_state param (Scikit Learn).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>emb</code> <code>numpy.array</code> <p>2D t-SNE Embedding.</p> <ol> <li> <p>van der Maaten, L.J.P.; Hinton, G.E. Visualizing High-Dimensional Data.  Using t-SNE. Journal of Machine Learning Research 9:2579-2605, 2008. \u21a9</p> </li> <li> <p>van der Maaten, L.J.P. t-Distributed Stochastic Neighbor Embedding. https://lvdmaaten.github.io/tsne/. \u21a9</p> </li> <li> <p>L.J.P. van der Maaten. Accelerating t-SNE using Tree-Based Algorithms. Journal of Machine Learning Research 15(Oct):3221-3245, 2014.  https://lvdmaaten.github.io/publications/papers/JMLR_2014.pdf \u21a9</p> </li> <li> <p>Belkina, A. C., Ciccolella, C. O., Anno, R., Halpert, R., Spidlen, J., &amp; Snyder-Cappione, J. E. (2019).  Automated optimized parameters for T-distributed stochastic neighbor embedding improve visualization  and analysis of large datasets. Nature Communications, 10(1), 1-12. \u21a9</p> </li> <li> <p>Scikit-learn docs. https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html\u00a0\u21a9</p> </li> </ol> Source code in <code>spyketools/manifold/tsne.py</code> <pre><code>def tsne_emb(diss_matrix, metric='precomputed', perplexity=30, random_state=None):\n\"\"\"\n    Computation of 2D T-distributed Stochastic Neighbor Embedding (t-SNE) [^1][^2][^3][^4] (Scikit Learn[^5]).\n\n    Parameters\n    ----------\n    diss_matrix : numpy.array\n        Dissimilarity matrix from pairwise distances (i.e. `(M,M)`-dimesional array).\n    metric : str\n        Metric to compute embedding. By default, the dissimilarity matrix `diss_matrix` is used (`'pre-computed'`).\n    perplexity: float\n        Perplexity value for t-SNE embedding.\n    random_state: int\n        Seed for random_state param (Scikit Learn).\n\n    Returns\n    -------\n    emb : numpy.array\n        2D t-SNE Embedding.\n\n    [^1]: \n        *van der Maaten, L.J.P.; Hinton, G.E. Visualizing High-Dimensional Data. \n        Using t-SNE. Journal of Machine Learning Research 9:2579-2605, 2008.*\n    [^2]:\n        *van der Maaten, L.J.P. t-Distributed Stochastic Neighbor Embedding. https://lvdmaaten.github.io/tsne/.*\n    [^3]:\n        *L.J.P. van der Maaten. Accelerating t-SNE using Tree-Based Algorithms.\n        Journal of Machine Learning Research 15(Oct):3221-3245, 2014. \n        https://lvdmaaten.github.io/publications/papers/JMLR_2014.pdf*\n    [^4]:\n        *Belkina, A. C., Ciccolella, C. O., Anno, R., Halpert, R., Spidlen, J., &amp; Snyder-Cappione, J. E. (2019). \n        Automated optimized parameters for T-distributed stochastic neighbor embedding improve visualization \n        and analysis of large datasets. Nature Communications, 10(1), 1-12.*\n    [^5]:\n        Scikit-learn docs. https://scikit-learn.org/stable/modules/generated/sklearn.manifold.TSNE.html\n    \"\"\"\n\n    emb = TSNE(\n        metric='precomputed', \n        n_components=2, \n        random_state=random_state, \n        perplexity=perplexity).fit_transform(diss_matrix)\n    return emb\n</code></pre>"},{"location":"manifold.umap/","title":"2. 2D Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP)","text":""},{"location":"manifold.umap/#spyketools.manifold.umap.umap_emb","title":"<code>umap_emb(diss_matrix, metric='precomputed', n_neighbors=15, min_dist=0.1, n_components=2, random_state=None)</code>","text":"<p>Computation of Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP) [^1] (Docs. [^2]).</p> <p>Parameters:</p> Name Type Description Default <code>diss_matrix</code> <code>numpy.array</code> <p>Dissimilarity matrix from pairwise distances (i.e. <code>(M,M)</code>-dimesional array).</p> required <code>metric</code> <code>str</code> <p>Metric to compute embedding. By default, the dissimilarity matrix <code>diss_matrix</code> is used (<code>'pre-computed'</code>).</p> <code>'precomputed'</code> <code>n_neighbors</code> <code>int</code> <p>Size of local nighborhood for UMAP.</p> <code>15</code> <code>min_dist</code> <code>float</code> <p>Minimum distance apart that points are allowed to be in the low dimensional representation.</p> <code>0.1</code> <code>n_components</code> <code>int</code> <p>Dimensionality of the reduced dimension space of embedding.</p> <code>2</code> <code>random_state</code> <p>Seed for random_state param.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>emb</code> <code>numpy.array</code> <p>2D UMAP embedding.</p> <ol> <li> <p>McInnes, L., Healy, J., &amp; Melville, J. (2018). Umap: Uniform manifold approximation  and projection for dimension reduction. arXiv preprint arXiv:1802.03426. \u21a9</p> </li> <li> <p>UMAP docs. https://umap-learn.readthedocs.io/en/latest/index.html.\u00a0\u21a9</p> </li> </ol> Source code in <code>spyketools/manifold/umap.py</code> <pre><code>def umap_emb(diss_matrix, metric='precomputed', n_neighbors=15, min_dist=0.1, n_components=2, random_state=None):\n\"\"\"\n    Computation of Uniform Manifold Approximation and Projection for Dimension Reduction (UMAP) [^1] (Docs. [^2]).\n\n    Parameters\n    ----------\n    diss_matrix : numpy.array\n        Dissimilarity matrix from pairwise distances (i.e. `(M,M)`-dimesional array).\n    metric : str\n        Metric to compute embedding. By default, the dissimilarity matrix `diss_matrix` is used (`'pre-computed'`).\n    n_neighbors : int\n        Size of local nighborhood for UMAP.\n    min_dist : float\n        Minimum distance apart that points are allowed to be in the low dimensional representation.\n    n_components : int\n        Dimensionality of the reduced dimension space of embedding.\n    random_state: int\n        Seed for random_state param.\n\n    Returns\n    -------\n    emb : numpy.array\n        2D UMAP embedding.\n\n    [^1]: \n        *McInnes, L., Healy, J., &amp; Melville, J. (2018). Umap: Uniform manifold approximation \n        and projection for dimension reduction. arXiv preprint arXiv:1802.03426.*\n    [^2]:\n        UMAP docs. https://umap-learn.readthedocs.io/en/latest/index.html.\n    \"\"\"\n\n    emb = UMAP(\n        metric='precomputed', \n        n_neighbors=n_neighbors, \n        min_dist=min_dist, \n        n_components=n_components, \n        random_state=random_state).fit_transform(diss_matrix)\n    return emb\n</code></pre>"},{"location":"quick_start/","title":"Hallo","text":""},{"location":"quick_start/#das-ist-ein-test","title":"Das ist ein Test!","text":"<p>Wilkommen!</p>"},{"location":"quick_start/#this-is-another-one","title":"This is another one","text":"<p>Tschuss!</p> <p>Todos los derechos reservados (c) Boris Sotomayor.</p>"},{"location":"vis.raster/","title":"1. Raster plots","text":""},{"location":"vis.raster/#spyketools.vis.raster.plot_raster_spike_trains","title":"<code>plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id, xmin=None, xmax=None, figsize=(5, 8), ax=None, title='', xlabel='', ylabel='', figpath='')</code>","text":"<p>Creates a raster plot of Nuerons ID versus time given a epoch_id.</p> Source code in <code>spyketools/vis/raster.py</code> <pre><code>def plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id, xmin=None, xmax=None, figsize=(5,8), ax=None, title=\"\", xlabel=\"\", ylabel=\"\", figpath=\"\"):\n\"\"\"Creates a raster plot of Nuerons ID versus time given a epoch_id.\"\"\"\n\n    if ax is None:\n        fig, ax = plt.subplots(figsize=figsize, facecolor='w')\n\n    for i_N in range(ii_spike_times.shape[1]):\n        temp_spike_train = spike_times[ii_spike_times[epoch_id, i_N, 0]:ii_spike_times[epoch_id, i_N, 1]]\n        ax.plot(temp_spike_train, np.ones(shape=len(temp_spike_train))*i_N, marker='|', color='k', ls='', ms=3)   \n    #    else:\n    #    for i_N in range(ii_spike_times.shape[1]):\n    #        temp_spike_train = spike_times[ii_spike_times[epoch_id, i_N, 0]:ii_spike_times[epoch_id, i_N, 1]]\n    #        ax.plot(temp_spike_train, np.ones(shape=len(temp_spike_train))*i_N, marker='|', color='k', ls='', ms=3) \n    #    ax.\n    ax.set_ylim([-1.5, ii_spike_times.shape[1]-0.5])\n    if not(xmin is None):\n        ax.set_xlim(left=xmin)\n    if not(xmax is None):\n        ax.set_xlim(right=xmax)\n\n    if len(xlabel)!=0:\n        ax.set_xlabel(xlabel)\n    if len(ylabel)!=0:\n        ax.set_ylabel(ylabel)\n    if len(title)!=0:\n        ax.set_title(title)\n    if len(figpath)!=0:\n        plt.savefig(figpath, bbox_inches=\"tight\")\n        print(\"[INFO]\\tFigure was saved as '%s'\" % figpath)\n</code></pre>"},{"location":"notebooks/NWB_data_analysis_tutorial/","title":"Data Analysis of Allen Brain Institute dataset","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n\nimport os\nimport sys\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# warnings from jupyter notebook\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%autoreload 2\n</pre> %load_ext autoreload  import os import sys  import numpy as np import pandas as pd import matplotlib.pyplot as plt  # warnings from jupyter notebook import warnings warnings.filterwarnings('ignore')  %autoreload 2 In\u00a0[2]: Copied! <pre>import hdbscan\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n</pre> import hdbscan from sklearn.manifold import TSNE import matplotlib.pyplot as plt In\u00a0[3]: Copied! <pre>sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.io.DataManager import DataManager\n</pre> sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.io.DataManager import DataManager In\u00a0[4]: Copied! <pre>db_path   = '/mnt/pns/home/sotomayorb/git/AllenSDK_datasets/datasets/1026124216'\n</pre> db_path   = '/mnt/pns/home/sotomayorb/git/AllenSDK_datasets/datasets/1026124216'  <p>Reading data</p> In\u00a0[5]: Copied! <pre>my_db = DataManager(db_path = db_path, verbose=True)\n</pre> my_db = DataManager(db_path = db_path, verbose=True) <pre>Setting path = /mnt/pns/home/sotomayorb/git/AllenSDK_datasets/datasets/1026124216\n</pre> In\u00a0[6]: Copied! <pre>%%time\nmy_db.read()\n</pre> %%time my_db.read() <pre>CPU times: user 2min 1s, sys: 2 s, total: 2min 3s\nWall time: 2min 3s\n</pre> <p>Meta-data</p> In\u00a0[7]: Copied! <pre>my_db.session.metadata\n</pre> my_db.session.metadata Out[7]: <pre>{'specimen_name': 'Sst-IRES-Cre;Ai32-406807',\n 'session_type': 'brain_observatory_1.1',\n 'full_genotype': 'Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt',\n 'sex': 'M',\n 'age_in_days': 96.0,\n 'rig_equipment_name': 'NP.1',\n 'num_units': 684,\n 'num_channels': 2214,\n 'num_probes': 6,\n 'num_stimulus_presentations': 70390,\n 'session_start_time': datetime.datetime(2018, 10, 26, 12, 59, 18, tzinfo=tzoffset(None, -25200)),\n 'ecephys_session_id': 756029989,\n 'structure_acronyms': [nan,\n  'VPM',\n  'TH',\n  'LGd',\n  'CA3',\n  'CA2',\n  'CA1',\n  'VISal',\n  'DG',\n  'VISrl',\n  'VISl',\n  'VISpm',\n  'LP',\n  'PO',\n  'Eth',\n  'VISp',\n  'POL',\n  'APN',\n  'MB',\n  'SCig',\n  'POST',\n  'SUB',\n  'VISam'],\n 'stimulus_names': ['spontaneous',\n  'gabors',\n  'flashes',\n  'drifting_gratings',\n  'natural_movie_three',\n  'natural_movie_one',\n  'static_gratings',\n  'natural_scenes']}</pre> <p>Neuron selection</p> In\u00a0[11]: Copied! <pre>stim_mask   = my_db.apply_epoch_filter_mask({'stimulus_name' : \"drifting_gratings\", \"orientation\" : [0,45,90,135]})\nneuron_mask = my_db.apply_neuron_filter_mask({'areas' : ['VISp', 'VISal','VISpm','VISrl','VISl']})\n</pre> stim_mask   = my_db.apply_epoch_filter_mask({'stimulus_name' : \"drifting_gratings\", \"orientation\" : [0,45,90,135]}) neuron_mask = my_db.apply_neuron_filter_mask({'areas' : ['VISp', 'VISal','VISpm','VISrl','VISl']}) <pre>300 neurons out of 70390\n246 neurons out of 684\n</pre> <p>Detection of high-dimensional neural patterns</p> <p>Definition of window length</p> <p>Data Formatting and Filtering</p> In\u00a0[30]: Copied! <pre>window_length = 0.1\n</pre> window_length = 0.1 In\u00a0[31]: Copied! <pre>%%time\nspike_times, ii_spike_times, stim_label = my_db.get_selected_data(window_length=window_length, stim_label_name='orientation')\n</pre> %%time spike_times, ii_spike_times, stim_label = my_db.get_selected_data(window_length=window_length, stim_label_name='orientation') <pre>CPU times: user 10.8 s, sys: 123 ms, total: 10.9 s\nWall time: 11 s\n</pre> In\u00a0[33]: Copied! <pre>print (\"Number of trials :\", ii_spike_times.shape[0])\nprint (\"Number of neurons:\", ii_spike_times.shape[1])\n</pre> print (\"Number of trials :\", ii_spike_times.shape[0]) print (\"Number of neurons:\", ii_spike_times.shape[1]) <pre>Number of trials : 300\nNumber of neurons: 246\n</pre> In\u00a0[34]: Copied! <pre>np.min(spike_times), np.max(spike_times)\n</pre> np.min(spike_times), np.max(spike_times) Out[34]: <pre>(9.73252099356614e-07, 0.09999976432482072)</pre> In\u00a0[16]: Copied! <pre>sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.proc.distances.spike_metrics import pairwise_spike_distance\n</pre> sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.proc.distances.spike_metrics import pairwise_spike_distance In\u00a0[17]: Copied! <pre>FRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='firing_rates_z')\n</pre> FRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='firing_rates_z') In\u00a0[18]: Copied! <pre>%%time\nVP = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={\"cost\" : 0})\n</pre> %%time VP = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={\"cost\" : 0}) <pre>CPU times: user 3.11 s, sys: 24.9 ms, total: 3.14 s\nWall time: 3.15 s\n</pre> In\u00a0[19]: Copied! <pre>%%time\nSS = pairwise_spike_distance(spike_times, ii_spike_times, metric='spikeship')\nSS = SS[0]\n</pre> %%time SS = pairwise_spike_distance(spike_times, ii_spike_times, metric='spikeship') SS = SS[0] <pre>CPU times: user 43.2 s, sys: 21.7 ms, total: 43.2 s\nWall time: 3.27 s\n</pre> In\u00a0[20]: Copied! <pre>si = np.argsort(stim_label)\n</pre> si = np.argsort(stim_label) In\u00a0[21]: Copied! <pre>plt.imshow(FRz[:,si][si], cmap='PuBu')\n</pre> plt.imshow(FRz[:,si][si], cmap='PuBu') Out[21]: <pre>&lt;matplotlib.image.AxesImage at 0x7fb79586cef0&gt;</pre> In\u00a0[22]: Copied! <pre>plt.imshow(VP[:,si][si], cmap='PuBu')\n</pre> plt.imshow(VP[:,si][si], cmap='PuBu') Out[22]: <pre>&lt;matplotlib.image.AxesImage at 0x7fb795890240&gt;</pre> In\u00a0[23]: Copied! <pre>plt.imshow(SS[:,si][si], cmap='PuBu')\n</pre> plt.imshow(SS[:,si][si], cmap='PuBu') Out[23]: <pre>&lt;matplotlib.image.AxesImage at 0x7fb795913cc0&gt;</pre> In\u00a0[24]: Copied! <pre>perplexity = 70.\n</pre> perplexity = 70. In\u00a0[25]: Copied! <pre>emb_FRz    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(FRz)\nemb_VP     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP)\nemb_SS     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(SS)\n</pre> emb_FRz    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(FRz) emb_VP     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP) emb_SS     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(SS) In\u00a0[26]: Copied! <pre>def tsne_visualization(emb, stim_ids, fs_label=14, fn_legend=14, show_legend=False, title=\"\"):\n    fig, axs = plt.subplots(figsize=(5,5), facecolor='w')\n    unique_stim_ids = np.unique(stim_ids)\n    for stim_id in unique_stim_ids:\n        mask = (stim_ids==stim_id)\n        axs.scatter(emb[mask,0], emb[mask,1], label=stim_id)\n    if show_legend:\n        axs.legend(frameon=False, fontsize=fn_legend)\n    if title!=\"\":\n        axs.set_title(title, fontsize=fs_label)\n    axs.set_xlabel(\"1st component\", fontsize=fs_label)\n    axs.set_ylabel(\"2nd component\", fontsize=fs_label)\n</pre> def tsne_visualization(emb, stim_ids, fs_label=14, fn_legend=14, show_legend=False, title=\"\"):     fig, axs = plt.subplots(figsize=(5,5), facecolor='w')     unique_stim_ids = np.unique(stim_ids)     for stim_id in unique_stim_ids:         mask = (stim_ids==stim_id)         axs.scatter(emb[mask,0], emb[mask,1], label=stim_id)     if show_legend:         axs.legend(frameon=False, fontsize=fn_legend)     if title!=\"\":         axs.set_title(title, fontsize=fs_label)     axs.set_xlabel(\"1st component\", fontsize=fs_label)     axs.set_ylabel(\"2nd component\", fontsize=fs_label) In\u00a0[27]: Copied! <pre>tsne_visualization(emb=emb_FRz, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"Firing rate (z-scored)\")\n</pre> tsne_visualization(emb=emb_FRz, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"Firing rate (z-scored)\") In\u00a0[28]: Copied! <pre>tsne_visualization(emb=emb_VP, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"VP(q=0)\")\n</pre> tsne_visualization(emb=emb_VP, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"VP(q=0)\") In\u00a0[29]: Copied! <pre>tsne_visualization(emb=emb_SS, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"SpikeShip\")\n</pre> tsne_visualization(emb=emb_SS, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"SpikeShip\")"},{"location":"notebooks/NWB_data_analysis_tutorial/#neural-activity-and-stimuli-from-allen-datasets-extraction-computation-and-vis","title":"Neural activity and Stimuli from Allen datasets (Extraction, Computation, and Vis)\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial/#libraries-and-data-loading","title":"Libraries and Data loading\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial/#data-analysis","title":"Data Analysis\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/","title":"NWB data analysis tutorial extended","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n\nimport os\nimport sys\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# warnings from jupyter notebook\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%autoreload 2\n</pre> %load_ext autoreload  import os import sys  import numpy as np import pandas as pd import matplotlib.pyplot as plt  # warnings from jupyter notebook import warnings warnings.filterwarnings('ignore')  %autoreload 2 In\u00a0[2]: Copied! <pre># Install allensdk! \nfrom allensdk.brain_observatory.ecephys.ecephys_session import EcephysSession\n</pre> # Install allensdk!  from allensdk.brain_observatory.ecephys.ecephys_session import EcephysSession In\u00a0[3]: Copied! <pre>import hdbscan\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n</pre> import hdbscan from sklearn.manifold import TSNE import matplotlib.pyplot as plt In\u00a0[4]: Copied! <pre>! ls -l /mnt/gs/departmentN4/AllenVisualCoding/data_boris/\n</pre> ! ls -l /mnt/gs/departmentN4/AllenVisualCoding/data_boris/ <pre>total 76603281\r\n-rwxrwx--- 1 root       departmentn4 1862261144 May 26  2020 1026123377\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123377_\r\n-rwxrwx--- 1 root       departmentn4 1859545192 May 26  2020 1026123537\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123537_\r\n-rwxrwx--- 1 root       departmentn4 2912508032 May 26  2020 1026123599\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123599_\r\n-rwxrwx--- 1 root       departmentn4 1960982972 May 26  2020 1026123651\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123651_\r\n-rwxrwx--- 1 root       departmentn4 2376304984 May 26  2020 1026123685\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123685_\r\n-rwxrwx--- 1 root       departmentn4 1736516600 May 26  2020 1026123696\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123696_\r\n-rwxrwx--- 1 root       departmentn4 2198584804 May 26  2020 1026123877\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123877_\r\n-rwxrwx--- 1 root       departmentn4 2156671312 May 26  2020 1026123897\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123897_\r\n-rwxrwx--- 1 root       departmentn4 2917686364 May 26  2020 1026123964\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123964_\r\n-rwxrwx--- 1 root       departmentn4 2182040332 May 26  2020 1026123989\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123989_\r\n-rwxrwx--- 1 root       departmentn4 3071442940 May 26  2020 1026124034\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124034_\r\n-rwxrwx--- 1 root       departmentn4 2120570640 May 26  2020 1026124068\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124068_\r\n-rwxrwx--- 1 root       departmentn4 1928749868 May 26  2020 1026124109\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124109_\r\n-rwxrwx--- 1 root       departmentn4 2581201976 Mar  9  2021 1026124216\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124216_\r\n-rwxrwx--- 1 root       departmentn4 2818447324 May 26  2020 1026124242\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124242_\r\n-rwxrwx--- 1 root       departmentn4 2562070092 May 26  2020 1026124262\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124262_\r\n-rwxrwx--- 1 root       departmentn4 2696702864 May 26  2020 1026124326\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124326_\r\n-rwxrwx--- 1 root       departmentn4 2646264724 May 26  2020 1026124429\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124429_\r\n-rwxrwx--- 1 root       departmentn4 2856232912 May 26  2020 1026124469\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124469_\r\n-rwxrwx--- 1 root       departmentn4 2537645144 May 26  2020 1026124500\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124500_\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124569_\r\n-rwxrwx--- 1 root       departmentn4 3039748856 May 26  2020 1026124603\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124603_\r\n-rwxrwx--- 1 root       departmentn4 2317463664 May 26  2020 1026124645\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124645_\r\n-rwxrwx--- 1 root       departmentn4 2235680540 May 26  2020 1026124684\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124684_\r\n-rwxrwx--- 1 root       departmentn4 2864072620 May 26  2020 1026124702\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124702_\r\n-rwxrwx--- 1 root       departmentn4 3240335928 May 26  2020 1026124724\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124724_\r\n-rwxrwx--- 1 root       departmentn4 2864276308 May 26  2020 1026124743\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124743_\r\n-rwxrwx--- 1 root       departmentn4 2674791348 May 26  2020 1026124793\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124793_\r\n-rwxrwx--- 1 root       departmentn4 2545679280 May 26  2020 1026124804\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124804_\r\n-rwxrwx--- 1 root       departmentn4 3073327756 May 26  2020 1026124863\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124863_\r\n-rwxrwx--- 1 root       departmentn4 2865464220 May 26  2020 1026124884\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124884_\r\n-rwxrwx--- 1 root       departmentn4 2737981244 May 26  2020 1026125021\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026125021_\r\n-rwxrwx--- 1 root       departmentn4       1879 Mar  8  2021 manifest_boris.json\r\ndrwxrws--- 2 root       departmentn4       4096 Jun 17  2021 tmp\r\n</pre> In\u00a0[5]: Copied! <pre># Load downloaded session\nbase_path = '/mnt/gs/departmentN4/AllenVisualCoding/data_boris/'\n#base_path = '/mnt/gs/home/sotomayorb/git/AllenSDK_datasets/datasets/' # Remove this line!\n\nsess_name = '1026124216'\n\nsession = EcephysSession.from_nwb_path('%s/%s' % (base_path, sess_name))\nprint (\"Session loaded: `%s`\" % sess_name)\n</pre> # Load downloaded session base_path = '/mnt/gs/departmentN4/AllenVisualCoding/data_boris/' #base_path = '/mnt/gs/home/sotomayorb/git/AllenSDK_datasets/datasets/' # Remove this line!  sess_name = '1026124216'  session = EcephysSession.from_nwb_path('%s/%s' % (base_path, sess_name)) print (\"Session loaded: `%s`\" % sess_name) <pre>Session loaded: `1026124216`\n</pre> In\u00a0[6]: Copied! <pre>class DataManager:\n    def __init__(self, db_path, verbose=False):\n        \n        if verbose:\n            print (\"Setting path = %s\" % db_path)\n        \n        self.session                = None \n        self.stimulus_presentations = None\n        self.neurons                = None\n        \n        # reading metadata in constructor\n        self.meta_neuron_areas      = []\n        \n        # filters\n        self.neurons_filter         = {} #NeuronsFilter()\n        self.stimuli_filter         = {} #StimuliFilter()\n    \n    def read(self, verbose=False):\n        self.session = EcephysSession.from_nwb_path(db_path)\n        self.meta_neuron_areas = list(self.session.metadata['structure_acronyms'])\n        \n        if verbose:\n            print (\"Session loaded: `%s`\" % db_path)\n        \n        \n        # STIM filtering\n        self.stimulus_presentations = self.session.stimulus_presentations\n        if ('stimulus_name' in self.stimuli_filter):\n            self.apply_stimuli_filter(self.stimuli_filter['stimulus_name'])\n            if verbose:\n                #self.stimuli_filter.summary()\n                print (\"self. stimulus_presentations: Finished\")\n        else:\n            self.stimulus_presentations = self.session.stimulus_presentations\n        \n        # NEURON filtering\n        self.neurons = self.session.units\n        if 'area' in self.neurons_filter: #(type(self.neurons_filter['areas']) != type(None)):\n            self.apply_neuron_filter()\n            if verbose:\n                self.neurons_filter.summary()\n                print (\"self.neurons: Finished\")\n        \n    def set_neurons_filter(self, neuron_filter):\n        if 'area' in neuron_filter:\n            self.neurons_filter = neuron_filter['area']\n    def set_stimuli_filter(self, stimulus_filter):\n        if 'stimulus_name' in stimulus_filter: #if type(stimulus_name)!=type(None):\n            self.stimuli_filter = stimulus_filter['stimulus_name']\n            \n    def apply_neuron_filter(self):\n        self.neurons = self.session.units[self.session.units.ecephys_structure_acronym.isin(self.neurons_filter)]\n    \n    def apply_stimuli_filter(self):\n        num_rows  = len(self.session.stimulus_presentations.stimulus_name)\n        mask_name = np.zeros(shape=(num_rows), dtype = np.bool)\n        for stim_name in self.stimuli_filter.stimulus_name: # for each stimulus name, we add ones to the `mask_name` variable\n            mask_name |= (self.stimulus_presentations.stimulus_name == stim_name)\n        self.stimulus_presentations = self.stimulus_presentations[mask_name]\n</pre> class DataManager:     def __init__(self, db_path, verbose=False):                  if verbose:             print (\"Setting path = %s\" % db_path)                  self.session                = None          self.stimulus_presentations = None         self.neurons                = None                  # reading metadata in constructor         self.meta_neuron_areas      = []                  # filters         self.neurons_filter         = {} #NeuronsFilter()         self.stimuli_filter         = {} #StimuliFilter()          def read(self, verbose=False):         self.session = EcephysSession.from_nwb_path(db_path)         self.meta_neuron_areas = list(self.session.metadata['structure_acronyms'])                  if verbose:             print (\"Session loaded: `%s`\" % db_path)                           # STIM filtering         self.stimulus_presentations = self.session.stimulus_presentations         if ('stimulus_name' in self.stimuli_filter):             self.apply_stimuli_filter(self.stimuli_filter['stimulus_name'])             if verbose:                 #self.stimuli_filter.summary()                 print (\"self. stimulus_presentations: Finished\")         else:             self.stimulus_presentations = self.session.stimulus_presentations                  # NEURON filtering         self.neurons = self.session.units         if 'area' in self.neurons_filter: #(type(self.neurons_filter['areas']) != type(None)):             self.apply_neuron_filter()             if verbose:                 self.neurons_filter.summary()                 print (\"self.neurons: Finished\")              def set_neurons_filter(self, neuron_filter):         if 'area' in neuron_filter:             self.neurons_filter = neuron_filter['area']     def set_stimuli_filter(self, stimulus_filter):         if 'stimulus_name' in stimulus_filter: #if type(stimulus_name)!=type(None):             self.stimuli_filter = stimulus_filter['stimulus_name']                  def apply_neuron_filter(self):         self.neurons = self.session.units[self.session.units.ecephys_structure_acronym.isin(self.neurons_filter)]          def apply_stimuli_filter(self):         num_rows  = len(self.session.stimulus_presentations.stimulus_name)         mask_name = np.zeros(shape=(num_rows), dtype = np.bool)         for stim_name in self.stimuli_filter.stimulus_name: # for each stimulus name, we add ones to the `mask_name` variable             mask_name |= (self.stimulus_presentations.stimulus_name == stim_name)         self.stimulus_presentations = self.stimulus_presentations[mask_name] In\u00a0[7]: Copied! <pre>sess_name = '1026124216'\nbase_path = '/mnt/pns/home/sotomayorb/git/AllenSDK_datasets/datasets' # change it !\ndb_path   = '%s/%s' % (base_path, sess_name)\n</pre> sess_name = '1026124216' base_path = '/mnt/pns/home/sotomayorb/git/AllenSDK_datasets/datasets' # change it ! db_path   = '%s/%s' % (base_path, sess_name) <p>Reading data</p> In\u00a0[8]: Copied! <pre>my_db = DataManager(db_path = db_path, verbose=True)\n</pre> my_db = DataManager(db_path = db_path, verbose=True) <pre>Setting path = /mnt/pns/home/sotomayorb/git/AllenSDK_datasets/datasets/1026124216\n</pre> In\u00a0[9]: Copied! <pre>%%time\nmy_db.read()\n</pre> %%time my_db.read() <pre>CPU times: user 2min 1s, sys: 2.1 s, total: 2min 3s\nWall time: 2min 7s\n</pre> <p>Basic data exploration</p> In\u00a0[10]: Copied! <pre>my_db.session.metadata\n</pre> my_db.session.metadata Out[10]: <pre>{'specimen_name': 'Sst-IRES-Cre;Ai32-406807',\n 'session_type': 'brain_observatory_1.1',\n 'full_genotype': 'Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt',\n 'sex': 'M',\n 'age_in_days': 96.0,\n 'rig_equipment_name': 'NP.1',\n 'num_units': 684,\n 'num_channels': 2214,\n 'num_probes': 6,\n 'num_stimulus_presentations': 70390,\n 'session_start_time': datetime.datetime(2018, 10, 26, 12, 59, 18, tzinfo=tzoffset(None, -25200)),\n 'ecephys_session_id': 756029989,\n 'structure_acronyms': [nan,\n  'VPM',\n  'TH',\n  'LGd',\n  'CA3',\n  'CA2',\n  'CA1',\n  'VISal',\n  'DG',\n  'VISrl',\n  'VISl',\n  'VISpm',\n  'LP',\n  'PO',\n  'Eth',\n  'VISp',\n  'POL',\n  'APN',\n  'MB',\n  'SCig',\n  'POST',\n  'SUB',\n  'VISam'],\n 'stimulus_names': ['spontaneous',\n  'gabors',\n  'flashes',\n  'drifting_gratings',\n  'natural_movie_three',\n  'natural_movie_one',\n  'static_gratings',\n  'natural_scenes']}</pre> In\u00a0[11]: Copied! <pre>[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)]\n</pre> [item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)] Out[11]: <pre>['VPM',\n 'TH',\n 'LGd',\n 'CA3',\n 'CA2',\n 'CA1',\n 'VISal',\n 'DG',\n 'VISrl',\n 'VISl',\n 'VISpm',\n 'LP',\n 'PO',\n 'Eth',\n 'VISp',\n 'POL',\n 'APN',\n 'MB',\n 'SCig',\n 'POST',\n 'SUB',\n 'VISam']</pre> In\u00a0[78]: Copied! <pre>import widgets\n</pre> import widgets <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\n&lt;ipython-input-78-856eaef3e669&gt; in &lt;module&gt;\n----&gt; 1 import widgets\n\nModuleNotFoundError: No module named 'widgets'</pre> In\u00a0[79]: Copied! <pre>#widgets.Dropdown(\n#    options=[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)],\n#    #value=2,\n#    #description='Number:',\n#)\n</pre> #widgets.Dropdown( #    options=[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)], #    #value=2, #    #description='Number:', #) <p>Neuron selection</p> In\u00a0[14]: Copied! <pre>neuron_filters = {'area': ['VISp', 'VISal']} # note it can be {'area' : 'VISp'}\nneuron_filters\n</pre> neuron_filters = {'area': ['VISp', 'VISal']} # note it can be {'area' : 'VISp'} neuron_filters Out[14]: <pre>{'area': ['VISp', 'VISal']}</pre> In\u00a0[15]: Copied! <pre>my_db.set_neurons_filter(neuron_filters)\n</pre> my_db.set_neurons_filter(neuron_filters) In\u00a0[16]: Copied! <pre>my_db.neurons_filter\n</pre> my_db.neurons_filter Out[16]: <pre>['VISp', 'VISal']</pre> In\u00a0[17]: Copied! <pre>my_db.session.stimulus_presentations\n</pre> my_db.session.stimulus_presentations Out[17]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 0 null null null null null null null 24.429348 null spontaneous 84.496188 null null null 60.066840 0 1 null 0.8 null 45 [3644.93333333, 3644.93333333] [20.0, 20.0] 0.08 84.496188 0 gabors 84.729704 4 40 30 0.233516 1 2 null 0.8 null 45 [3644.93333333, 3644.93333333] [20.0, 20.0] 0.08 84.729704 0 gabors 84.979900 4 -30 10 0.250196 2 3 null 0.8 null 90 [3644.93333333, 3644.93333333] [20.0, 20.0] 0.08 84.979900 0 gabors 85.230095 4 10 -10 0.250196 3 4 null 0.8 null 90 [3644.93333333, 3644.93333333] [20.0, 20.0] 0.08 85.230095 0 gabors 85.480291 4 30 40 0.250196 4 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 70385 null null null null null [250.0, 250.0] null 9150.824990 14 static_gratings 9151.075201 null null null 0.250211 4815 70386 null 0.8 null 90 0.0 [250.0, 250.0] 0.16 9151.075201 14 static_gratings 9151.325408 null null null 0.250207 4821 70387 null null null null null [250.0, 250.0] null 9151.325408 14 static_gratings 9151.575614 null null null 0.250207 4815 70388 null 0.8 null 90 0.0 [250.0, 250.0] 0.02 9151.575614 14 static_gratings 9151.825821 null null null 0.250207 4812 70389 null 0.8 null 90 0.75 [250.0, 250.0] 0.16 9151.825821 14 static_gratings 9152.076028 null null null 0.250207 4871 <p>70390 rows \u00d7 16 columns</p> In\u00a0[83]: Copied! <pre>my_db.session.stimulus_presentations[my_db.session.stimulus_presentations['stimulus_name'] == 'drifting_gratings']\n</pre> my_db.session.stimulus_presentations[my_db.session.stimulus_presentations['stimulus_name'] == 'drifting_gratings'] Out[83]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 3798 null 0.8 null 180 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1585.734418 2 drifting_gratings 1587.736098 2 null null 2.00168 246 3799 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1588.736891 2 drifting_gratings 1590.738571 2 null null 2.00168 247 3800 null 0.8 null 180 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1591.739398 2 drifting_gratings 1593.741078 2 null null 2.00168 246 3801 null 0.8 null 270 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1594.741921 2 drifting_gratings 1596.743591 2 null null 2.00167 248 3802 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1597.744458 2 drifting_gratings 1599.746088 4 null null 2.00163 249 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 49428 null 0.8 null 45 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5383.926161 7 drifting_gratings 5385.927841 4 null null 2.00168 259 49429 null 0.8 null 0 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5386.928658 7 drifting_gratings 5388.930338 1 null null 2.00168 285 49430 null 0.8 null 270 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5389.931191 7 drifting_gratings 5391.932841 15 null null 2.00165 280 49431 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5392.933708 7 drifting_gratings 5394.935378 8 null null 2.00167 272 49432 null 0.8 null 180 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5395.936191 7 drifting_gratings 5397.937871 8 null null 2.00168 273 <p>630 rows \u00d7 16 columns</p> In\u00a0[18]: Copied! <pre>my_db.session.stimulus_presentations.keys()\n</pre> my_db.session.stimulus_presentations.keys() Out[18]: <pre>Index(['color', 'contrast', 'frame', 'orientation', 'phase', 'size',\n       'spatial_frequency', 'start_time', 'stimulus_block', 'stimulus_name',\n       'stop_time', 'temporal_frequency', 'x_position', 'y_position',\n       'duration', 'stimulus_condition_id'],\n      dtype='object')</pre> In\u00a0[45]: Copied! <pre>def valid_criterias_epoch_selection(dict_filter):\n    if not isinstance(dict_filter, dict):\n        raise TypeError(\"Input must be a dictionary (%s found)\" % str(type(dict_filter)))\n    \n    dataset_column_names = list(my_db.session.stimulus_presentations.keys())\n    \n    # find if keys are part can be found\n    for k in dict_filter.keys():\n        if not k in dataset_column_names:\n            raise NotImplementedError(\"dataset does not contain column '%s'.\" % k)\n            \n    return True\n</pre> def valid_criterias_epoch_selection(dict_filter):     if not isinstance(dict_filter, dict):         raise TypeError(\"Input must be a dictionary (%s found)\" % str(type(dict_filter)))          dataset_column_names = list(my_db.session.stimulus_presentations.keys())          # find if keys are part can be found     for k in dict_filter.keys():         if not k in dataset_column_names:             raise NotImplementedError(\"dataset does not contain column '%s'.\" % k)                  return True In\u00a0[59]: Copied! <pre>def get_epoch_filter_mask(dict_filter):\n    mask = np.ones(shape=len(my_db.session.stimulus_presentations), dtype=np.bool)\n    for k, v in dict_filter.items():\n        \n        if isinstance(v, list):\n            temp_mask = np.zeros(shape=len(my_db.session.stimulus_presentations), dtype=np.bool)\n            for item in v:\n                temp_mask = temp_mask | (my_db.session.stimulus_presentations[k] == item)\n            mask = mask &amp; temp_mask\n        else:\n            mask = mask &amp; (my_db.session.stimulus_presentations[k] == v)\n    print (np.sum(mask))\n    return np.array(mask)\n</pre> def get_epoch_filter_mask(dict_filter):     mask = np.ones(shape=len(my_db.session.stimulus_presentations), dtype=np.bool)     for k, v in dict_filter.items():                  if isinstance(v, list):             temp_mask = np.zeros(shape=len(my_db.session.stimulus_presentations), dtype=np.bool)             for item in v:                 temp_mask = temp_mask | (my_db.session.stimulus_presentations[k] == item)             mask = mask &amp; temp_mask         else:             mask = mask &amp; (my_db.session.stimulus_presentations[k] == v)     print (np.sum(mask))     return np.array(mask) In\u00a0[60]: Copied! <pre>def get_neuron_filter_mask(dict_filter):\n    mask = my_db.session.units.ecephys_structure_acronym.isin(dict_filter['areas'])\n    print (np.sum(mask),'out',len(mask))\n    return np.array(mask)\n</pre> def get_neuron_filter_mask(dict_filter):     mask = my_db.session.units.ecephys_structure_acronym.isin(dict_filter['areas'])     print (np.sum(mask),'out',len(mask))     return np.array(mask) In\u00a0[63]: Copied! <pre>get_neuron_filter_mask(dict_filter={'areas' : ['VISp']})\n</pre> get_neuron_filter_mask(dict_filter={'areas' : ['VISp']}) <pre>51 out 684\n</pre> Out[63]: <pre>array([False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False])</pre> In\u00a0[64]: Copied! <pre>np.sum(my_db.session.units.ecephys_structure_acronym.isin(['VISp']))\n</pre> np.sum(my_db.session.units.ecephys_structure_acronym.isin(['VISp'])) Out[64]: <pre>51</pre> In\u00a0[65]: Copied! <pre>len(my_db.session.units)\n</pre> len(my_db.session.units) Out[65]: <pre>684</pre> In\u00a0[\u00a0]: Copied! <pre>get_neuron_filter_mask(dict_filter)\n</pre> get_neuron_filter_mask(dict_filter) In\u00a0[70]: Copied! <pre>get_neuron_filter_mask(dict_filter={'areas' : ['VISp']})\n</pre> get_neuron_filter_mask(dict_filter={'areas' : ['VISp']}) <pre>51 out 684\n</pre> Out[70]: <pre>array([False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True,  True,  True,  True,  True,\n        True,  True,  True,  True,  True, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False,\n       False, False, False, False, False, False, False, False, False])</pre> In\u00a0[71]: Copied! <pre>my_db.session.units[get_neuron_filter_mask(dict_filter={'areas' : ['VISp']})]\n</pre> my_db.session.units[get_neuron_filter_mask(dict_filter={'areas' : ['VISp']})] <pre>51 out 684\n</pre> Out[71]: L_ratio presence_ratio d_prime waveform_halfwidth cluster_id firing_rate peak_channel_id silhouette_score waveform_repolarization_slope waveform_amplitude ... probe_vertical_position probe_horizontal_position probe_id channel_local_index ecephys_structure_id probe_description location probe_sampling_rate probe_lfp_sampling_rate probe_has_lfp_data unit_id 951810314 6.731932e-03 0.99 3.709323 0.206030 126 7.114814 850125484 0.120317 0.229439 78.235560 ... 2300 11 760640090 229 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810369 5.345009e-02 0.99 3.578593 0.206030 131 5.595007 850125488 -0.008220 0.216118 83.823675 ... 2320 27 760640090 231 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810338 1.301614e-02 0.99 4.067453 0.233501 128 6.034558 850125486 0.155323 0.185828 65.479440 ... 2320 59 760640090 230 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810392 1.774653e-02 0.99 3.803809 0.178559 133 1.415214 850125494 0.079454 0.287642 95.161365 ... 2360 59 760640090 234 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810425 1.843604e-02 0.99 4.238960 0.164824 136 18.240085 850125500 -0.001033 0.692030 150.832890 ... 2380 11 760640090 237 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812218 3.729026e-02 0.99 2.817388 0.164824 296 3.790030 850125498 0.092064 0.219161 89.132550 ... 2380 43 760640090 236 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810459 2.983152e-04 0.99 5.402746 0.096147 139 5.216888 850125502 0.159981 0.388193 126.720555 ... 2400 59 760640090 238 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810548 1.392578e-02 0.99 2.110679 0.164824 145 4.499695 850125508 0.083604 0.327585 76.687650 ... 2420 11 760640090 241 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810517 1.473093e-02 0.99 2.637168 0.151089 143 0.959804 850125508 0.028951 0.340594 113.447295 ... 2420 11 760640090 241 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810495 1.102429e-03 0.99 4.616050 0.164824 142 3.167392 850125508 0.063172 0.469455 155.661480 ... 2420 11 760640090 241 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810564 2.656846e-02 0.99 3.608405 0.137353 146 27.398974 850125512 -0.039751 0.263220 119.488980 ... 2440 27 760640090 243 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810681 1.494726e-02 0.99 3.955774 0.164824 155 3.860896 850125522 0.040197 0.253305 94.964805 ... 2500 43 760640090 248 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810724 1.980594e-02 0.99 3.103758 0.206030 159 3.353491 850125528 0.052159 0.188140 70.048680 ... 2520 27 760640090 251 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810714 1.207634e-02 0.99 2.755925 0.123618 158 28.145878 850125528 0.033701 0.370707 83.880615 ... 2520 27 760640090 251 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810747 2.220929e-02 0.99 3.338790 0.109883 161 31.281150 850125532 0.060973 0.334533 85.732920 ... 2540 11 760640090 253 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810810 3.346904e-02 0.99 2.424978 0.233501 167 16.164793 850125540 0.117320 0.342251 129.222405 ... 2580 11 760640090 257 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810800 1.953910e-02 0.99 3.142277 0.192295 166 8.748247 850125540 0.123814 0.495980 167.937120 ... 2580 11 760640090 257 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810780 3.829283e-10 0.99 10.296593 0.178559 164 12.319054 850125538 0.021520 0.982477 410.538960 ... 2580 43 760640090 256 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810862 2.129115e-03 0.99 4.338259 0.192295 173 12.901340 850125542 0.036194 0.595681 233.822355 ... 2600 59 760640090 258 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810906 2.221306e-02 0.99 2.336806 0.178559 177 6.664925 850125548 0.034098 0.331750 112.625175 ... 2620 11 760640090 261 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810821 2.698430e-02 0.99 3.522349 0.192295 168 10.808683 850125548 0.173683 0.731586 265.784025 ... 2620 11 760640090 261 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811003 2.464569e-02 0.99 2.345641 0.247236 186 3.778487 850125552 0.034088 0.097890 91.940160 ... 2640 27 760640090 263 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810960 7.146482e-03 0.99 3.435205 0.233501 182 10.473926 850125550 0.106573 0.436794 162.061380 ... 2640 59 760640090 262 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810949 1.844772e-02 0.99 1.733649 0.206030 181 4.930713 850125550 0.025205 0.251917 98.740395 ... 2640 59 760640090 262 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811011 1.600898e-02 0.99 2.920553 0.164824 187 10.460777 850125556 0.076467 0.387585 87.053655 ... 2660 11 760640090 265 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812284 1.740284e-02 0.99 2.428781 0.192295 301 1.365627 850125560 0.025508 0.201020 73.679190 ... 2680 27 760640090 267 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811082 2.009838e-02 0.99 1.937826 0.192295 194 12.264750 850125560 0.059112 0.200966 64.151295 ... 2680 27 760640090 267 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811061 2.468758e-02 0.99 2.508332 0.206030 192 4.202680 850125560 0.083005 0.266964 109.931055 ... 2680 27 760640090 267 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811155 4.289276e-03 0.98 4.412393 0.164824 200 1.898528 850125564 0.040849 0.317779 101.479560 ... 2700 11 760640090 269 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811093 2.203741e-02 0.99 2.898079 0.247236 195 1.217070 850125562 0.052699 0.183846 79.064700 ... 2700 43 760640090 268 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811269 8.454930e-03 0.99 2.371987 0.260972 211 1.530446 850125568 -0.025934 0.244854 210.490020 ... 2720 27 760640090 271 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811227 2.789347e-02 0.99 3.006104 0.178559 207 2.932912 850125566 0.054781 0.361894 122.204745 ... 2720 59 760640090 270 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811217 1.941079e-02 0.99 2.658131 0.206030 206 5.483589 850125566 0.059092 0.434899 105.427335 ... 2720 59 760640090 270 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811321 2.978122e-02 0.99 2.643593 0.137353 215 7.824177 850125572 0.082508 0.602960 139.474530 ... 2740 11 760640090 273 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811306 9.570420e-03 0.96 3.218939 0.206030 214 3.392237 850125570 0.010120 0.184718 47.443695 ... 2740 43 760640090 272 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811295 2.107853e-03 0.99 3.591435 0.164824 213 7.020058 850125570 0.005373 0.616669 157.950195 ... 2740 43 760640090 272 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811440 2.823222e-02 0.99 2.256720 0.233501 223 2.433838 850125576 0.036465 0.180807 72.606495 ... 2760 27 760640090 275 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811426 3.347458e-02 0.99 2.141080 0.151089 222 9.408827 850125576 0.089080 0.435544 96.602220 ... 2760 27 760640090 275 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811399 1.359291e-02 0.99 3.393374 0.151089 221 0.859126 850125576 0.054161 0.451101 148.743855 ... 2760 27 760640090 275 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812296 1.870302e-02 0.97 5.160139 0.137353 302 0.241808 850125574 0.071533 0.706449 223.147080 ... 2760 59 760640090 274 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811514 2.226379e-02 0.99 2.575526 0.192295 230 0.945249 850125580 -0.087560 0.369357 127.157745 ... 2780 11 760640090 277 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811504 4.181974e-02 0.99 3.259821 0.151089 229 10.919700 850125580 -0.072480 1.125833 252.127980 ... 2780 11 760640090 277 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811494 2.772694e-02 0.99 3.782665 0.233501 228 6.399227 850125580 -0.026201 0.547095 175.081530 ... 2780 11 760640090 277 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811546 4.447553e-02 0.99 3.434927 0.206030 234 0.634282 850125582 -0.035403 0.295777 125.219055 ... 2800 59 760640090 278 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811535 6.215493e-02 0.99 3.808240 0.123618 233 19.013590 850125582 -0.031512 0.901618 215.305740 ... 2800 59 760640090 278 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811578 2.063948e-03 0.97 3.630543 0.151089 237 0.720505 850125588 0.124073 0.870748 270.431070 ... 2820 11 760640090 281 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811558 1.411031e-02 0.99 2.114495 0.192295 235 1.828265 850125588 0.085336 0.494993 178.081995 ... 2820 11 760640090 281 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812326 5.190961e-02 0.98 3.115177 0.219765 304 0.187705 850125586 -0.053965 0.289688 101.112765 ... 2820 43 760640090 280 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811646 1.092733e-03 0.99 5.678935 0.192295 244 0.862037 850125592 0.076550 0.423870 149.952075 ... 2840 27 760640090 283 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811789 6.184652e-02 0.99 2.216245 0.178559 257 10.533550 850125600 0.028847 0.289182 71.916975 ... 2880 27 760640090 287 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811778 8.096133e-02 0.99 2.939130 0.247236 256 3.123327 850125600 0.102498 0.301285 104.745615 ... 2880 27 760640090 287 385.0 probeC See electrode locations 29999.905275 1249.996053 True <p>51 rows \u00d7 39 columns</p> In\u00a0[77]: Copied! <pre>## IDEA: plot distributions of each neuron thingy\n_ = plt.hist(my_db.session.units[get_neuron_filter_mask(dict_filter={'areas' : ['VISp']})]['silhouette_score'], bins=20)\n</pre> ## IDEA: plot distributions of each neuron thingy _ = plt.hist(my_db.session.units[get_neuron_filter_mask(dict_filter={'areas' : ['VISp']})]['silhouette_score'], bins=20) <pre>51 out 684\n</pre> In\u00a0[66]: Copied! <pre>my_db.session.units[my_db.session.units.ecephys_structure_acronym.isin(['VISp'])]\n</pre> my_db.session.units[my_db.session.units.ecephys_structure_acronym.isin(['VISp'])] Out[66]: L_ratio presence_ratio d_prime waveform_halfwidth cluster_id firing_rate peak_channel_id silhouette_score waveform_repolarization_slope waveform_amplitude ... probe_vertical_position probe_horizontal_position probe_id channel_local_index ecephys_structure_id probe_description location probe_sampling_rate probe_lfp_sampling_rate probe_has_lfp_data unit_id 951810314 6.731932e-03 0.99 3.709323 0.206030 126 7.114814 850125484 0.120317 0.229439 78.235560 ... 2300 11 760640090 229 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810369 5.345009e-02 0.99 3.578593 0.206030 131 5.595007 850125488 -0.008220 0.216118 83.823675 ... 2320 27 760640090 231 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810338 1.301614e-02 0.99 4.067453 0.233501 128 6.034558 850125486 0.155323 0.185828 65.479440 ... 2320 59 760640090 230 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810392 1.774653e-02 0.99 3.803809 0.178559 133 1.415214 850125494 0.079454 0.287642 95.161365 ... 2360 59 760640090 234 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810425 1.843604e-02 0.99 4.238960 0.164824 136 18.240085 850125500 -0.001033 0.692030 150.832890 ... 2380 11 760640090 237 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812218 3.729026e-02 0.99 2.817388 0.164824 296 3.790030 850125498 0.092064 0.219161 89.132550 ... 2380 43 760640090 236 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810459 2.983152e-04 0.99 5.402746 0.096147 139 5.216888 850125502 0.159981 0.388193 126.720555 ... 2400 59 760640090 238 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810548 1.392578e-02 0.99 2.110679 0.164824 145 4.499695 850125508 0.083604 0.327585 76.687650 ... 2420 11 760640090 241 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810517 1.473093e-02 0.99 2.637168 0.151089 143 0.959804 850125508 0.028951 0.340594 113.447295 ... 2420 11 760640090 241 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810495 1.102429e-03 0.99 4.616050 0.164824 142 3.167392 850125508 0.063172 0.469455 155.661480 ... 2420 11 760640090 241 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810564 2.656846e-02 0.99 3.608405 0.137353 146 27.398974 850125512 -0.039751 0.263220 119.488980 ... 2440 27 760640090 243 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810681 1.494726e-02 0.99 3.955774 0.164824 155 3.860896 850125522 0.040197 0.253305 94.964805 ... 2500 43 760640090 248 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810724 1.980594e-02 0.99 3.103758 0.206030 159 3.353491 850125528 0.052159 0.188140 70.048680 ... 2520 27 760640090 251 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810714 1.207634e-02 0.99 2.755925 0.123618 158 28.145878 850125528 0.033701 0.370707 83.880615 ... 2520 27 760640090 251 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810747 2.220929e-02 0.99 3.338790 0.109883 161 31.281150 850125532 0.060973 0.334533 85.732920 ... 2540 11 760640090 253 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810810 3.346904e-02 0.99 2.424978 0.233501 167 16.164793 850125540 0.117320 0.342251 129.222405 ... 2580 11 760640090 257 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810800 1.953910e-02 0.99 3.142277 0.192295 166 8.748247 850125540 0.123814 0.495980 167.937120 ... 2580 11 760640090 257 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810780 3.829283e-10 0.99 10.296593 0.178559 164 12.319054 850125538 0.021520 0.982477 410.538960 ... 2580 43 760640090 256 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810862 2.129115e-03 0.99 4.338259 0.192295 173 12.901340 850125542 0.036194 0.595681 233.822355 ... 2600 59 760640090 258 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810906 2.221306e-02 0.99 2.336806 0.178559 177 6.664925 850125548 0.034098 0.331750 112.625175 ... 2620 11 760640090 261 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810821 2.698430e-02 0.99 3.522349 0.192295 168 10.808683 850125548 0.173683 0.731586 265.784025 ... 2620 11 760640090 261 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811003 2.464569e-02 0.99 2.345641 0.247236 186 3.778487 850125552 0.034088 0.097890 91.940160 ... 2640 27 760640090 263 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810960 7.146482e-03 0.99 3.435205 0.233501 182 10.473926 850125550 0.106573 0.436794 162.061380 ... 2640 59 760640090 262 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951810949 1.844772e-02 0.99 1.733649 0.206030 181 4.930713 850125550 0.025205 0.251917 98.740395 ... 2640 59 760640090 262 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811011 1.600898e-02 0.99 2.920553 0.164824 187 10.460777 850125556 0.076467 0.387585 87.053655 ... 2660 11 760640090 265 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812284 1.740284e-02 0.99 2.428781 0.192295 301 1.365627 850125560 0.025508 0.201020 73.679190 ... 2680 27 760640090 267 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811082 2.009838e-02 0.99 1.937826 0.192295 194 12.264750 850125560 0.059112 0.200966 64.151295 ... 2680 27 760640090 267 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811061 2.468758e-02 0.99 2.508332 0.206030 192 4.202680 850125560 0.083005 0.266964 109.931055 ... 2680 27 760640090 267 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811155 4.289276e-03 0.98 4.412393 0.164824 200 1.898528 850125564 0.040849 0.317779 101.479560 ... 2700 11 760640090 269 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811093 2.203741e-02 0.99 2.898079 0.247236 195 1.217070 850125562 0.052699 0.183846 79.064700 ... 2700 43 760640090 268 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811269 8.454930e-03 0.99 2.371987 0.260972 211 1.530446 850125568 -0.025934 0.244854 210.490020 ... 2720 27 760640090 271 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811227 2.789347e-02 0.99 3.006104 0.178559 207 2.932912 850125566 0.054781 0.361894 122.204745 ... 2720 59 760640090 270 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811217 1.941079e-02 0.99 2.658131 0.206030 206 5.483589 850125566 0.059092 0.434899 105.427335 ... 2720 59 760640090 270 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811321 2.978122e-02 0.99 2.643593 0.137353 215 7.824177 850125572 0.082508 0.602960 139.474530 ... 2740 11 760640090 273 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811306 9.570420e-03 0.96 3.218939 0.206030 214 3.392237 850125570 0.010120 0.184718 47.443695 ... 2740 43 760640090 272 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811295 2.107853e-03 0.99 3.591435 0.164824 213 7.020058 850125570 0.005373 0.616669 157.950195 ... 2740 43 760640090 272 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811440 2.823222e-02 0.99 2.256720 0.233501 223 2.433838 850125576 0.036465 0.180807 72.606495 ... 2760 27 760640090 275 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811426 3.347458e-02 0.99 2.141080 0.151089 222 9.408827 850125576 0.089080 0.435544 96.602220 ... 2760 27 760640090 275 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811399 1.359291e-02 0.99 3.393374 0.151089 221 0.859126 850125576 0.054161 0.451101 148.743855 ... 2760 27 760640090 275 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812296 1.870302e-02 0.97 5.160139 0.137353 302 0.241808 850125574 0.071533 0.706449 223.147080 ... 2760 59 760640090 274 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811514 2.226379e-02 0.99 2.575526 0.192295 230 0.945249 850125580 -0.087560 0.369357 127.157745 ... 2780 11 760640090 277 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811504 4.181974e-02 0.99 3.259821 0.151089 229 10.919700 850125580 -0.072480 1.125833 252.127980 ... 2780 11 760640090 277 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811494 2.772694e-02 0.99 3.782665 0.233501 228 6.399227 850125580 -0.026201 0.547095 175.081530 ... 2780 11 760640090 277 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811546 4.447553e-02 0.99 3.434927 0.206030 234 0.634282 850125582 -0.035403 0.295777 125.219055 ... 2800 59 760640090 278 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811535 6.215493e-02 0.99 3.808240 0.123618 233 19.013590 850125582 -0.031512 0.901618 215.305740 ... 2800 59 760640090 278 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811578 2.063948e-03 0.97 3.630543 0.151089 237 0.720505 850125588 0.124073 0.870748 270.431070 ... 2820 11 760640090 281 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811558 1.411031e-02 0.99 2.114495 0.192295 235 1.828265 850125588 0.085336 0.494993 178.081995 ... 2820 11 760640090 281 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951812326 5.190961e-02 0.98 3.115177 0.219765 304 0.187705 850125586 -0.053965 0.289688 101.112765 ... 2820 43 760640090 280 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811646 1.092733e-03 0.99 5.678935 0.192295 244 0.862037 850125592 0.076550 0.423870 149.952075 ... 2840 27 760640090 283 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811789 6.184652e-02 0.99 2.216245 0.178559 257 10.533550 850125600 0.028847 0.289182 71.916975 ... 2880 27 760640090 287 385.0 probeC See electrode locations 29999.905275 1249.996053 True 951811778 8.096133e-02 0.99 2.939130 0.247236 256 3.123327 850125600 0.102498 0.301285 104.745615 ... 2880 27 760640090 287 385.0 probeC See electrode locations 29999.905275 1249.996053 True <p>51 rows \u00d7 39 columns</p> In\u00a0[21]: Copied! <pre>get_filter_mask({\"temporal_frequency\" : [4,8]})\n</pre> get_filter_mask({\"temporal_frequency\" : [4,8]}) <pre>3885\n</pre> Out[21]: <pre>stimulus_presentation_id\n0        False\n1         True\n2         True\n3         True\n4         True\n         ...  \n70385    False\n70386    False\n70387    False\n70388    False\n70389    False\nName: temporal_frequency, Length: 70390, dtype: bool</pre> In\u00a0[22]: Copied! <pre>get_filter_mask({\"stimulus_name\" : \"drifting_gratings\"})\n</pre> get_filter_mask({\"stimulus_name\" : \"drifting_gratings\"}) <pre>630\n</pre> Out[22]: <pre>stimulus_presentation_id\n0        False\n1        False\n2        False\n3        False\n4        False\n         ...  \n70385    False\n70386    False\n70387    False\n70388    False\n70389    False\nName: stimulus_name, Length: 70390, dtype: bool</pre> In\u00a0[23]: Copied! <pre>get_filter_mask({'stimulus_name' : \"drifting_gratings\", \"temporal_frequency\" : [4,8]})\n</pre> get_filter_mask({'stimulus_name' : \"drifting_gratings\", \"temporal_frequency\" : [4,8]}) <pre>240\n</pre> Out[23]: <pre>stimulus_presentation_id\n0        False\n1        False\n2        False\n3        False\n4        False\n         ...  \n70385    False\n70386    False\n70387    False\n70388    False\n70389    False\nLength: 70390, dtype: bool</pre> In\u00a0[24]: Copied! <pre>test_mask = get_filter_mask({'stimulus_name' : \"drifting_gratings\", \"orientation\" : [0,45,90,135]})\n</pre> test_mask = get_filter_mask({'stimulus_name' : \"drifting_gratings\", \"orientation\" : [0,45,90,135]}) <pre>300\n</pre> In\u00a0[\u00a0]: Copied! <pre>get_neuron_filter_mask(dict_filter)\n</pre> get_neuron_filter_mask(dict_filter) In\u00a0[25]: Copied! <pre>my_db.session.stimulus_presentations[test_mask]\n</pre> my_db.session.stimulus_presentations[test_mask] Out[25]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 3799 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1588.736891 2 drifting_gratings 1590.738571 2 null null 2.00168 247 3802 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1597.744458 2 drifting_gratings 1599.746088 4 null null 2.00163 249 3803 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1600.746921 2 drifting_gratings 1602.748601 2 null null 2.00168 247 3806 null 0.8 null 0 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1609.754498 2 drifting_gratings 1611.756168 4 null null 2.00167 252 3807 null 0.8 null 90 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 1612.756971 2 drifting_gratings 1614.758641 2 null null 2.00167 253 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 49419 null 0.8 null 45 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5356.903568 7 drifting_gratings 5358.905278 8 null null 2.00171 284 49424 null 0.8 null 45 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5371.916121 7 drifting_gratings 5373.917791 4 null null 2.00167 259 49428 null 0.8 null 45 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5383.926161 7 drifting_gratings 5385.927841 4 null null 2.00168 259 49429 null 0.8 null 0 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5386.928658 7 drifting_gratings 5388.930338 1 null null 2.00168 285 49431 null 0.8 null 135 [42471.86666667, 42471.86666667] [250.0, 250.0] 0.04 5392.933708 7 drifting_gratings 5394.935378 8 null null 2.00167 272 <p>300 rows \u00d7 16 columns</p> In\u00a0[26]: Copied! <pre>type(my_db.session.spike_times)\n</pre> type(my_db.session.spike_times) Out[26]: <pre>dict</pre> In\u00a0[27]: Copied! <pre>my_db.session.stimulus_presentations[test_mask]['orientation']\n</pre> my_db.session.stimulus_presentations[test_mask]['orientation'] Out[27]: <pre>stimulus_presentation_id\n3799     135\n3802     135\n3803     135\n3806       0\n3807      90\n        ... \n49419     45\n49424     45\n49428     45\n49429      0\n49431    135\nName: orientation, Length: 300, dtype: object</pre> In\u00a0[28]: Copied! <pre>def get_selected_data(stim_mask, window_length, stim_label_name):\n    l_start_time = np.array(my_db.session.stimulus_presentations[stim_mask]['start_time'])\n    label = np.array(my_db.session.stimulus_presentations[stim_mask][stim_label_name])\n    \n    index = 0\n    spike_times = []; ii_spike_times = []\n    for i_e in range(len(l_start_time)):\n        start_time = l_start_time[i_e]\n        \n        temp_ii_spike_times = []\n        for neuron_id, spike_train in my_db.session.spike_times.items():\n            st = spike_train[(spike_train &gt;= start_time) &amp; (spike_train &lt; (start_time+window_length))].copy()\n            st -= start_time\n            \n            temp_ii_spike_times.append([index, index+len(st)])\n            index += len(st)\n            spike_times.append(st)\n            \n        ii_spike_times.append(temp_ii_spike_times)\n        \n    spike_times = np.concatenate(spike_times)\n    ii_spike_times = np.array(ii_spike_times)\n    \n    return spike_times, ii_spike_times, label\n</pre> def get_selected_data(stim_mask, window_length, stim_label_name):     l_start_time = np.array(my_db.session.stimulus_presentations[stim_mask]['start_time'])     label = np.array(my_db.session.stimulus_presentations[stim_mask][stim_label_name])          index = 0     spike_times = []; ii_spike_times = []     for i_e in range(len(l_start_time)):         start_time = l_start_time[i_e]                  temp_ii_spike_times = []         for neuron_id, spike_train in my_db.session.spike_times.items():             st = spike_train[(spike_train &gt;= start_time) &amp; (spike_train &lt; (start_time+window_length))].copy()             st -= start_time                          temp_ii_spike_times.append([index, index+len(st)])             index += len(st)             spike_times.append(st)                      ii_spike_times.append(temp_ii_spike_times)              spike_times = np.concatenate(spike_times)     ii_spike_times = np.array(ii_spike_times)          return spike_times, ii_spike_times, label In\u00a0[29]: Copied! <pre>%%time\nspike_times, ii_spike_times, stim_label = get_selected_data(test_mask, window_length=1, stim_label_name='orientation')\n</pre> %%time spike_times, ii_spike_times, stim_label = get_selected_data(test_mask, window_length=1, stim_label_name='orientation')  <pre>CPU times: user 29.7 s, sys: 126 ms, total: 29.8 s\nWall time: 29.9 s\n</pre> In\u00a0[30]: Copied! <pre>print (\"Number of trials :\", ii_spike_times.shape[0])\nprint (\"Number of neurons:\", ii_spike_times.shape[1])\n</pre> print (\"Number of trials :\", ii_spike_times.shape[0]) print (\"Number of neurons:\", ii_spike_times.shape[1]) <pre>Number of trials : 300\nNumber of neurons: 684\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[31]: Copied! <pre>spike_times\n</pre> spike_times Out[31]: <pre>array([0.25193535, 0.28330203, 0.61596887, ..., 0.64996225, 0.7376624 ,\n       0.88992932])</pre> In\u00a0[32]: Copied! <pre>np.min(spike_times), np.max(spike_times)\n</pre> np.min(spike_times), np.max(spike_times) Out[32]: <pre>(3.4122126635338645e-07, 0.9999996597534846)</pre> In\u00a0[33]: Copied! <pre>ii_spike_times.shape\n</pre> ii_spike_times.shape Out[33]: <pre>(300, 684, 2)</pre> In\u00a0[34]: Copied! <pre>sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.proc.distances.spike_metrics import pairwise_spike_distance\n</pre> sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.proc.distances.spike_metrics import pairwise_spike_distance In\u00a0[35]: Copied! <pre>FRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='firing_rates_z')\n</pre> FRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='firing_rates_z') In\u00a0[36]: Copied! <pre>%%time\nVP = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={\"cost\" : None})\n</pre> %%time VP = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={\"cost\" : None}) <pre>CPU times: user 15min 38s, sys: 956 ms, total: 15min 39s\nWall time: 15min 39s\n</pre> In\u00a0[37]: Copied! <pre>si = np.argsort(stim_label)\n</pre> si = np.argsort(stim_label) In\u00a0[38]: Copied! <pre>plt.imshow(VP[:,si][si], cmap='PuBu')\n</pre> plt.imshow(VP[:,si][si], cmap='PuBu') Out[38]: <pre>&lt;matplotlib.image.AxesImage at 0x7f371c943320&gt;</pre> In\u00a0[39]: Copied! <pre>perplexity = 70.\n</pre> perplexity = 70. In\u00a0[40]: Copied! <pre>emb_FRz    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(FRz)\nemb_VP     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP)\n</pre> emb_FRz    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(FRz) emb_VP     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP) In\u00a0[41]: Copied! <pre>def tsne_visualization(emb, stim_ids, fs_label=14, fn_legend=14, show_legend=False, title=\"\"):\n    fig, axs = plt.subplots(figsize=(5,5), facecolor='w')\n    unique_stim_ids = np.unique(stim_ids)\n    for stim_id in unique_stim_ids:\n        mask = (stim_ids==stim_id)\n        axs.scatter(emb[mask,0], emb[mask,1], label=stim_id)\n    if show_legend:\n        axs.legend(frameon=False, fontsize=fn_legend)\n    if title!=\"\":\n        axs.set_title(title, fontsize=fs_label)\n    axs.set_xlabel(\"1st component\", fontsize=fs_label)\n    axs.set_ylabel(\"2nd component\", fontsize=fs_label)\n</pre> def tsne_visualization(emb, stim_ids, fs_label=14, fn_legend=14, show_legend=False, title=\"\"):     fig, axs = plt.subplots(figsize=(5,5), facecolor='w')     unique_stim_ids = np.unique(stim_ids)     for stim_id in unique_stim_ids:         mask = (stim_ids==stim_id)         axs.scatter(emb[mask,0], emb[mask,1], label=stim_id)     if show_legend:         axs.legend(frameon=False, fontsize=fn_legend)     if title!=\"\":         axs.set_title(title, fontsize=fs_label)     axs.set_xlabel(\"1st component\", fontsize=fs_label)     axs.set_ylabel(\"2nd component\", fontsize=fs_label) In\u00a0[42]: Copied! <pre>tsne_visualization(emb=emb_FRz, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"Firing rate (z-scored)\")\n</pre> tsne_visualization(emb=emb_FRz, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"Firing rate (z-scored)\") In\u00a0[43]: Copied! <pre>tsne_visualization(emb=emb_VP, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"Firing rate (z-scored)\")\n</pre> tsne_visualization(emb=emb_VP, stim_ids=stim_label, fs_label=14, show_legend=False, title=\"Firing rate (z-scored)\") In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>TODO:</p> <ul> <li>Dataset exploration:<ul> <li>Show basic stats (example: stimulus duration (min and max values))</li> </ul> </li> <li>Implement more complex filters</li> <li>Implement a nicer way to display metadata</li> </ul> <p>Modules:</p> <ul> <li>Data Exploration:<ul> <li>Explore dataset based on metadata in nwb dataset</li> <li></li> </ul> </li> </ul> In\u00a0[85]: Copied! <pre>import ipywidgets as widgets\nfrom IPython.display import display, clear_output\n</pre> import ipywidgets as widgets from IPython.display import display, clear_output In\u00a0[91]: Copied! <pre>left_column = widgets.Label(\n                    value='Photo by CDC on Unsplash',\n                    style={'description_width': 'initial'}\n                )\n\nright_headline = widgets.Label(\n                    value='Photo by CDC on Unsplash',\n                    style={'description_width': 'initial'}\n                )\n\nvbox_headline = widgets.VBox([left_column, right_headline])\n\n\ngrand = widgets.ToggleButtons(\n            options=['grandson', 'granddaughter']\n        )\n\nname = widgets.Text(placeholder='Your name here')\n\n# number of friends\n\nfriends = widgets.IntSlider(\n            value=3, # default value\n            min=0, \n            max=10,\n            step=1,\n            style={'description_width': 'initial', 'handle_color': '#16a085'} \n        )\n\n# button send\n\nbutton_send = widgets.Button(\n                description='Send to grandma',\n                tooltip='Send',\n                style={'description_width': 'initial'}\n            )\n\noutput = widgets.Output()\n\ndef on_button_clicked(event):\n    with output:\n        clear_output()\n        print(\"Sent message: \")\n        print(f\"Dear Grandma! This is your favourite {grand.value}, {name.value}.\")\n        print(f\"Also, if you don't mind, I'll bring along {friends.value} hungry ghosts for your delicious food!\")\n\nbutton_send.on_click(on_button_clicked)\n\nvbox_result = widgets.VBox([button_send, output])\n</pre> left_column = widgets.Label(                     value='Photo by CDC on Unsplash',                     style={'description_width': 'initial'}                 )  right_headline = widgets.Label(                     value='Photo by CDC on Unsplash',                     style={'description_width': 'initial'}                 )  vbox_headline = widgets.VBox([left_column, right_headline])   grand = widgets.ToggleButtons(             options=['grandson', 'granddaughter']         )  name = widgets.Text(placeholder='Your name here')  # number of friends  friends = widgets.IntSlider(             value=3, # default value             min=0,              max=10,             step=1,             style={'description_width': 'initial', 'handle_color': '#16a085'}          )  # button send  button_send = widgets.Button(                 description='Send to grandma',                 tooltip='Send',                 style={'description_width': 'initial'}             )  output = widgets.Output()  def on_button_clicked(event):     with output:         clear_output()         print(\"Sent message: \")         print(f\"Dear Grandma! This is your favourite {grand.value}, {name.value}.\")         print(f\"Also, if you don't mind, I'll bring along {friends.value} hungry ghosts for your delicious food!\")  button_send.on_click(on_button_clicked)  vbox_result = widgets.VBox([button_send, output])  In\u00a0[92]: Copied! <pre># stacked right hand side\n\ntext_0 = widgets.HTML(value=\"&lt;h1&gt;Dear Grandma!&lt;/h1&gt;\")\ntext_1 = widgets.HTML(value=\"&lt;h2&gt;This is your favourite&lt;/h2&gt;\")\ntext_2= widgets.HTML(value=\"&lt;h2&gt;I would love to come over on &lt;/h2&gt;\")\ntext_3= widgets.HTML(value=\"&lt;h2&gt;for dinner, if that's okay for you!&lt;/h2&gt;\")\ntext_4= widgets.HTML(value=\"&lt;h2&gt;Also, if you don't mind, I'll bring along &lt;/h2&gt;\")\ntext_5= widgets.HTML(value=\"&lt;h2&gt;hungry ghosts for dinner, if that's okay for you!&lt;/h2&gt;\")\n\nvbox_text = widgets.VBox([text_0, text_1, grand, name, text_2, text_3, text_4, friends, text_5, vbox_result])\n</pre> # stacked right hand side  text_0 = widgets.HTML(value=\"Dear Grandma!\") text_1 = widgets.HTML(value=\"This is your favourite\") text_2= widgets.HTML(value=\"I would love to come over on \") text_3= widgets.HTML(value=\"for dinner, if that's okay for you!\") text_4= widgets.HTML(value=\"Also, if you don't mind, I'll bring along \") text_5= widgets.HTML(value=\"hungry ghosts for dinner, if that's okay for you!\")  vbox_text = widgets.VBox([text_0, text_1, grand, name, text_2, text_3, text_4, friends, text_5, vbox_result])   In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[94]: Copied! <pre>page = widgets.HBox([vbox_text])\ndisplay(page)\n</pre> page = widgets.HBox([vbox_text]) display(page) <pre>HBox(children=(VBox(children=(HTML(value='&lt;h1&gt;Dear Grandma!&lt;/h1&gt;'), HTML(value='&lt;h2&gt;This is your favourite&lt;/h2\u2026</pre> In\u00a0[118]: Copied! <pre>my_db.session.metadata\n</pre> my_db.session.metadata Out[118]: <pre>{'specimen_name': 'Sst-IRES-Cre;Ai32-406807',\n 'session_type': 'brain_observatory_1.1',\n 'full_genotype': 'Sst-IRES-Cre/wt;Ai32(RCL-ChR2(H134R)_EYFP)/wt',\n 'sex': 'M',\n 'age_in_days': 96.0,\n 'rig_equipment_name': 'NP.1',\n 'num_units': 684,\n 'num_channels': 2214,\n 'num_probes': 6,\n 'num_stimulus_presentations': 70390,\n 'session_start_time': datetime.datetime(2018, 10, 26, 12, 59, 18, tzinfo=tzoffset(None, -25200)),\n 'ecephys_session_id': 756029989,\n 'structure_acronyms': [nan,\n  'VPM',\n  'TH',\n  'LGd',\n  'CA3',\n  'CA2',\n  'CA1',\n  'VISal',\n  'DG',\n  'VISrl',\n  'VISl',\n  'VISpm',\n  'LP',\n  'PO',\n  'Eth',\n  'VISp',\n  'POL',\n  'APN',\n  'MB',\n  'SCig',\n  'POST',\n  'SUB',\n  'VISam'],\n 'stimulus_names': ['spontaneous',\n  'gabors',\n  'flashes',\n  'drifting_gratings',\n  'natural_movie_three',\n  'natural_movie_one',\n  'static_gratings',\n  'natural_scenes']}</pre> In\u00a0[123]: Copied! <pre>widgets.Dropdown(\n    options=['FR','FRz','VP'],\n    value='FR',\n    description='Distance:',\n    disabled=False,\n)\n</pre> widgets.Dropdown(     options=['FR','FRz','VP'],     value='FR',     description='Distance:',     disabled=False, ) <pre>Dropdown(description='Distance:', options=('FR', 'FRz', 'VP'), value='FR')</pre> In\u00a0[126]: Copied! <pre>#dates = [datetime.date(2015, i, 1) for i in range(1, 13)]\noptions = range(1,13) #[(i.strftime('%b'), i) for i in dates]\nwidgets.SelectionRangeSlider(\n    options=options,\n    index=(0, 3),\n    description='Months (2015)',\n    disabled=False\n)\n</pre> #dates = [datetime.date(2015, i, 1) for i in range(1, 13)] options = range(1,13) #[(i.strftime('%b'), i) for i in dates] widgets.SelectionRangeSlider(     options=options,     index=(0, 3),     description='Months (2015)',     disabled=False ) <pre>SelectionRangeSlider(description='Months (2015)', index=(0, 3), options=(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12\u2026</pre> In\u00a0[120]: Copied! <pre>text_0 = widgets.HTML(value=\"&lt;h3&gt;Neuron seleccion&lt;h3&gt;\")\ntext_1 = widgets.HTML(value=\"&lt;h4&gt;Brain area:&lt;h4&gt;\")\ntext_2 = widgets.HTML(value=\"&lt;h4&gt;Stimulus selection:&lt;h4&gt;\")\n\n# selection of brain area\nsel_brain_area = widgets.Select(\n    options=[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)],\n    rows=20,\n    #description='brain area:',\n    disabled=False\n)\n\nsel_stimulus_names = widgets.Select(\n    options=[item for item in my_db.session.metadata['stimulus_names'] if isinstance(item, str)],\n    rows=20,\n    #description='brain area:',\n    disabled=False\n)\n\nsel_distance = widgets.Dropdown(\n    options=['FR','FRz','VP'],\n    value='2',\n    description='Number:',\n    disabled=False,\n)\n\nvbox_text = widgets.VBox([text_0, text_1, sel_brain_area, text_2, sel_stimulus_names])\npage = widgets.HBox([vbox_text])\ndisplay(page)\n</pre> text_0 = widgets.HTML(value=\"Neuron seleccion\") text_1 = widgets.HTML(value=\"Brain area:\") text_2 = widgets.HTML(value=\"Stimulus selection:\")  # selection of brain area sel_brain_area = widgets.Select(     options=[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)],     rows=20,     #description='brain area:',     disabled=False )  sel_stimulus_names = widgets.Select(     options=[item for item in my_db.session.metadata['stimulus_names'] if isinstance(item, str)],     rows=20,     #description='brain area:',     disabled=False )  sel_distance = widgets.Dropdown(     options=['FR','FRz','VP'],     value='2',     description='Number:',     disabled=False, )  vbox_text = widgets.VBox([text_0, text_1, sel_brain_area, text_2, sel_stimulus_names]) page = widgets.HBox([vbox_text]) display(page) <pre>HBox(children=(VBox(children=(HTML(value='&lt;h3&gt;Neuron seleccion&lt;h3&gt;'), HTML(value='&lt;h4&gt;Brain area:&lt;h4&gt;'), Selec\u2026</pre> In\u00a0[128]: Copied! <pre>accordion = widgets.Accordion(children=[sel_brain_area, sel_stimulus_names], titles=('Neuron', 'Epoch selection'))\naccordion\n</pre> accordion = widgets.Accordion(children=[sel_brain_area, sel_stimulus_names], titles=('Neuron', 'Epoch selection')) accordion <pre>Accordion(children=(Select(options=('VPM', 'TH', 'LGd', 'CA3', 'CA2', 'CA1', 'VISal', 'DG', 'VISrl', 'VISl', '\u2026</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[80]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[97]: Copied! <pre>widgets.Select(\n    options=[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)],\n    #value='all',\n    # rows=10,\n    description='structure acronyms:',\n    disabled=False\n)\n</pre> widgets.Select(     options=[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)],     #value='all',     # rows=10,     description='structure acronyms:',     disabled=False ) <pre>Select(description='structure acronyms:', options=('VPM', 'TH', 'LGd', 'CA3', 'CA2', 'CA1', 'VISal', 'DG', 'VI\u2026</pre> In\u00a0[96]: Copied! <pre>[item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)]\n</pre> [item for item in my_db.session.metadata['structure_acronyms'] if isinstance(item, str)] Out[96]: <pre>['VPM',\n 'TH',\n 'LGd',\n 'CA3',\n 'CA2',\n 'CA1',\n 'VISal',\n 'DG',\n 'VISrl',\n 'VISl',\n 'VISpm',\n 'LP',\n 'PO',\n 'Eth',\n 'VISp',\n 'POL',\n 'APN',\n 'MB',\n 'SCig',\n 'POST',\n 'SUB',\n 'VISam']</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[119]: Copied! <pre>#do_filter([{'stimulus_name' : \"drifting_gratings\", \"temporal_frequency\" : [4,8]}, {'stimulus_name' : \"natural_scenes\"}])\n</pre> #do_filter([{'stimulus_name' : \"drifting_gratings\", \"temporal_frequency\" : [4,8]}, {'stimulus_name' : \"natural_scenes\"}]) In\u00a0[105]: Copied! <pre>validate_filter(3)#{'stimulus_name' : \"test\"})\n</pre> validate_filter(3)#{'stimulus_name' : \"test\"}) <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-105-700430801192&gt; in &lt;module&gt;\n----&gt; 1 validate_filter(3)#{'stimulus_name' : \"test\"})\n\n&lt;ipython-input-104-60e6e696646d&gt; in validate_filter(dict_filter)\n      2     # find if keys are part can be found\n      3     if type(dict_filter)!=type(dict()):\n----&gt; 4         raise TypeError(\"Input must be a dictionary (%s found)\" % str(type(dict_filter)))\n      5     dataset_column_names = list(my_db.session.stimulus_presentations.keys())\n      6 \n\nTypeError: Input must be a dictionary (&lt;class 'int'&gt; found)</pre> In\u00a0[109]: Copied! <pre>validate_filter({'stimulus_name'})\n</pre> validate_filter({'stimulus_name'}) <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n&lt;ipython-input-109-34288ee71bae&gt; in &lt;module&gt;\n----&gt; 1 validate_filter({'stimulus_name'})\n\n&lt;ipython-input-104-60e6e696646d&gt; in validate_filter(dict_filter)\n      2     # find if keys are part can be found\n      3     if type(dict_filter)!=type(dict()):\n----&gt; 4         raise TypeError(\"Input must be a dictionary (%s found)\" % str(type(dict_filter)))\n      5     dataset_column_names = list(my_db.session.stimulus_presentations.keys())\n      6 \n\nTypeError: Input must be a dictionary (&lt;class 'set'&gt; found)</pre> In\u00a0[110]: Copied! <pre>validate_filter({'stimulus_name' : \"test\"})\n</pre> validate_filter({'stimulus_name' : \"test\"}) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[111]: Copied! <pre>my_db.set_stimuli_filter({'stimulus_name':\"drifting_gratings\"})\n</pre> my_db.set_stimuli_filter({'stimulus_name':\"drifting_gratings\"}) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-111-d618927820de&gt; in &lt;module&gt;\n----&gt; 1 my_db.set_stimuli_filter({'stimulus_name':\"drifting_gratings\"})\n\n&lt;ipython-input-74-371117bbb6f3&gt; in set_stimuli_filter(self, stimulus_filter)\n     46             self.neurons_filter = neuron_filter['area']\n     47     def set_stimuli_filter(self, stimulus_filter):\n---&gt; 48         if type(stimulus_name)!=type(None):\n     49             self.stimuli_filter = stimulus_filter['stimulus_name']\n     50 \n\nNameError: name 'stimulus_name' is not defined</pre> In\u00a0[\u00a0]: Copied! <pre>my_db.stimuli_filter\n</pre> my_db.stimuli_filter In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[6]: Copied! <pre>session.units\n</pre> session.units Out[6]: L_ratio presence_ratio d_prime waveform_halfwidth cluster_id firing_rate peak_channel_id silhouette_score waveform_repolarization_slope waveform_amplitude ... probe_vertical_position probe_horizontal_position probe_id channel_local_index ecephys_structure_id probe_description location probe_sampling_rate probe_lfp_sampling_rate probe_has_lfp_data unit_id 951814884 0.024771 0.99 3.555518 0.096147 6 9.492176 850126382 0.033776 0.673650 187.434780 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951814876 0.001785 0.99 4.445414 0.206030 5 39.100557 850126382 0.108908 0.518633 129.686505 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815032 0.035654 0.99 3.848256 0.096147 17 28.383277 850126398 0.096715 0.766347 207.380940 ... 140 43 760640083 12 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815275 0.016783 0.99 3.065938 0.096147 30 5.709358 850126416 0.144249 0.628944 158.158650 ... 220 11 760640083 21 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815314 0.009666 0.99 4.198612 0.123618 34 23.902235 850126420 0.111106 0.740222 173.475705 ... 240 27 760640083 23 215.0 probeA See electrode locations 29999.949611 1249.997900 True ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 951814089 0.032323 0.99 3.194123 0.192295 138 6.579819 850122942 0.046354 0.285857 101.803065 ... 1560 59 760640104 154 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814212 0.235540 0.99 2.005153 0.137353 149 8.288338 850122968 0.044749 0.248256 77.300730 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814199 0.001055 0.99 6.563771 0.151089 148 2.653770 850122968 0.201445 0.384777 139.877010 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814190 0.036486 0.99 2.578246 NaN 147 17.181448 850122968 0.075027 0.034052 60.427575 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814312 0.012800 0.99 4.575564 0.233501 159 3.226923 850122984 0.099238 0.200151 70.730790 ... 1760 27 760640104 175 417.0 probeF See electrode locations 30000.023099 1250.000962 True <p>684 rows \u00d7 39 columns</p>"},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#neural-activity-and-stimuli-from-allen-datasets-extraction-computation-and-vis","title":"Neural activity and Stimuli from Allen datasets (Extraction, Computation, and Vis)\u00b6","text":"In\u00a0[7]: Copied! <pre>plt.figure(figsize=(15,5))\nplt.plot(\n    session.stimulus_presentations.start_time, \n    session.stimulus_presentations.stimulus_name,\n    marker= '|', linestyle=''\n    )\n\nplt.xlabel(\"Time\")\n</pre> plt.figure(figsize=(15,5)) plt.plot(     session.stimulus_presentations.start_time,      session.stimulus_presentations.stimulus_name,     marker= '|', linestyle=''     )  plt.xlabel(\"Time\") Out[7]: <pre>Text(0.5, 0, 'Time')</pre> In\u00a0[8]: Copied! <pre>session.stimulus_presentations[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ]\n</pre> session.stimulus_presentations[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ] Out[8]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 22000 null 1 0 0 null [1920.0, 1080.0] null 2846.788598 4 natural_movie_one 2846.821959 null null null 0.033361 3887 22001 null 1 1 0 null [1920.0, 1080.0] null 2846.821959 4 natural_movie_one 2846.855320 null null null 0.033361 3888 22002 null 1 2 0 null [1920.0, 1080.0] null 2846.855320 4 natural_movie_one 2846.888681 null null null 0.033361 3889 22003 null 1 3 0 null [1920.0, 1080.0] null 2846.888681 4 natural_movie_one 2846.922042 null null null 0.033361 3890 22004 null 1 4 0 null [1920.0, 1080.0] null 2846.922042 4 natural_movie_one 2846.955403 null null null 0.033361 3891 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 66113 null 1 895 0 null [1920.0, 1080.0] null 8010.955485 12 natural_movie_one 8010.988846 null null null 0.033361 4782 66114 null 1 896 0 null [1920.0, 1080.0] null 8010.988846 12 natural_movie_one 8011.022206 null null null 0.033361 4783 66115 null 1 897 0 null [1920.0, 1080.0] null 8011.022206 12 natural_movie_one 8011.055567 null null null 0.033361 4784 66116 null 1 898 0 null [1920.0, 1080.0] null 8011.055567 12 natural_movie_one 8011.088927 null null null 0.033361 4785 66117 null 1 899 0 null [1920.0, 1080.0] null 8011.088927 12 natural_movie_one 8011.122288 null null null 0.033361 4786 <p>18000 rows \u00d7 16 columns</p> In\u00a0[37]: Copied! <pre>session.stimulus_presentations.keys()\n</pre> session.stimulus_presentations.keys() Out[37]: <pre>Index(['color', 'contrast', 'frame', 'orientation', 'phase', 'size',\n       'spatial_frequency', 'start_time', 'stimulus_block', 'stimulus_name',\n       'stop_time', 'temporal_frequency', 'x_position', 'y_position',\n       'duration', 'stimulus_condition_id'],\n      dtype='object')</pre> In\u00a0[\u00a0]: Copied! <pre>my_selection = {}\n</pre> my_selection = {} In\u00a0[\u00a0]: Copied! <pre>stimulus_name\n</pre> stimulus_name In\u00a0[9]: Copied! <pre>plt.plot(\n    session.stimulus_presentations.stimulus_condition_id[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    marker='|', ls=''\n)\n</pre> plt.plot(     session.stimulus_presentations.stimulus_condition_id[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     marker='|', ls='' ) Out[9]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe912d2ccf8&gt;]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[10]: Copied! <pre>plt.plot(\n    session.stimulus_presentations.stimulus_block[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    marker='|', ls=''\n)\n</pre> plt.plot(     session.stimulus_presentations.stimulus_block[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     marker='|', ls='' ) Out[10]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe925904898&gt;]</pre> In\u00a0[11]: Copied! <pre>plt.figure(figsize=(15,5));\nplt.plot(\n    session.stimulus_presentations.start_time[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    session.stimulus_presentations.frame[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    marker='|', ls=''\n)\n</pre> plt.figure(figsize=(15,5)); plt.plot(     session.stimulus_presentations.start_time[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     session.stimulus_presentations.frame[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     marker='|', ls='' ) Out[11]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe919de3748&gt;]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[12]: Copied! <pre>NS_table = session.stimulus_presentations[\n    (session.stimulus_presentations.stimulus_name == 'natural_scenes')\n]\n</pre> NS_table = session.stimulus_presentations[     (session.stimulus_presentations.stimulus_name == 'natural_scenes') ] In\u00a0[13]: Copied! <pre>NS_table\n</pre> NS_table Out[13]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 51355 null null 95 null null null null 5909.365398 9 natural_scenes 5909.615606 null null null 0.250208 4908 51356 null null 87 null null null null 5909.615606 9 natural_scenes 5909.865814 null null null 0.250208 4909 51357 null null 72 null null null null 5909.865814 9 natural_scenes 5910.116023 null null null 0.250208 4910 51358 null null 41 null null null null 5910.116023 9 natural_scenes 5910.366231 null null null 0.250208 4911 51359 null null 9 null null null null 5910.366231 9 natural_scenes 5910.616443 null null null 0.250212 4912 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 68224 null null 81 null null null null 8567.837656 13 natural_scenes 8568.087864 null null null 0.250208 4927 68225 null null 17 null null null null 8568.087864 13 natural_scenes 8568.338073 null null null 0.250208 5011 68226 null null 113 null null null null 8568.338073 13 natural_scenes 8568.588281 null null null 0.250208 4944 68227 null null 59 null null null null 8568.588281 13 natural_scenes 8568.838488 null null null 0.250207 5020 68228 null null 98 null null null null 8568.838488 13 natural_scenes 8569.088694 null null null 0.250207 4979 <p>5950 rows \u00d7 16 columns</p> <p>NWB to Numpy</p> In\u00a0[14]: Copied! <pre>l_stim_start_time  = np.array(NS_table['start_time']) # Stimulus onset\nl_stim_orientation = np.array(NS_table['orientation'])           # Natural Image ID\nduration = 0.25 # seconds\n</pre> l_stim_start_time  = np.array(NS_table['start_time']) # Stimulus onset l_stim_orientation = np.array(NS_table['orientation'])           # Natural Image ID duration = 0.25 # seconds In\u00a0[16]: Copied! <pre>#print (\"Number of natural scenes         : %i\" % len(set(l_stim_frame)))\n#print (\"Number of presentations per image: %i\" % (len(l_stim_frame)/len(set(l_stim_frame))))\n</pre> #print (\"Number of natural scenes         : %i\" % len(set(l_stim_frame))) #print (\"Number of presentations per image: %i\" % (len(l_stim_frame)/len(set(l_stim_frame)))) In\u00a0[17]: Copied! <pre>\"total neurons in this session\", len(session.spike_times.keys())\n</pre> \"total neurons in this session\", len(session.spike_times.keys()) Out[17]: <pre>('total neurons in this session', 684)</pre> In\u00a0[18]: Copied! <pre>neurons = session.units\n</pre> neurons = session.units In\u00a0[19]: Copied! <pre>neurons\n</pre> neurons Out[19]: L_ratio presence_ratio d_prime waveform_halfwidth cluster_id firing_rate peak_channel_id silhouette_score waveform_repolarization_slope waveform_amplitude ... probe_vertical_position probe_horizontal_position probe_id channel_local_index ecephys_structure_id probe_description location probe_sampling_rate probe_lfp_sampling_rate probe_has_lfp_data unit_id 951814884 0.024771 0.99 3.555518 0.096147 6 9.492176 850126382 0.033776 0.673650 187.434780 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951814876 0.001785 0.99 4.445414 0.206030 5 39.100557 850126382 0.108908 0.518633 129.686505 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815032 0.035654 0.99 3.848256 0.096147 17 28.383277 850126398 0.096715 0.766347 207.380940 ... 140 43 760640083 12 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815275 0.016783 0.99 3.065938 0.096147 30 5.709358 850126416 0.144249 0.628944 158.158650 ... 220 11 760640083 21 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815314 0.009666 0.99 4.198612 0.123618 34 23.902235 850126420 0.111106 0.740222 173.475705 ... 240 27 760640083 23 215.0 probeA See electrode locations 29999.949611 1249.997900 True ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 951814089 0.032323 0.99 3.194123 0.192295 138 6.579819 850122942 0.046354 0.285857 101.803065 ... 1560 59 760640104 154 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814212 0.235540 0.99 2.005153 0.137353 149 8.288338 850122968 0.044749 0.248256 77.300730 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814199 0.001055 0.99 6.563771 0.151089 148 2.653770 850122968 0.201445 0.384777 139.877010 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814190 0.036486 0.99 2.578246 NaN 147 17.181448 850122968 0.075027 0.034052 60.427575 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814312 0.012800 0.99 4.575564 0.233501 159 3.226923 850122984 0.099238 0.200151 70.730790 ... 1760 27 760640104 175 417.0 probeF See electrode locations 30000.023099 1250.000962 True <p>684 rows \u00d7 39 columns</p> In\u00a0[20]: Copied! <pre>l_n_ids  = np.array(neurons.index) # list of neuron's IDs\nprint (\"Total neurons: %s\" % l_n_ids.shape[0])\n</pre> l_n_ids  = np.array(neurons.index) # list of neuron's IDs print (\"Total neurons: %s\" % l_n_ids.shape[0]) <pre>Total neurons: 684\n</pre> In\u00a0[21]: Copied! <pre>print (\"List of properties\", neurons.keys())\n</pre> print (\"List of properties\", neurons.keys()) <pre>List of properties Index(['L_ratio', 'presence_ratio', 'd_prime', 'waveform_halfwidth',\n       'cluster_id', 'firing_rate', 'peak_channel_id', 'silhouette_score',\n       'waveform_repolarization_slope', 'waveform_amplitude', 'snr',\n       'waveform_velocity_below', 'max_drift', 'nn_miss_rate', 'nn_hit_rate',\n       'waveform_velocity_above', 'waveform_spread', 'amplitude_cutoff',\n       'waveform_duration', 'waveform_PT_ratio', 'cumulative_drift',\n       'isolation_distance', 'isi_violations', 'waveform_recovery_slope',\n       'local_index_unit', 'anterior_posterior_ccf_coordinate',\n       'dorsal_ventral_ccf_coordinate', 'left_right_ccf_coordinate',\n       'ecephys_structure_acronym', 'probe_vertical_position',\n       'probe_horizontal_position', 'probe_id', 'channel_local_index',\n       'ecephys_structure_id', 'probe_description', 'location',\n       'probe_sampling_rate', 'probe_lfp_sampling_rate', 'probe_has_lfp_data'],\n      dtype='object')\n</pre> <p>Spike times</p> In\u00a0[22]: Copied! <pre>l_spike_times = np.array([ session.spike_times[n_id] for n_id in l_n_ids ]) #dex#[l_n_ids]\n</pre> l_spike_times = np.array([ session.spike_times[n_id] for n_id in l_n_ids ]) #dex#[l_n_ids] In\u00a0[23]: Copied! <pre>print(\"spike times:\", l_spike_times)\n</pre> print(\"spike times:\", l_spike_times) <pre>spike times: [array([3.80928400e+00, 3.84358406e+00, 3.94235089e+00, ...,\n       9.94395425e+03, 9.96080897e+03, 9.96476828e+03])\n array([3.82861736e+00, 3.87158410e+00, 3.90445082e+00, ...,\n       9.96614322e+03, 9.96616348e+03, 9.96618938e+03])\n array([3.81211734e+00, 3.83468404e+00, 3.90791750e+00, ...,\n       9.96618255e+03, 9.96619485e+03, 9.96620922e+03])\n array([3.87385077e+00, 3.94535089e+00, 3.97931762e+00, ...,\n       9.90429721e+03, 9.91353780e+03, 9.94737115e+03])\n array([3.80601733e+00, 3.82201735e+00, 3.82865070e+00, ...,\n       9.96544542e+03, 9.96545708e+03, 9.96553402e+03])\n array([3.81051733e+00, 3.82808403e+00, 3.86331742e+00, ...,\n       9.95155443e+03, 9.96555178e+03, 9.96565845e+03])\n array([6.38542166e+00, 1.15116969e+01, 1.15370970e+01, ...,\n       9.95688457e+03, 9.96524272e+03, 9.96548838e+03])\n array([3.80391732e+00, 3.81505067e+00, 3.83268404e+00, ...,\n       9.92975532e+03, 9.95420393e+03, 9.96108484e+03])\n array([3.78548396e+00, 3.80398399e+00, 3.82135069e+00, ...,\n       9.96618315e+03, 9.96619242e+03, 9.96620228e+03])\n array([3.78635063e+00, 3.79898398e+00, 3.82945070e+00, ...,\n       9.96554795e+03, 9.96588238e+03, 9.96611635e+03])\n array([3.79361731e+00, 3.81168400e+00, 3.85448407e+00, ...,\n       9.96571592e+03, 9.96586922e+03, 9.96612488e+03])\n array([5.17158629e+00, 5.77315396e+00, 7.78345734e+00, ...,\n       9.96586505e+03, 9.96586748e+03, 9.96616655e+03])\n array([4.99271932e+00, 5.02215270e+00, 5.52355354e+00, ...,\n       9.96611762e+03, 9.96612255e+03, 9.96616738e+03])\n array([4.35221824e+00, 4.92021920e+00, 5.46105344e+00, ...,\n       9.96595492e+03, 9.96611408e+03, 9.96612002e+03])\n array([  63.37195071,   76.77147322,   90.77469674,  137.71834225,\n        164.47622053,  193.79750311,  208.01806033,  215.22050576,\n        223.63555323,  226.51019139,  268.31809495,  274.30147166,\n        286.21619168,  288.31186186,  290.61886574,  294.89253958,\n        325.37132411,  361.03668401,  369.52586494,  381.32751809,\n        456.94951178,  462.51645446,  468.2557641 ,  523.47999019,\n        527.45773021,  548.86796617,  568.37133226,  576.93877999,\n        589.4710677 ,  595.96124527,  599.94771863,  655.74511235,\n        690.54740414,  720.99535528,  766.50103172,  814.72654605,\n        824.17792859,  826.22926537,  840.15608876,  860.15788903,\n        876.99528397,  888.67117025,  892.32200972,  904.54686358,\n        907.2752015 ,  917.02758455,  932.67194416,  935.156015  ,\n        951.58067592,  971.44204261,  979.15245556, 1026.47453505,\n       1041.16202638, 1063.62973079, 1082.2314287 , 1137.08522083,\n       1148.89380733, 1153.51338176, 1189.0022747 , 1221.46756257,\n       1223.10396531, 1224.08636696, 1226.35557078, 1236.48068778,\n       1247.96974041, 1270.14027765, 1278.38705817, 1312.65478239,\n       1348.05197518, 1355.64828794, 1366.80254001, 1370.9256136 ,\n       1424.41380344, 1434.45048697, 1438.37056022, 1461.41306559,\n       1469.13354522, 1517.6994268 , 1520.05073075, 1549.30067988,\n       1557.32739336, 1570.0343147 , 1579.93336466, 1612.16878547,\n       1626.5340096 , 1647.49861148, 1702.73597093, 1712.80532117,\n       1730.8812182 , 1757.81643011, 1763.81037351, 1802.73073888,\n       1826.2759451 , 1829.396317  , 1833.00728973, 1870.36348581,\n       1876.33109584, 1888.7546167 , 1928.25034971, 1974.15496015,\n       1994.39702748, 2001.36753919, 2012.88735854, 2025.85114698,\n       2041.11610595, 2041.48227323, 2060.48347181, 2066.65111551,\n       2094.77112941, 2106.64254934, 2136.19266565, 2149.59855483,\n       2153.58522819, 2160.92250718, 2168.31608627, 2171.2892246 ,\n       2195.71823229, 2207.60318559, 2215.47386548, 2219.03260479,\n       2245.52938263, 2252.66322794, 2259.06870537, 2265.67041646,\n       2284.74451516, 2325.64198385, 2359.05113997, 2362.34977884,\n       2384.7508498 , 2388.86672338, 2415.12513415, 2430.18575945,\n       2439.40757494, 2444.26904977, 2453.72849899, 2458.42877355,\n       2469.64359239, 2474.75810098, 2478.82427448, 2484.14801675,\n       2522.4169477 , 2531.86969691, 2628.5297926 , 2662.94018373,\n       2669.38199455, 2674.81117033, 2676.76847362, 2687.05522423,\n       2694.95900417, 2729.86382947, 2743.12295174, 2748.48126074,\n       2774.1208038 , 2787.76542672, 2795.20903923, 2796.64317497,\n       2803.06275242, 2810.88323222, 2827.14355953, 2852.27140174,\n       2882.19881867, 2909.88753184, 2930.43753303, 2951.62366861,\n       2962.96268766, 2996.68064429, 3003.84708966, 3013.89223987,\n       3027.04532863, 3040.01198374, 3062.63895508, 3086.89266248,\n       3099.17981646, 3102.34842178, 3172.50210628, 3187.1189975 ,\n       3188.51969985, 3214.55881025, 3228.7958675 , 3238.50611714,\n       3248.82703448, 3279.84448657, 3289.34146919, 3301.38475609,\n       3333.8395106 , 3355.25231323, 3384.52886241, 3391.49727411,\n       3403.24212717, 3408.46440261, 3413.66371134, 3450.38710636,\n       3457.16931775, 3484.74463073, 3502.94586131, 3550.988642  ,\n       3565.72323342, 3579.53695662, 3582.40106143, 3585.88143394,\n       3589.39650651, 3670.82654329, 3683.47206453, 3694.71645008,\n       3700.07352574, 3709.85957551, 3722.75159717, 3726.49493679,\n       3745.12510141, 3755.19288499, 3770.2025102 , 3775.6790194 ,\n       3781.47352913, 3789.72847633, 3795.87168665, 3810.35574431,\n       3836.54415497, 3844.39410148, 3857.98249097, 3882.58386563,\n       3911.41491406, 3914.97022003, 3919.48276094, 3921.10363033,\n       3935.17662063, 3936.79119001, 3956.80072362, 4007.83104267,\n       4018.06079318, 4024.34580374, 4041.69663288, 4054.24382062,\n       4059.37502924, 4072.89198528, 4079.78019685, 4082.57310154,\n       4090.06924746, 4162.97433659, 4165.76804128, 4177.07936028,\n       4193.97088865, 4208.10254572, 4237.16219453, 4273.0829882 ,\n       4289.43318232, 4320.15300059, 4348.94218228, 4359.87113397,\n       4368.75488222, 4395.37986028, 4434.43019254, 4446.30111247,\n       4487.50401501, 4493.42649163, 4499.61136868, 4518.32190011,\n       4523.6518424 , 4548.0025833 , 4563.32360903, 4571.80308994,\n       4577.9304669 , 4602.55490826, 4618.65076863, 4620.657372  ,\n       4622.21680795, 4632.01835775, 4658.30603523, 4664.33664536,\n       4672.72662612, 4695.72326475, 4697.52066777, 4701.13657384,\n       4713.67482823, 4725.95894887, 4754.65006372, 4758.96710431,\n       4785.06898148, 4793.2974953 , 4809.67438948, 4811.9124599 ,\n       4826.78288488, 4835.27723248, 4850.69695838, 4857.19263596,\n       4869.99209079, 4914.76839933, 4924.43828224, 4935.38880063,\n       4945.92301833, 4963.13334724, 5010.58482694, 5079.18114215,\n       5103.12444904, 5112.14919753, 5162.36054853, 5177.4047738 ,\n       5179.41274384, 5184.00538489, 5220.18174565, 5228.92946035,\n       5256.96430743, 5266.91419081, 5269.33259487, 5290.38193023,\n       5305.15238837, 5308.23692689, 5316.60244094, 5322.13908357,\n       5353.11003559, 5358.7700451 , 5367.08742573, 5375.89377386,\n       5422.23165169, 5436.59524248, 5458.89701328, 5489.71653171,\n       5498.55617989, 5552.75290425, 5571.68356938, 5589.68523295,\n       5606.47792783, 5610.20573409, 5614.3620744 , 5623.47492304,\n       5659.61875042, 5667.76153076, 5670.51463538, 5675.07494304,\n       5700.37321887, 5714.9763434 , 5726.97149688, 5764.33995964,\n       5782.28848979, 5803.42229196, 5808.32826686, 5826.63363094,\n       5835.67321279, 5862.15625727, 5864.6509948 , 5869.21520246,\n       5882.18212424, 5912.63284206, 5920.91505597, 5928.27196833,\n       5951.9932415 , 5966.06426514, 6012.41064298, 6015.56844829,\n       6035.95144919, 6050.78340743, 6056.64735062, 6059.17362153,\n       6076.90908465, 6087.76660289, 6096.89355155, 6126.46353455,\n       6132.67134498, 6164.35363153, 6167.42420335, 6170.81834238,\n       6181.65279392, 6202.55326235, 6207.18790347, 6231.58147778,\n       6263.9215321 , 6280.13789267, 6283.43469821, 6293.14704785,\n       6298.2157897 , 6333.45081555, 6358.130357  , 6407.80637377,\n       6410.86041224, 6436.85492256, 6447.21107329, 6453.45311711,\n       6460.70859596, 6479.52762757, 6485.28927058, 6496.51925611,\n       6518.19065918, 6526.47713976, 6542.94486742, 6546.96580751,\n       6575.43132199, 6578.84402772, 6596.04105661, 6611.07188185,\n       6650.77038187, 6667.41414316, 6678.40432828, 6686.38824169,\n       6726.33237545, 6758.4692961 , 6797.63592855, 6818.64659717,\n       6842.63137079, 6853.08222168, 6857.48919575, 6902.8079052 ,\n       6913.39288965, 6918.81249875, 6938.12953119, 6951.2483199 ,\n       6953.73019073, 6956.8293626 , 6959.44346699, 6971.63238747,\n       6978.892833  , 7018.47189947, 7053.81952551, 7058.32709975,\n       7062.80640727, 7074.57316037, 7091.44932205, 7111.98552321,\n       7115.19259526, 7140.16930388, 7142.68117477, 7155.96296374,\n       7174.67402851, 7182.09757431, 7183.46974328, 7187.03334926,\n       7195.56839693, 7208.62171886, 7228.33898531, 7254.4494625 ,\n       7259.01750351, 7266.22428228, 7342.13074311, 7360.36267373,\n       7394.03573029, 7426.83325204, 7431.64556013, 7450.05622438,\n       7469.1374231 , 7471.96809452, 7486.32035196, 7513.332164  ,\n       7546.07441899, 7563.28551457, 7595.50140201, 7598.59660721,\n       7604.46218373, 7612.5838307 , 7627.69138941, 7638.76160801,\n       7665.57125304, 7701.66638033, 7728.8930594 , 7742.6666492 ,\n       7775.47037096, 7808.01725896, 7817.34597463, 7866.37205698,\n       7889.24292873, 7912.79856829, 7915.19987233, 7959.13524612,\n       7959.33111312, 8019.64131442, 8022.06605182, 8041.98071861,\n       8082.0673526 , 8128.43903049, 8144.79425796, 8150.42470075,\n       8187.55959646, 8193.72060681, 8201.71725357, 8203.8396238 ,\n       8211.18896948, 8226.12862791, 8284.61772615, 8292.16440549,\n       8301.22515404, 8304.02762542, 8310.0908356 , 8312.34407272,\n       8321.88822208, 8337.01424749, 8351.20810466, 8388.16610007,\n       8394.12507675, 8406.44693078, 8422.89759174, 8426.5639979 ,\n       8446.13816411, 8448.27363437, 8453.42997636, 8464.43086151,\n       8499.63235396, 8505.410697  , 8548.85543664, 8605.91949916,\n       8608.45793675, 8622.90106101, 8624.3223634 , 8635.8304494 ,\n       8640.69185756, 8648.83397124, 8657.21435198, 8666.71166793,\n       8704.35216449, 8768.41293875, 8768.96410635, 8775.31741702,\n       8777.32895373, 8793.05214681, 8809.32654081, 8810.92721016,\n       8813.51794785, 8821.48242789, 8855.49031835, 8868.57757366,\n       8879.02132454, 8914.57165092, 8928.88597496, 8994.39355165,\n       9037.71505775, 9045.65703776, 9087.08630735, 9095.24202104,\n       9101.32316459, 9123.28873482, 9132.4846836 , 9154.22552012,\n       9172.59685097, 9179.25299549, 9234.61418847, 9234.86188889,\n       9265.93054107, 9285.75394104, 9295.47179069, 9303.16163694,\n       9331.55781797, 9368.25687961, 9383.69533888, 9385.36500835,\n       9396.12302642, 9405.32660854, 9465.43670951, 9494.39242481,\n       9521.9897045 , 9563.0945402 , 9569.85395156, 9572.29505566,\n       9596.49352964, 9609.6720851 , 9610.95995393, 9614.93192727,\n       9653.46732533, 9730.04572062, 9762.47530843, 9783.04430964,\n       9785.13211315, 9871.13632427, 9894.11156286, 9906.3774168 ,\n       9936.50223406, 9945.12828188, 9961.63810962, 9963.80847993])\n array([3.96171759e+00, 4.16938460e+00, 4.18601796e+00, ...,\n       9.96477555e+03, 9.96492775e+03, 9.96500745e+03])\n array([5.42462004e+00, 5.43885340e+00, 5.48972015e+00, ...,\n       9.96556815e+03, 9.96567165e+03, 9.96582205e+03])\n array([  19.79911086,   63.58245106,  116.99657411, ..., 9965.19964893,\n       9965.52618281, 9965.52991615])\n array([3.91238417e+00, 3.98438429e+00, 4.56085193e+00, ...,\n       9.96578202e+03, 9.96582972e+03, 9.96592302e+03])\n array([5.51242019e+00, 5.63392040e+00, 7.99375769e+00, ...,\n       9.96507615e+03, 9.96557175e+03, 9.96578978e+03])\n array([5.28445314e+00, 5.28861982e+00, 5.50602018e+00, ...,\n       9.96596595e+03, 9.96597348e+03, 9.96597835e+03])\n array([5.09375282e+00, 5.10958618e+00, 6.34262159e+00, ...,\n       9.88524335e+03, 9.91817807e+03, 9.93763764e+03])\n array([3.82871736e+00, 3.83301737e+00, 3.83991738e+00, ...,\n       9.96448045e+03, 9.96470001e+03, 9.96471838e+03])\n array([3.94085089e+00, 3.94408422e+00, 3.96238426e+00, ...,\n       9.96417415e+03, 9.96418068e+03, 9.96475861e+03])\n array([3.89411747e+00, 3.89865082e+00, 3.91275084e+00, ...,\n       9.96292661e+03, 9.96472568e+03, 9.96473288e+03])\n array([3.94145089e+00, 3.95878425e+00, 4.09785115e+00, ...,\n       9.96244828e+03, 9.96245404e+03, 9.96246594e+03])\n array([3.86468409e+00, 3.87165077e+00, 4.60228533e+00, ...,\n       9.94731219e+03, 9.95342313e+03, 9.96499395e+03])\n array([4.24208473e+00, 4.24615140e+00, 4.25291808e+00, ...,\n       9.96589915e+03, 9.96590292e+03, 9.96603272e+03])\n array([3.89511748e+00, 3.91988418e+00, 4.39171831e+00, ...,\n       9.96537298e+03, 9.96575508e+03, 9.96600372e+03])\n array([4.01301767e+00, 4.01715101e+00, 4.02881770e+00, ...,\n       9.96527948e+03, 9.96539538e+03, 9.96556415e+03])\n array([5.08791948e+00, 1.11841631e+01, 1.16524305e+01, ...,\n       9.96366121e+03, 9.96366668e+03, 9.96384878e+03])\n array([3.85961742e+00, 3.86415076e+00, 3.87211744e+00, ...,\n       9.96469341e+03, 9.96583152e+03, 9.96587575e+03])\n array([4.03541771e+00, 4.64478540e+00, 5.59932034e+00, ...,\n       9.96577542e+03, 9.96584168e+03, 9.96584845e+03])\n array([4.98105263e+00, 1.39250343e+01, 1.40620346e+01, ...,\n       9.94688018e+03, 9.94940346e+03, 9.94949116e+03])\n array([8.67839218e+00, 8.68432552e+00, 1.38138341e+01, ...,\n       9.96483665e+03, 9.96583138e+03, 9.96586352e+03])\n array([3.81328401e+00, 4.20301799e+00, 4.30151816e+00, ...,\n       9.96615988e+03, 9.96617945e+03, 9.96619655e+03])\n array([3.87718411e+00, 4.16558460e+00, 4.30111816e+00, ...,\n       9.96605892e+03, 9.96607105e+03, 9.96608552e+03])\n array([  11.56889703,   11.61916378,   11.67723055, ..., 9962.82924495,\n       9964.92384847, 9966.19411727])\n array([  36.92117295,   36.92640629,   36.93023963, ..., 9965.70398311,\n       9965.7158498 , 9965.72548315])\n array([3.88181745e+00, 4.21241801e+00, 4.25811809e+00, ...,\n       9.96488015e+03, 9.96513568e+03, 9.96543812e+03])\n array([  19.81944422,   42.53034904,   88.64389316, ..., 9965.47398272,\n       9965.51558279, 9965.69244976])\n array([  41.33514703,   44.45111893,   68.4273592 , ..., 9966.11735047,\n       9966.18415058, 9966.19971728])\n array([  66.96382341,   84.82828675,   84.84248677, ..., 9965.23918233,\n       9965.99311693, 9966.1114838 ])\n array([3.92585086e+00, 4.02221769e+00, 4.12521786e+00, ...,\n       9.96586522e+03, 9.96597295e+03, 9.96618718e+03])\n array([7.23085641e+00, 7.78065734e+00, 7.86422414e+00, ...,\n       9.96584828e+03, 9.96602685e+03, 9.96610165e+03])\n array([  11.79383074,   11.92289763,   11.96299769, ..., 9966.11431713,\n       9966.16211721, 9966.20301728])\n array([  11.63306381,   14.45636855,   29.21089333, ..., 9966.0568837 ,\n       9966.09288376, 9966.11855047])\n array([  11.53813031,   20.5180454 ,   23.22991662, ..., 9955.6762996 ,\n       9959.68780634, 9960.41317422])\n array([7.27902316e+00, 8.22992476e+00, 1.13897301e+01, ...,\n       9.96591702e+03, 9.96594958e+03, 9.96605742e+03])\n array([6.41925505e+00, 6.56725530e+00, 6.63982209e+00, ...,\n       9.96605198e+03, 9.96606712e+03, 9.96613622e+03])\n array([4.24265139e+00, 4.78638564e+00, 4.87275245e+00, ...,\n       9.96614438e+03, 9.96617272e+03, 9.96620005e+03])\n array([3.82151735e+00, 3.89218414e+00, 3.97515094e+00, ...,\n       9.96576018e+03, 9.96604035e+03, 9.96617948e+03])\n array([4.82465237e+00, 1.13895634e+01, 3.59614380e+01, ...,\n       9.96600058e+03, 9.96605368e+03, 9.96613232e+03])\n array([4.50011849e+00, 4.67475212e+00, 4.73811889e+00, ...,\n       9.96600362e+03, 9.96608165e+03, 9.96610052e+03])\n array([3.81958402e+00, 3.91988418e+00, 3.98485096e+00, ...,\n       9.96556818e+03, 9.96561548e+03, 9.96574645e+03])\n array([7.06095613e+00, 1.11029962e+01, 1.58230375e+01, ...,\n       9.96546965e+03, 9.96555528e+03, 9.96608548e+03])\n array([  11.44256349,   11.46406352,   11.53806365, ..., 9966.12915049,\n       9966.17581724, 9966.19691727])\n array([4.77925229e+00, 5.58648698e+00, 1.13897967e+01, ...,\n       9.96593542e+03, 9.96603352e+03, 9.96618115e+03])\n array([3.83758405e+00, 3.89498414e+00, 3.94668423e+00, ...,\n       9.96597778e+03, 9.96606988e+03, 9.96612985e+03])\n array([4.06588443e+00, 5.02128603e+00, 5.81458737e+00, ...,\n       9.96562525e+03, 9.96576195e+03, 9.96605088e+03])\n array([3.79101730e+00, 3.85705075e+00, 3.93651755e+00, ...,\n       9.96534475e+03, 9.96539718e+03, 9.96546455e+03])\n array([3.82035068e+00, 3.94031755e+00, 4.04951774e+00, ...,\n       9.96609535e+03, 9.96617122e+03, 9.96619858e+03])\n array([3.83158404e+00, 4.05308441e+00, 4.29515148e+00, ...,\n       9.96574125e+03, 9.96585685e+03, 9.96616965e+03])\n array([3.84728406e+00, 3.93681755e+00, 4.12111786e+00, ...,\n       9.96579798e+03, 9.96588802e+03, 9.96606932e+03])\n array([5.16615294e+00, 5.73638724e+00, 5.93228756e+00, ...,\n       9.96611195e+03, 9.96613408e+03, 9.96618665e+03])\n array([4.29121814e+00, 4.67475212e+00, 4.92571921e+00, ...,\n       9.96608745e+03, 9.96609315e+03, 9.96610908e+03])\n array([3.78891730e+00, 3.87871745e+00, 3.93308421e+00, ...,\n       9.96604525e+03, 9.96606945e+03, 9.96614885e+03])\n array([3.85285074e+00, 3.96211759e+00, 4.03015104e+00, ...,\n       9.96410625e+03, 9.96502935e+03, 9.96530628e+03])\n array([3.87975078e+00, 4.07885112e+00, 4.28435146e+00, ...,\n       9.96485365e+03, 9.96529338e+03, 9.96543722e+03])\n array([3.78405062e+00, 3.87061743e+00, 3.97765095e+00, ...,\n       9.96606005e+03, 9.96609285e+03, 9.96618348e+03])\n array([3.85165074e+00, 4.11048450e+00, 4.37698495e+00, ...,\n       9.96597298e+03, 9.96598698e+03, 9.96599098e+03])\n array([6.62848873e+00, 7.38809001e+00, 8.83232577e+00, ...,\n       9.96471638e+03, 9.96557875e+03, 9.96567998e+03])\n array([3.78725063e+00, 3.83938405e+00, 3.95698425e+00, ...,\n       9.96595042e+03, 9.96596582e+03, 9.96618178e+03])\n array([5.14935292e+00, 6.36202162e+00, 6.62875540e+00, ...,\n       9.96615825e+03, 9.96618195e+03, 9.96620142e+03])\n array([3.78178395e+00, 3.86921743e+00, 3.94541756e+00, ...,\n       9.96591205e+03, 9.96594112e+03, 9.96620465e+03])\n array([3.92838420e+00, 4.00961767e+00, 4.15771792e+00, ...,\n       9.96508248e+03, 9.96574905e+03, 9.96603385e+03])\n array([3.98695096e+00, 4.85385242e+00, 5.69155383e+00, ...,\n       9.96595848e+03, 9.96604758e+03, 9.96612452e+03])\n array([  29.39599364,   36.72360595,   47.50292405, ..., 9966.12655049,\n       9966.18335058, 9966.20335062])\n array([3.99648431e+00, 4.35725159e+00, 4.56121859e+00, ...,\n       9.96569148e+03, 9.96596665e+03, 9.96615342e+03])\n array([4.70781884e+00, 4.92281920e+00, 1.04714952e+01, ...,\n       9.96386811e+03, 9.96424821e+03, 9.96586942e+03])\n array([3.78421729e+00, 3.87281744e+00, 4.24018472e+00, ...,\n       9.96444891e+03, 9.96454808e+03, 9.96521515e+03])\n array([4.14701790e+00, 4.25861809e+00, 4.67765212e+00, ...,\n       9.96571295e+03, 9.96579425e+03, 9.96596725e+03])\n array([4.75941893e+00, 4.88748581e+00, 5.00521934e+00, ...,\n       9.96292795e+03, 9.96301791e+03, 9.96376105e+03])\n array([9.08469286e+00, 9.10392622e+00, 9.80496074e+00, ...,\n       9.96537292e+03, 9.96570698e+03, 9.96605958e+03])\n array([4.97878596e+00, 5.10041950e+00, 5.12048620e+00, ...,\n       9.96608538e+03, 9.96612768e+03, 9.96620608e+03])\n array([3.78471729e+00, 3.88561746e+00, 3.91531751e+00, ...,\n       9.96576895e+03, 9.96584578e+03, 9.96613538e+03])\n array([ 345.9268253 ,  376.75744375,  376.7676771 , ..., 9961.2497423 ,\n       9961.90411006, 9964.37038087])\n array([7.23725642e+00, 9.11269291e+00, 1.13698634e+01, ...,\n       9.94409401e+03, 9.95105213e+03, 9.95137299e+03])\n array([3.78818396e+00, 3.84791740e+00, 3.88341746e+00, ...,\n       9.96584715e+03, 9.96601835e+03, 9.96602965e+03])\n array([  45.31002037,   52.89136644,   85.66798816, ..., 9938.85093801,\n       9947.37055232, 9948.95572165])\n array([  28.25505839,   28.48369211,   41.16611341, ..., 9966.10015044,\n       9966.11231713, 9966.12241715])\n array([6.64392209e+00, 2.83044585e+01, 4.45513524e+01, ...,\n       9.96334828e+03, 9.96399648e+03, 9.96588728e+03])\n array([5.05041942e+00, 5.08655281e+00, 6.45075510e+00, ...,\n       9.96591635e+03, 9.96601468e+03, 9.96604158e+03])\n array([4.23671805e+00, 4.35858492e+00, 4.36101826e+00, ...,\n       9.96605992e+03, 9.96607082e+03, 9.96612578e+03])\n array([5.09981950e+00, 5.72732055e+00, 5.76735395e+00, ...,\n       9.94829099e+03, 9.96195198e+03, 9.96547162e+03])\n array([  14.86783591,   78.74540986,  331.55576783, ..., 9944.94094824,\n       9946.28678383, 9946.85295145])\n array([4.20005132e+00, 4.24348473e+00, 5.09918616e+00, ...,\n       9.94896545e+03, 9.95094252e+03, 9.96599108e+03])\n array([3.77691728e+00, 3.79121730e+00, 3.84015072e+00, ...,\n       9.96596862e+03, 9.96601658e+03, 9.96616328e+03])\n array([6.80488903e+00, 7.20142303e+00, 8.35845831e+00, ...,\n       9.96609038e+03, 9.96613465e+03, 9.96618158e+03])\n array([  11.50256359,   36.63103913,   41.20438014, ..., 9948.24805379,\n       9965.89218343, 9966.09365043])\n array([  85.09125386,   85.32295425,   89.59579476, ..., 9953.83439651,\n       9959.16557213, 9963.26064567])\n array([6.55332194e+00, 1.28261991e+01, 8.48889869e+01, 1.49810763e+02,\n       1.50254963e+02, 1.70391497e+02, 1.85190589e+02, 2.70481065e+02,\n       3.14241905e+02, 3.20780950e+02, 3.65383425e+02, 4.10085133e+02,\n       4.10881234e+02, 4.46511828e+02, 5.08436832e+02, 5.31256570e+02,\n       5.49375200e+02, 5.80237186e+02, 5.86015062e+02, 5.87739165e+02,\n       6.36037279e+02, 6.44778294e+02, 6.52703841e+02, 6.53358842e+02,\n       6.77282682e+02, 7.13958410e+02, 8.70486573e+02, 9.38071853e+02,\n       9.40340490e+02, 9.90196341e+02, 1.12092449e+03, 1.41890169e+03,\n       1.58604401e+03, 1.60115490e+03, 1.60688208e+03, 1.61965490e+03,\n       1.63795250e+03, 1.65092928e+03, 1.72799578e+03, 1.76446691e+03,\n       1.77267216e+03, 1.78303847e+03, 1.79582089e+03, 1.81250309e+03,\n       1.86251994e+03, 1.87418693e+03, 1.91471109e+03, 1.91477283e+03,\n       1.94914762e+03, 2.03196479e+03, 2.03492880e+03, 2.03645563e+03,\n       2.06766222e+03, 2.08328504e+03, 2.08414724e+03, 2.14175877e+03,\n       2.18548108e+03, 2.26195774e+03, 2.27322696e+03, 2.28982052e+03,\n       2.32073611e+03, 2.32134938e+03, 2.32649185e+03, 2.33006776e+03,\n       2.37988241e+03, 2.39825111e+03, 2.44184321e+03, 2.44297695e+03,\n       2.44304558e+03, 2.44923822e+03, 2.44950043e+03, 2.45546390e+03,\n       2.47471900e+03, 2.51185953e+03, 2.54030181e+03, 2.55720364e+03,\n       2.56387992e+03, 2.56475945e+03, 2.56719466e+03, 2.56834416e+03,\n       2.56837272e+03, 2.56921199e+03, 2.58460072e+03, 2.58556745e+03,\n       2.61804707e+03, 2.61808481e+03, 2.61840078e+03, 2.62062005e+03,\n       2.62100268e+03, 2.62124481e+03, 2.62234978e+03, 2.62415339e+03,\n       2.66621119e+03, 2.68405469e+03, 2.69171823e+03, 2.70492565e+03,\n       2.71881991e+03, 2.72450512e+03, 2.73830531e+03, 2.73839398e+03,\n       2.74364115e+03, 2.75182467e+03, 2.76953653e+03, 2.77161243e+03,\n       2.77346860e+03, 2.77902671e+03, 2.79982205e+03, 2.81073250e+03,\n       2.85186790e+03, 2.85325454e+03, 2.87173980e+03, 2.87505801e+03,\n       2.87549567e+03, 2.87676091e+03, 2.91279917e+03, 2.93661251e+03,\n       2.94172509e+03, 2.96902986e+03, 2.97368087e+03, 2.99650641e+03,\n       3.00758366e+03, 3.00797133e+03, 3.02672939e+03, 3.03965285e+03,\n       3.08693293e+03, 3.08917010e+03, 3.08927547e+03, 3.08934520e+03,\n       3.08941343e+03, 3.09934925e+03, 3.11740751e+03, 3.14630443e+03,\n       3.14688280e+03, 3.17731958e+03, 3.17737748e+03, 3.17826878e+03,\n       3.18050015e+03, 3.20533473e+03, 3.20845563e+03, 3.21158841e+03,\n       3.21434454e+03, 3.22013549e+03, 3.23124464e+03, 3.24515143e+03,\n       3.26122482e+03, 3.28822500e+03, 3.30757420e+03, 3.31868795e+03,\n       3.32772850e+03, 3.32797070e+03, 3.32866710e+03, 3.33531125e+03,\n       3.33639281e+03, 3.36114996e+03, 3.38514976e+03, 3.41257864e+03,\n       3.42170076e+03, 3.42350916e+03, 3.42416836e+03, 3.42450066e+03,\n       3.42567973e+03, 3.42826760e+03, 3.43234931e+03, 3.45743538e+03,\n       3.51472838e+03, 3.53642935e+03, 3.55579648e+03, 3.58560063e+03,\n       3.60114679e+03, 3.61477762e+03, 3.63120294e+03, 3.63211924e+03,\n       3.64962664e+03, 3.71279218e+03, 3.71950829e+03, 3.71961033e+03,\n       3.73386625e+03, 3.76935314e+03, 3.88136216e+03, 3.88992104e+03,\n       3.89061045e+03, 3.90502984e+03, 3.93100871e+03, 3.93223262e+03,\n       3.96508067e+03, 3.99644986e+03, 3.99645886e+03, 3.99673879e+03,\n       3.99703259e+03, 3.99705232e+03, 3.99743423e+03, 4.09124758e+03,\n       4.09207382e+03, 4.10309700e+03, 4.10452507e+03, 4.10563101e+03,\n       4.11995753e+03, 4.11996043e+03, 4.11999320e+03, 4.14435427e+03,\n       4.15748083e+03, 4.17668589e+03, 4.18057267e+03, 4.18317367e+03,\n       4.18336344e+03, 4.18422457e+03, 4.18476744e+03, 4.18507437e+03,\n       4.18532644e+03, 4.18552907e+03, 4.18633851e+03, 4.18641661e+03,\n       4.18760551e+03, 4.18804601e+03, 4.18808018e+03, 4.19327392e+03,\n       4.20843858e+03, 4.21523316e+03, 4.22315997e+03, 4.22364017e+03,\n       4.22556534e+03, 4.25359592e+03, 4.26451237e+03, 4.30326137e+03,\n       4.30526014e+03, 4.31015408e+03, 4.31039805e+03, 4.31243489e+03,\n       4.32694518e+03, 4.36131450e+03, 4.36315867e+03, 4.40019797e+03,\n       4.40231084e+03, 4.42171454e+03, 4.42255657e+03, 4.42351187e+03,\n       4.42608795e+03, 4.42633571e+03, 4.42642828e+03, 4.43055095e+03,\n       4.43696623e+03, 4.43857693e+03, 4.44378444e+03, 4.47597313e+03,\n       4.47921780e+03, 4.47979820e+03, 4.48034810e+03, 4.48041560e+03,\n       4.48369491e+03, 4.48852922e+03, 4.50735435e+03, 4.51932070e+03,\n       4.52461191e+03, 4.53671450e+03, 4.54546578e+03, 4.54552385e+03,\n       4.54557081e+03, 4.55070545e+03, 4.55171092e+03, 4.55328516e+03,\n       4.56581095e+03, 4.56675135e+03, 4.57583206e+03, 4.57696350e+03,\n       4.58394614e+03, 4.58625055e+03, 4.59151812e+03, 4.59578183e+03,\n       4.59792150e+03, 4.59828333e+03, 4.59985994e+03, 4.59991304e+03,\n       4.60000610e+03, 4.60061574e+03, 4.60220414e+03, 4.60271171e+03,\n       4.64199464e+03, 4.66552575e+03, 4.66555818e+03, 4.66667215e+03,\n       4.67272633e+03, 4.67718687e+03, 4.71155316e+03, 4.71388836e+03,\n       4.72961726e+03, 4.73003512e+03, 4.73134312e+03, 4.73852760e+03,\n       4.73914607e+03, 4.76064251e+03, 4.76933266e+03, 4.77507696e+03,\n       4.78401201e+03, 4.78539322e+03, 4.78670992e+03, 4.80001681e+03,\n       4.81559727e+03, 4.83171749e+03, 4.85857027e+03, 4.87544040e+03,\n       4.95669117e+03, 4.98519048e+03, 5.01247900e+03, 5.02369558e+03,\n       5.03354537e+03, 5.03551357e+03, 5.03635897e+03, 5.03707920e+03,\n       5.04281641e+03, 5.05151013e+03, 5.06029624e+03, 5.09937581e+03,\n       5.10191681e+03, 5.10388412e+03, 5.10389552e+03, 5.10490889e+03,\n       5.10542082e+03, 5.12321732e+03, 5.12443362e+03, 5.12487339e+03,\n       5.15377600e+03, 5.15488817e+03, 5.15689414e+03, 5.15716234e+03,\n       5.16621592e+03, 5.16661172e+03, 5.16725419e+03, 5.17073410e+03,\n       5.17117920e+03, 5.17233000e+03, 5.19954894e+03, 5.20208942e+03,\n       5.21083963e+03, 5.21950768e+03, 5.22260132e+03, 5.24481195e+03,\n       5.24927016e+03, 5.25195983e+03, 5.25521027e+03, 5.26856849e+03,\n       5.27387300e+03, 5.28004028e+03, 5.29833914e+03, 5.30451889e+03,\n       5.31205737e+03, 5.31637701e+03, 5.32469362e+03, 5.38714443e+03,\n       5.39978505e+03, 5.43118727e+03, 5.43761178e+03, 5.44237202e+03,\n       5.44541012e+03, 5.45187363e+03, 5.45494864e+03, 5.47081037e+03,\n       5.47826061e+03, 5.48166785e+03, 5.48707719e+03, 5.48765253e+03,\n       5.48950356e+03, 5.50414649e+03, 5.51309614e+03, 5.51868008e+03,\n       5.53688861e+03, 5.56418016e+03, 5.60665913e+03, 5.61707791e+03,\n       5.62752850e+03, 5.63285014e+03, 5.64413162e+03, 5.65313051e+03,\n       5.65678351e+03, 5.69176104e+03, 5.70204219e+03, 5.71916415e+03,\n       5.72004079e+03, 5.72160145e+03, 5.76185522e+03, 5.76740543e+03,\n       5.77010810e+03, 5.78139565e+03, 5.79188684e+03, 5.79455518e+03,\n       5.79941165e+03, 5.80602730e+03, 5.81278254e+03, 5.82844900e+03,\n       5.84616060e+03, 5.84768473e+03, 5.85185477e+03, 5.85276261e+03,\n       5.86743777e+03, 5.86893650e+03, 5.87773245e+03, 5.88495273e+03,\n       5.90977427e+03, 5.90998840e+03, 5.91001400e+03, 5.91509141e+03,\n       5.91736042e+03, 5.91981465e+03, 5.92031042e+03, 5.92039229e+03,\n       5.92307249e+03, 5.92444246e+03, 5.92723973e+03, 5.93215571e+03,\n       5.93814445e+03, 5.94099859e+03, 5.94129469e+03, 5.94425113e+03,\n       5.94549076e+03, 5.95036837e+03, 5.95453665e+03, 5.95530521e+03,\n       5.96251709e+03, 5.96862610e+03, 5.97431148e+03, 5.97611895e+03,\n       5.97613548e+03, 5.97881695e+03, 5.98369736e+03, 5.98675933e+03,\n       5.98919714e+03, 5.99136761e+03, 5.99354108e+03, 5.99688445e+03,\n       5.99859865e+03, 6.00506773e+03, 6.01250494e+03, 6.01524255e+03,\n       6.03925155e+03, 6.04409306e+03, 6.04515350e+03, 6.06039812e+03,\n       6.06611767e+03, 6.06916434e+03, 6.06923561e+03, 6.07040627e+03,\n       6.07217988e+03, 6.07434728e+03, 6.07507595e+03, 6.07736942e+03,\n       6.07737109e+03, 6.08749100e+03, 6.09968809e+03, 6.10178559e+03,\n       6.11020027e+03, 6.11642398e+03, 6.11702655e+03, 6.14561820e+03,\n       6.14713084e+03, 6.16669037e+03, 6.18470943e+03, 6.18515020e+03,\n       6.19290725e+03, 6.21432242e+03, 6.22683627e+03, 6.22845414e+03,\n       6.22978297e+03, 6.24715507e+03, 6.25002484e+03, 6.25153214e+03,\n       6.25514118e+03, 6.25604099e+03, 6.25647372e+03, 6.25649412e+03,\n       6.25860629e+03, 6.25914379e+03, 6.25926976e+03, 6.25979039e+03,\n       6.26173573e+03, 6.27378352e+03, 6.28031483e+03, 6.28231436e+03,\n       6.28301136e+03, 6.28305873e+03, 6.28314590e+03, 6.28350226e+03,\n       6.28403033e+03, 6.28691017e+03, 6.29977366e+03, 6.30299176e+03,\n       6.30776771e+03, 6.31703815e+03, 6.31932579e+03, 6.31985043e+03,\n       6.32537077e+03, 6.32551670e+03, 6.32729794e+03, 6.33233278e+03,\n       6.34471737e+03, 6.34741377e+03, 6.34901198e+03, 6.34904121e+03,\n       6.35166931e+03, 6.36177883e+03, 6.36191203e+03, 6.36429270e+03,\n       6.36536327e+03, 6.36537024e+03, 6.36812064e+03, 6.36824517e+03,\n       6.36836484e+03, 6.37616902e+03, 6.38262013e+03, 6.38645290e+03,\n       6.38765357e+03, 6.40751331e+03, 6.44582707e+03, 6.47808493e+03,\n       6.50926231e+03, 6.54190090e+03, 6.55034838e+03, 6.56787838e+03,\n       6.58403887e+03, 6.58415777e+03, 6.59826506e+03, 6.63827759e+03,\n       6.66196670e+03, 6.68684201e+03, 6.69412715e+03, 6.69797449e+03,\n       6.69857006e+03, 6.70168120e+03, 6.70942648e+03, 6.71135672e+03,\n       6.71919296e+03, 6.72843038e+03, 6.72859265e+03, 6.73236822e+03,\n       6.73565809e+03, 6.74114827e+03, 6.74622438e+03, 6.75223352e+03,\n       6.76396334e+03, 6.76669681e+03, 6.77546266e+03, 6.78150460e+03,\n       6.78848238e+03, 6.79070512e+03, 6.80367967e+03, 6.80471254e+03,\n       6.80896345e+03, 6.82326390e+03, 6.83475966e+03, 6.83867970e+03,\n       6.83873443e+03, 6.84780545e+03, 6.85303662e+03, 6.86960262e+03,\n       6.86967008e+03, 6.87478856e+03, 6.87900953e+03, 6.90342211e+03,\n       6.91224972e+03, 6.91418419e+03, 6.91451812e+03, 6.92086267e+03,\n       6.92160724e+03, 6.92857972e+03, 6.93121879e+03, 6.94324811e+03,\n       6.94843778e+03, 6.94921982e+03, 6.94928715e+03, 6.94950175e+03,\n       6.95668563e+03, 6.96686985e+03, 6.96943362e+03, 6.97009138e+03,\n       6.97112695e+03, 6.97342436e+03, 6.97676580e+03, 6.99176299e+03,\n       6.99663080e+03, 7.02873558e+03, 7.03775733e+03, 7.04669951e+03,\n       7.05511209e+03, 7.06145060e+03, 7.06751392e+03, 7.07329662e+03,\n       7.07652560e+03, 7.07821533e+03, 7.07822803e+03, 7.08452861e+03,\n       7.08490754e+03, 7.08866925e+03, 7.08920222e+03, 7.09249889e+03,\n       7.09772537e+03, 7.10007917e+03, 7.10471301e+03, 7.10603325e+03,\n       7.11902667e+03, 7.12272491e+03, 7.13648846e+03, 7.15208906e+03,\n       7.15653166e+03, 7.15762780e+03, 7.16123207e+03, 7.16636485e+03,\n       7.17043309e+03, 7.20795092e+03, 7.20885209e+03, 7.22380631e+03,\n       7.23163499e+03, 7.24436678e+03, 7.25229889e+03, 7.25633110e+03,\n       7.26462928e+03, 7.29342043e+03, 7.33817570e+03, 7.34518661e+03,\n       7.37044309e+03, 7.37380133e+03, 7.37518553e+03, 7.37645653e+03,\n       7.38201941e+03, 7.38996462e+03, 7.39214969e+03, 7.39949994e+03,\n       7.40410701e+03, 7.40621992e+03, 7.41006696e+03, 7.41697910e+03,\n       7.42510568e+03, 7.43582667e+03, 7.44120484e+03, 7.44264441e+03,\n       7.44574958e+03, 7.46373975e+03, 7.47052679e+03, 7.47228310e+03,\n       7.49750807e+03, 7.49754617e+03, 7.50898819e+03, 7.52558758e+03,\n       7.52659725e+03, 7.52882349e+03, 7.52961449e+03, 7.53029786e+03,\n       7.53113196e+03, 7.54199001e+03, 7.54235628e+03, 7.55934341e+03,\n       7.56924612e+03, 7.57750631e+03, 7.58010371e+03, 7.59023769e+03,\n       7.59311716e+03, 7.61144236e+03, 7.63320243e+03, 7.65044976e+03,\n       7.65090116e+03, 7.65466020e+03, 7.67380580e+03, 7.67494387e+03,\n       7.67916571e+03, 7.70913829e+03, 7.71098903e+03, 7.71323160e+03,\n       7.71599974e+03, 7.71641524e+03, 7.72701696e+03, 7.74279888e+03,\n       7.74640159e+03, 7.75137746e+03, 7.77053390e+03, 7.77330783e+03,\n       7.77589477e+03, 7.78236832e+03, 7.80863413e+03, 7.80949536e+03,\n       7.80992966e+03, 7.81327680e+03, 7.82105658e+03, 7.83342543e+03,\n       7.83613097e+03, 7.83766048e+03, 7.84244202e+03, 7.85493200e+03,\n       7.86002901e+03, 7.86112308e+03, 7.86776193e+03, 7.87219027e+03,\n       7.87234360e+03, 7.87317260e+03, 7.87403317e+03, 7.87754578e+03,\n       7.87938945e+03, 7.88813989e+03, 7.89785801e+03, 7.90110195e+03,\n       7.90681539e+03, 7.91917898e+03, 7.93248593e+03, 7.93335084e+03,\n       7.95800994e+03, 7.99130787e+03, 7.99346500e+03, 8.02817136e+03,\n       8.04279895e+03, 8.05602181e+03, 8.07377997e+03, 8.07556358e+03,\n       8.07677174e+03, 8.07730361e+03, 8.08395032e+03, 8.08562906e+03,\n       8.08634179e+03, 8.08881923e+03, 8.11304317e+03, 8.11702368e+03,\n       8.12507306e+03, 8.12978407e+03, 8.13487747e+03, 8.13626064e+03,\n       8.14803906e+03, 8.17471837e+03, 8.17474174e+03, 8.17509981e+03,\n       8.17863408e+03, 8.17985372e+03, 8.18008265e+03, 8.18580009e+03,\n       8.22322232e+03, 8.22541603e+03, 8.22563083e+03, 8.23246924e+03,\n       8.23271254e+03, 8.23490974e+03, 8.24594029e+03, 8.24893983e+03,\n       8.24919550e+03, 8.25281674e+03, 8.26059195e+03, 8.26153452e+03,\n       8.27043254e+03, 8.27144164e+03, 8.28146309e+03, 8.29523971e+03,\n       8.29935235e+03, 8.30401979e+03, 8.30471866e+03, 8.31817338e+03,\n       8.32450803e+03, 8.32479073e+03, 8.33100820e+03, 8.34463783e+03,\n       8.34484459e+03, 8.35470984e+03, 8.35580068e+03, 8.35712468e+03,\n       8.36516836e+03, 8.38519600e+03, 8.39557458e+03, 8.41420291e+03,\n       8.42365606e+03, 8.43435894e+03, 8.43650348e+03, 8.45013414e+03,\n       8.46636140e+03, 8.46843323e+03, 8.47264034e+03, 8.47286641e+03,\n       8.47694452e+03, 8.47705768e+03, 8.53232638e+03, 8.56427460e+03,\n       8.60442353e+03, 8.62920350e+03, 8.65760702e+03, 8.66805254e+03,\n       8.66851894e+03, 8.67153321e+03, 8.67527348e+03, 8.67552952e+03,\n       8.69607032e+03, 8.69786145e+03, 8.72507333e+03, 8.75621608e+03,\n       8.76310086e+03, 8.77362205e+03, 8.80855471e+03, 8.85410818e+03,\n       8.86096679e+03, 8.86762311e+03, 8.87719119e+03, 8.89578382e+03,\n       8.90953994e+03, 8.91344502e+03, 8.92127043e+03, 8.92436890e+03,\n       8.93092468e+03, 8.93512179e+03, 8.95474292e+03, 8.97447182e+03,\n       8.97529475e+03, 8.97533432e+03, 8.98627884e+03, 9.01205655e+03,\n       9.01579959e+03, 9.06159986e+03, 9.08643181e+03, 9.08932908e+03,\n       9.09322812e+03, 9.09393032e+03, 9.09934159e+03, 9.11692359e+03,\n       9.12144733e+03, 9.12504627e+03, 9.13448145e+03, 9.13466042e+03,\n       9.13921979e+03, 9.17585136e+03, 9.21406005e+03, 9.22458180e+03,\n       9.23543352e+03, 9.23558309e+03, 9.23998386e+03, 9.24400507e+03,\n       9.24701484e+03, 9.25437906e+03, 9.30289907e+03, 9.30955481e+03,\n       9.32078887e+03, 9.32602524e+03, 9.32908035e+03, 9.33375415e+03,\n       9.33856440e+03, 9.34201020e+03, 9.34257724e+03, 9.34489781e+03,\n       9.36746988e+03, 9.37057405e+03, 9.39468126e+03, 9.41633896e+03,\n       9.44538508e+03, 9.44998708e+03, 9.45019635e+03, 9.45821996e+03,\n       9.48622331e+03, 9.54607941e+03, 9.54645585e+03, 9.54919728e+03,\n       9.58089717e+03, 9.63575510e+03, 9.66119704e+03, 9.69464599e+03,\n       9.80743402e+03, 9.84075767e+03, 9.84108314e+03, 9.90756592e+03,\n       9.90833145e+03, 9.91600243e+03, 9.95964584e+03])\n array([  36.40503875,  104.95898723,  114.2080361 , ..., 9966.10011711,\n       9966.1122838 , 9966.12238381])\n array([5.06138610e+00, 8.16342465e+00, 8.32929159e+00, ...,\n       9.96546702e+03, 9.96548958e+03, 9.96589408e+03])\n array([  84.24971911,   85.05912047,   85.08172051, ..., 9965.9933836 ,\n       9966.0761504 , 9966.14198385])\n array([6.62785540e+00, 7.18515634e+00, 1.14815636e+01, ...,\n       9.96604542e+03, 9.96605652e+03, 9.96612522e+03])\n array([3.95345091e+00, 3.96421759e+00, 4.21755135e+00, ...,\n       9.93850284e+03, 9.94901979e+03, 9.95074039e+03])\n array([6.33206387e+00, 8.88730551e+00, 9.00390589e+00, ...,\n       9.96529965e+03, 9.96601745e+03, 9.96604669e+03])\n array([  10.18774307,   10.39924375,   10.7919117 , ..., 9966.10885272,\n       9966.15501954, 9966.17681961])\n array([  17.36489972,   87.24486006,   90.06453589, ..., 9966.09765268,\n       9966.12875278, 9966.17881961])\n array([  84.57711806,   88.50359749,   89.30403342, ..., 9965.62648449,\n       9965.77061829, 9965.93225215])\n array([3.82652240e+00, 3.92445605e+00, 4.05575648e+00, ...,\n       9.96580562e+03, 9.96594742e+03, 9.96612799e+03])\n array([7.08603299e+00, 7.27286693e+00, 1.25757842e+01, ...,\n       9.96602469e+03, 9.96615635e+03, 9.96618715e+03])\n array([  95.38591984,   98.1622622 ,   98.20986235, ..., 9965.9380855 ,\n       9966.0515192 , 9966.20558637])\n array([  23.301919  ,   37.8616663 ,   39.31413769, ..., 9950.74546948,\n       9965.94075217, 9966.06455258])\n array([3.80628900e+00, 3.81332236e+00, 3.82705574e+00, ...,\n       9.96618349e+03, 9.96619852e+03, 9.96620365e+03])\n array([  85.04018623,   85.12321984,   85.22488683, ..., 9953.74037921,\n       9953.82411281, 9953.90951309])\n array([3.80408900e+00, 3.81895571e+00, 3.87082255e+00, ...,\n       9.96616835e+03, 9.96618959e+03, 9.96620175e+03])\n array([3.79895565e+00, 3.81812237e+00, 3.83028908e+00, ...,\n       9.96613419e+03, 9.96615329e+03, 9.96618829e+03])\n array([  11.63494777,   19.26413922,   24.49838956, ..., 9965.98685232,\n       9966.08595265, 9966.17795294])\n array([  25.51262618,  169.57246085,  187.72415315, ..., 9965.79508503,\n       9965.86118525, 9965.91611876])\n array([  97.40995975,   97.49946004,   97.50982674, ..., 9943.18057823,\n       9944.87555041, 9950.98237025])\n array([6.33129721e+00, 7.14276651e+00, 1.05797443e+01, ...,\n       9.91948083e+03, 9.93359611e+03, 9.93422762e+03])\n array([3.91208935e+00, 3.95522282e+00, 3.97075620e+00, ...,\n       9.94727072e+03, 9.94734566e+03, 9.94745793e+03])\n array([  32.41894862,  103.95504768,  119.39153116, ..., 9965.64815122,\n       9965.95391888, 9966.0305858 ])\n array([3.87618923e+00, 3.93285608e+00, 3.96695619e+00, ...,\n       9.96608269e+03, 9.96614932e+03, 9.96618309e+03])\n array([3.84405579e+00, 4.00065630e+00, 6.42843085e+00, ...,\n       9.94991340e+03, 9.94992157e+03, 9.94995710e+03])\n array([3.90662266e+00, 3.92178938e+00, 3.94475612e+00, ...,\n       9.96552688e+03, 9.96577255e+03, 9.96605622e+03])\n array([3.80768901e+00, 3.84042245e+00, 3.88452259e+00, ...,\n       9.96581702e+03, 9.96592019e+03, 9.96596892e+03])\n array([3.81828904e+00, 3.86038918e+00, 3.86858920e+00, ...,\n       9.96612019e+03, 9.96615615e+03, 9.96618555e+03])\n array([  17.69626746,   19.63427376,   20.38534286, ..., 9959.11736334,\n       9965.83821851, 9965.97188561])\n array([3.96908953e+00, 3.99932296e+00, 4.18119022e+00, ...,\n       9.96603092e+03, 9.96613072e+03, 9.96618299e+03])\n array([  11.71658137,   11.74804814,   11.76964821, ..., 9965.58388435,\n       9965.6002844 , 9965.72291813])\n array([  11.80054831,   11.82418172,   11.87204854, ..., 9950.25266788,\n       9965.54051754, 9965.58011767])\n array([4.08668991e+00, 5.05312639e+00, 7.85696883e+00, ...,\n       9.96612002e+03, 9.96617015e+03, 9.96617932e+03])\n array([3.80375566e+00, 3.83945578e+00, 3.87135588e+00, ...,\n       9.96613172e+03, 9.96616562e+03, 9.96617629e+03])\n array([3.85915584e+00, 3.86515586e+00, 3.86908921e+00, ...,\n       9.96605822e+03, 9.96609062e+03, 9.96610315e+03])\n array([3.83295576e+00, 3.87608923e+00, 3.91012267e+00, ...,\n       9.96613405e+03, 9.96615672e+03, 9.96616785e+03])\n array([3.91812270e+00, 3.92572272e+00, 3.93025607e+00, ...,\n       9.96619802e+03, 9.96620382e+03, 9.96620795e+03])\n array([3.81038902e+00, 3.87035588e+00, 3.89402262e+00, ...,\n       9.96559965e+03, 9.96565622e+03, 9.96578382e+03])\n array([3.80282232e+00, 3.82228905e+00, 3.92998940e+00, ...,\n       9.96606772e+03, 9.96611359e+03, 9.96612942e+03])\n array([3.79848898e+00, 3.83175575e+00, 3.84575580e+00, ...,\n       9.96619332e+03, 9.96620232e+03, 9.96620849e+03])\n array([3.80052232e+00, 3.80468900e+00, 3.80942235e+00, ...,\n       9.96619779e+03, 9.96620092e+03, 9.96620625e+03])\n array([3.88298925e+00, 3.90408932e+00, 3.97565622e+00, ...,\n       9.96612422e+03, 9.96617655e+03, 9.96619949e+03])\n array([  13.51968722,   19.81937436,   22.0905484 , ..., 9950.21493442,\n       9965.45491726, 9965.46368396])\n array([4.55315810e+00, 4.91325927e+00, 5.31519390e+00, ...,\n       9.96510132e+03, 9.96517352e+03, 9.96545592e+03])\n array([  15.7682612 ,   40.02827334,   72.0288773 , ..., 9966.05305254,\n       9966.07261927, 9966.15875288])\n array([4.20922364e+00, 4.25835714e+00, 4.32345735e+00, ...,\n       9.96586129e+03, 9.96590295e+03, 9.96593805e+03])\n array([3.84275579e+00, 3.90408932e+00, 3.91945604e+00, ...,\n       9.96618655e+03, 9.96619419e+03, 9.96619695e+03])\n array([3.83185575e+00, 4.01645635e+00, 4.04178977e+00, ...,\n       9.96613712e+03, 9.96615962e+03, 9.96618985e+03])\n array([3.80332233e+00, 3.85975584e+00, 3.88048924e+00, ...,\n       9.96535825e+03, 9.96542148e+03, 9.96544562e+03])\n array([ 139.24442899,  140.63113349,  186.37491543, ..., 9961.00536947,\n       9961.33347054, 9962.08587298])\n array([4.61052495e+00, 4.80242557e+00, 4.82749232e+00, ...,\n       9.96392011e+03, 9.96412095e+03, 9.96462261e+03])\n array([  68.35819871,  172.91757171,  207.15624961, ..., 9960.53276794,\n       9960.65266833, 9966.18018629])\n array([3.98058957e+00, 4.98809284e+00, 5.10979324e+00, ...,\n       9.96527598e+03, 9.96566535e+03, 9.96583052e+03])\n array([3.85348916e+00, 3.88315592e+00, 4.03378974e+00, ...,\n       9.96532815e+03, 9.96547565e+03, 9.96557678e+03])\n array([4.48029119e+00, 4.48502454e+00, 4.48992456e+00, ...,\n       9.96590075e+03, 9.96590319e+03, 9.96600249e+03])\n array([4.70532526e+00, 4.89035919e+00, 8.51570430e+00, ...,\n       9.96227827e+03, 9.96369321e+03, 9.96369848e+03])\n array([4.54949142e+00, 6.72819849e+00, 8.32267034e+00, ...,\n       9.96552525e+03, 9.96563248e+03, 9.96563938e+03])\n array([3.79122229e+00, 3.95045614e+00, 3.95438948e+00, ...,\n       9.96578529e+03, 9.96594155e+03, 9.96618362e+03])\n array([3.80105565e+00, 3.81068902e+00, 3.82402239e+00, ...,\n       9.96612132e+03, 9.96612692e+03, 9.96617369e+03])\n array([3.92685606e+00, 3.97695622e+00, 4.11525667e+00, ...,\n       9.96593119e+03, 9.96606639e+03, 9.96615659e+03])\n array([4.89405920e+00, 5.46856107e+00, 5.47309442e+00, ...,\n       9.96425708e+03, 9.96494215e+03, 9.96495308e+03])\n array([4.09515661e+00, 4.50325793e+00, 4.77342548e+00, ...,\n       9.96606685e+03, 9.96615389e+03, 9.96616685e+03])\n array([ 179.36139265,  312.12275727,  312.91555985, ..., 9950.65266918,\n       9952.4060082 , 9961.98570599])\n array([  11.14937952,   20.70791058,   20.71244392, ..., 9965.07701603,\n       9965.25518328, 9965.39245039])\n array([4.93955935e+00, 4.95162606e+00, 4.95565940e+00, ...,\n       9.91166761e+03, 9.93710956e+03, 9.95184684e+03])\n array([3.88198925e+00, 4.51572464e+00, 4.53685804e+00, ...,\n       9.96439215e+03, 9.96475031e+03, 9.96562292e+03])\n array([6.04569628e+00, 9.01740593e+00, 9.02177261e+00, ...,\n       9.96607309e+03, 9.96616222e+03, 9.96619575e+03])\n array([3.84482246e+00, 3.91922270e+00, 3.94838946e+00, ...,\n       9.96215227e+03, 9.96234264e+03, 9.96235571e+03])\n array([3.88148925e+00, 4.08062323e+00, 4.15322346e+00, ...,\n       9.96541582e+03, 9.96591969e+03, 9.96618679e+03])\n array([3.82648907e+00, 3.92092271e+00, 3.94598946e+00, ...,\n       9.95082874e+03, 9.96282211e+03, 9.96457141e+03])\n array([3.94475612e+00, 3.94918947e+00, 4.08142323e+00, ...,\n       9.96615559e+03, 9.96616242e+03, 9.96618229e+03])\n array([8.91277226e+00, 8.91697227e+00, 8.92037228e+00, ...,\n       9.96493268e+03, 9.96509952e+03, 9.96541315e+03])\n array([4.70522526e+00, 8.51557097e+00, 9.17010643e+00, ...,\n       9.95848736e+03, 9.95936013e+03, 9.95964760e+03])\n array([  36.41142826,   36.68382914,   78.52476507, ..., 9961.90417239,\n       9965.22478318, 9965.93078547])\n array([  23.30495235,   32.75984973,   32.76641642, ..., 9964.88848209,\n       9964.89331544, 9965.90035204])\n array([5.10172654e+00, 5.13289331e+00, 5.13352665e+00, ...,\n       9.96473011e+03, 9.96473411e+03, 9.96608929e+03])\n array([  23.30488568,   32.75978306,   32.76634975, ..., 9964.69354812,\n       9964.89321544, 9965.90021871])\n array([3.85775584e+00, 9.52857426e+00, 1.00008758e+01, ...,\n       9.96531465e+03, 9.96540122e+03, 9.96540515e+03])\n array([3.91398935e+00, 4.08022323e+00, 4.10028996e+00, ...,\n       9.96606132e+03, 9.96608629e+03, 9.96618769e+03])\n array([3.79662230e+00, 3.80742234e+00, 3.81305569e+00, ...,\n       9.96612845e+03, 9.96615699e+03, 9.96618509e+03])\n array([3.82925574e+00, 3.88488926e+00, 4.03838976e+00, ...,\n       9.96608055e+03, 9.96618255e+03, 9.96620775e+03])\n array([3.79625564e+00, 3.80648900e+00, 3.85595583e+00, ...,\n       9.96618179e+03, 9.96618435e+03, 9.96619732e+03])\n array([  12.00624897,   85.23275353,  101.99947466, ..., 9966.0625859 ,\n       9966.13678614, 9966.20368636])\n array([  11.4179804 ,   11.45054717,   11.50431401, ..., 9965.9500522 ,\n       9966.01515242, 9966.11078606])\n array([3.80108899e+00, 3.81968905e+00, 3.83652243e+00, ...,\n       9.96573548e+03, 9.96599262e+03, 9.96602135e+03])\n array([3.80562233e+00, 3.95422282e+00, 4.11115666e+00, ...,\n       9.96565725e+03, 9.96598645e+03, 9.96600989e+03])\n array([  23.38825262,   25.03495797,   25.07159142, ..., 9962.57204123,\n       9963.39001055, 9963.54321105])\n array([3.83455576e+00, 3.97658956e+00, 4.11078999e+00, ...,\n       9.96521235e+03, 9.96531635e+03, 9.96534865e+03])\n array([4.53755804e+00, 5.02365962e+00, 7.34236716e+00, ...,\n       9.96514788e+03, 9.96529662e+03, 9.96540545e+03])\n array([3.92525606e+00, 4.09182326e+00, 4.37659086e+00, ...,\n       9.96508782e+03, 9.96527575e+03, 9.96540132e+03])\n array([4.85929242e+00, 5.53382795e+00, 5.54626132e+00, ...,\n       9.96597779e+03, 9.96615022e+03, 9.96615582e+03])\n array([3.82368906e+00, 3.86738920e+00, 4.01242301e+00, ...,\n       9.96599389e+03, 9.96611722e+03, 9.96619995e+03])\n array([  11.35438019,   11.37551359,   11.3873803 , ..., 9965.89128535,\n       9965.92381879, 9966.09985269])\n array([  50.5010407 ,   68.19259817,   92.24690965, ..., 9965.52798417,\n       9965.55365092, 9965.5884177 ])\n array([  71.94524369,   72.11881092,   72.36434505, ..., 9965.37098366,\n       9965.61548445, 9965.97595229])\n array([  12.10271595,   12.56721746,   13.81578819, ..., 9965.57255098,\n       9965.58305101, 9965.84355186])\n array([8.35000376e+00, 8.54313772e+00, 8.79263853e+00, ...,\n       9.96012987e+03, 9.96031597e+03, 9.96091554e+03])\n array([3.83175575e+00, 3.88125591e+00, 4.02682305e+00, ...,\n       9.96455095e+03, 9.96538088e+03, 9.96539968e+03])\n array([  11.34168015,   11.40074701,   11.41461372, ..., 9965.54365088,\n       9965.55645093, 9965.56225094])\n array([3.79608897e+00, 3.93242275e+00, 4.30735730e+00, ...,\n       9.96381875e+03, 9.96591119e+03, 9.96614305e+03])\n array([  24.52132296,   34.58488899,   85.96288923, ..., 9964.06561275,\n       9965.01731584, 9966.19398633])\n array([  11.34338015,   27.73866675,  106.97305749, ..., 9963.14204308,\n       9963.51424429, 9966.15818621])\n array([  84.91388582,   85.01535282,   86.03782281, ..., 9952.28880782,\n       9954.44228149, 9966.09445267])\n array([6.36173064e+00, 6.39969743e+00, 6.42813085e+00, ...,\n       9.96584665e+03, 9.96590009e+03, 9.96607735e+03])\n array([  11.35934687,   11.39004697,   11.43954713, ..., 9965.4988174 ,\n       9965.59688439, 9965.84088518])\n array([5.48419445e+00, 1.14219471e+01, 2.05163100e+01, ...,\n       9.91502175e+03, 9.95647642e+03, 9.96060073e+03])\n array([9.56864106e+00, 1.14294138e+01, 1.14536138e+01, ...,\n       9.96607385e+03, 9.96612239e+03, 9.96620375e+03])\n array([3.88395592e+00, 7.79780197e+00, 1.15849809e+01, ...,\n       9.96481832e+03, 9.96560265e+03, 9.96590372e+03])\n array([  11.48091393,   11.50994736,   11.58798095, ..., 9965.2808167 ,\n       9965.77475163, 9966.15558621])\n array([  11.34504683,   11.35281352,   11.36394689, ..., 9965.87098528,\n       9965.89948537, 9965.91788543])\n array([  46.10455975,   88.78809841,   92.60187747, ..., 9959.97949947,\n       9960.10813323, 9966.04385251])\n array([  86.12178975,   86.15828987,   86.28265694, ..., 9966.03468581,\n       9966.07581928, 9966.18298629])\n array([7.69806831e+00, 1.13830469e+01, 1.14465138e+01, ...,\n       9.96591645e+03, 9.96600752e+03, 9.96616612e+03])\n array([8.08480290e+00, 1.15265474e+01, 1.16518812e+01, ...,\n       9.96570922e+03, 9.96578492e+03, 9.96588119e+03])\n array([3.81578903e+00, 3.96755619e+00, 3.99805629e+00, ...,\n       9.96598322e+03, 9.96609025e+03, 9.96618315e+03])\n array([  11.45154717,   11.51191404,   11.57834758, ..., 9965.78085165,\n       9965.81935178, 9966.04425251])\n array([6.68953170e+00, 1.13986137e+01, 1.14136804e+01, ...,\n       9.96589975e+03, 9.96594169e+03, 9.96609705e+03])\n array([  36.53909534,   67.17049485,   84.63065157, ..., 9965.88511866,\n       9965.95548556, 9966.07771929])\n array([4.00015630e+00, 4.13412340e+00, 4.23972374e+00, ...,\n       9.96592939e+03, 9.96603995e+03, 9.96614372e+03])\n array([  11.36591356,   21.82088086,   68.16453141, ..., 9965.8040184 ,\n       9965.84088518, 9966.0424525 ])\n array([5.50956120e+00, 1.14438805e+01, 1.14443138e+01, ...,\n       9.96558665e+03, 9.96566535e+03, 9.96575355e+03])\n array([  11.70204799,   13.68638777,   13.83142157, ..., 9966.07735262,\n       9966.13311947, 9966.1543862 ])\n array([3.93948944e+00, 4.03452308e+00, 4.32095734e+00, ...,\n       9.96612119e+03, 9.96617229e+03, 9.96619435e+03])\n array([3.80972235e+00, 3.84358912e+00, 3.92642273e+00, ...,\n       9.96603449e+03, 9.96615119e+03, 9.96619342e+03])\n array([  11.39504699,   11.43624712,   11.44128047, ..., 9963.34284373,\n       9965.49108405, 9965.58105101])\n array([  11.42004707,   41.13381027,   52.7791481 , ..., 9962.49120763,\n       9965.77791831, 9965.91721876])\n array([3.82215572e+00, 3.92082271e+00, 3.97548955e+00, ...,\n       9.96588415e+03, 9.96603399e+03, 9.96615695e+03])\n array([3.81025568e+00, 3.91185601e+00, 3.98325624e+00, ...,\n       9.96611662e+03, 9.96613162e+03, 9.96618669e+03])\n array([3.86242252e+00, 3.96952287e+00, 4.08752325e+00, ...,\n       9.96609542e+03, 9.96615532e+03, 9.96620375e+03])\n array([3.92782273e+00, 4.93649267e+00, 5.72856191e+00, ...,\n       9.96608232e+03, 9.96613599e+03, 9.96619859e+03])\n array([3.96665619e+00, 5.36936075e+00, 5.88659576e+00, ...,\n       9.96604969e+03, 9.96610705e+03, 9.96612409e+03])\n array([3.96365618e+00, 4.05348981e+00, 4.11128999e+00, ...,\n       9.96594555e+03, 9.96614892e+03, 9.96616719e+03])\n array([  84.8559523 ,   84.90565246,   84.94821927, ..., 9965.17328301,\n       9965.91581876, 9966.10251937])\n array([5.33949398e+00, 7.10009970e+00, 8.83160533e+00, ...,\n       9.96577552e+03, 9.96606102e+03, 9.96618269e+03])\n array([  10.10877614,   11.39441365,   11.44718049, ..., 9958.75322882,\n       9959.72299864, 9961.68183834])\n array([6.58739804e+00, 6.61279812e+00, 6.74616522e+00, ...,\n       9.96563408e+03, 9.96572572e+03, 9.96581232e+03])\n array([5.57906143e+00, 6.66506496e+00, 7.29666701e+00, ...,\n       9.96600029e+03, 9.96609472e+03, 9.96614989e+03])\n array([7.14509985e+00, 3.50516572e+01, 6.98015034e+01, ...,\n       9.96161297e+03, 9.96182957e+03, 9.96258494e+03])\n array([5.98232941e+00, 3.50185571e+01, 3.50853239e+01, ...,\n       9.96473635e+03, 9.96496772e+03, 9.96522515e+03])\n array([  13.78145474,   38.41803478,   69.88753701, ..., 9965.53275085,\n       9965.74205153, 9966.19798634])\n array([  14.54342388,   14.74779121,   20.2139423 , ..., 9965.74768488,\n       9965.88411866, 9966.1026527 ])\n array([3.82885574e+00, 3.89692263e+00, 5.55059467e+00, ...,\n       9.96290444e+03, 9.96375841e+03, 9.96406111e+03])\n array([6.56193129e+00, 6.65299825e+00, 6.66886497e+00, ...,\n       9.96561958e+03, 9.96572938e+03, 9.96578132e+03])\n array([7.27490027e+00, 9.96194233e+00, 2.84353357e+01, ...,\n       9.96539542e+03, 9.96546978e+03, 9.96556242e+03])\n array([  17.85243463,   61.38447605,   64.94065427, ..., 9951.8608731 ,\n       9955.00171664, 9962.03827283])\n array([4.10558997e+00, 6.40286410e+00, 7.25066686e+00, ...,\n       9.96193117e+03, 9.96548205e+03, 9.96580135e+03])\n array([7.27230026e+00, 7.28850031e+00, 7.68453493e+00, ...,\n       9.95433488e+03, 9.95845999e+03, 9.95855559e+03])\n array([6.91956578e+00, 8.71523828e+00, 9.72837491e+00, ...,\n       9.94408095e+03, 9.94410935e+03, 9.96577542e+03])\n array([  11.40528036,   11.6957813 ,   12.57198415, ..., 9956.35162102,\n       9957.55069158, 9962.49340764])\n array([3.98505625e+00, 4.04662312e+00, 4.09535661e+00, ...,\n       9.96614679e+03, 9.96615745e+03, 9.96618302e+03])\n array([5.74492863e+00, 7.10006637e+00, 7.14103317e+00, ...,\n       9.95840296e+03, 9.95841356e+03, 9.95909883e+03])\n array([  52.25074638,   52.34101334,  102.42640938, ..., 9963.43257736,\n       9964.46931406, 9964.8002818 ])\n array([3.90078931e+00, 4.01578968e+00, 8.81263860e+00, ...,\n       9.96550048e+03, 9.96562425e+03, 9.96608699e+03])\n array([  84.84898561,   84.87395236,   84.95605263, ..., 9965.67088463,\n       9965.68068466, 9965.79911838])\n array([8.82597198e+00, 8.61258231e+01, 1.23441344e+02, ...,\n       9.96251641e+03, 9.96281918e+03, 9.96555262e+03])\n array([  11.41334705,   11.46454721,   11.48348061, ..., 9943.90091391,\n       9962.08407298, 9964.9320489 ])\n array([8.88697217e+00, 1.15174474e+01, 1.15721142e+01, ...,\n       9.96454865e+03, 9.96533305e+03, 9.96533585e+03])\n array([5.06142641e+00, 1.16231811e+01, 1.19538155e+01, ...,\n       9.95736616e+03, 9.96272131e+03, 9.96448588e+03])\n array([3.93245608e+00, 4.14522344e+00, 4.18292356e+00, ...,\n       9.96575832e+03, 9.96596519e+03, 9.96601325e+03])\n array([  11.42738043,   11.45271384,   11.51964739, ..., 9959.43969772,\n       9965.54871757, 9965.56498429])\n array([  11.36598023,   11.38904697,   11.41228038, ..., 9965.6317845 ,\n       9965.92328545, 9966.1130194 ])\n array([3.80752234e+00, 3.82155572e+00, 3.83795577e+00, ...,\n       9.96609555e+03, 9.96610332e+03, 9.96619489e+03])\n array([5.35299403e+00, 5.76349536e+00, 6.11826318e+00, ...,\n       9.96577015e+03, 9.96581452e+03, 9.96592109e+03])\n array([8.82523864e+00, 8.91767227e+00, 8.96917244e+00, ...,\n       9.96608732e+03, 9.96611332e+03, 9.96612975e+03])\n array([3.98605625e+00, 4.03638975e+00, 5.07429312e+00, ...,\n       9.96568115e+03, 9.96591009e+03, 9.96594425e+03])\n array([3.87088921e+00, 3.91165601e+00, 4.08472324e+00, ...,\n       9.96575442e+03, 9.96587342e+03, 9.96588175e+03])\n array([3.79655564e+00, 3.85398916e+00, 3.86062251e+00, ...,\n       9.96595879e+03, 9.96602239e+03, 9.96609329e+03])\n array([  76.83512625,   87.84366201,   87.85029536, ..., 9965.07218269,\n       9965.7030514 , 9965.84511853])\n array([3.85942251e+00, 3.92368938e+00, 3.97058954e+00, ...,\n       9.96570462e+03, 9.96575475e+03, 9.96602002e+03])\n array([3.81098902e+00, 3.86045585e+00, 3.95105614e+00, ...,\n       9.96596179e+03, 9.96603359e+03, 9.96616749e+03])\n array([  87.429994  ,   99.6505337 ,  109.56559924, ..., 9941.01927121,\n       9949.5831657 , 9962.35287385])\n array([4.00748966e+00, 5.35219402e+00, 6.57123132e+00, ...,\n       9.96599415e+03, 9.96605859e+03, 9.96615922e+03])\n array([4.05319336e+00, 4.60326177e+00, 4.85712923e+00, ...,\n       9.96620808e+03, 9.96620955e+03, 9.96621388e+03])\n array([4.81309576e+00, 4.83552917e+00, 5.53949806e+00, ...,\n       9.96529805e+03, 9.96546041e+03, 9.96547755e+03])\n array([5.96879941e+00, 5.97343276e+00, 6.21620019e+00, ...,\n       9.96616485e+03, 9.96618182e+03, 9.96626288e+03])\n array([9.02384239e+00, 1.30799552e+01, 2.40929233e+01, ...,\n       9.92070587e+03, 9.92074271e+03, 9.96116093e+03])\n array([6.36743400e+00, 6.37100068e+00, 6.38820074e+00, ...,\n       9.96011156e+03, 9.96011696e+03, 9.96012106e+03])\n array([3.87612614e+00, 3.93499299e+00, 4.06786008e+00, ...,\n       9.96619105e+03, 9.96621965e+03, 9.96624545e+03])\n array([3.80502591e+00, 4.79809571e+00, 5.27009720e+00, ...,\n       9.96622758e+03, 9.96623425e+03, 9.96624118e+03])\n array([3.88245949e+00, 3.89099285e+00, 3.89519286e+00, ...,\n       9.96553948e+03, 9.96564355e+03, 9.96567268e+03])\n array([4.30129415e+00, 4.60882845e+00, 4.67082865e+00, ...,\n       9.96622525e+03, 9.96624582e+03, 9.96625658e+03])\n array([3.90479289e+00, 3.93515966e+00, 3.95642639e+00, ...,\n       9.96542305e+03, 9.96567338e+03, 9.96598671e+03])\n array([3.78069250e+00, 4.07299342e+00, 4.60969512e+00, ...,\n       9.96606655e+03, 9.96622225e+03, 9.96624008e+03])\n array([3.78012583e+00, 3.91915961e+00, 3.97369311e+00, ...,\n       9.96581105e+03, 9.96582658e+03, 9.96615988e+03])\n array([4.06529340e+00, 4.07282676e+00, 4.55689495e+00, ...,\n       9.96460574e+03, 9.96466274e+03, 9.96582621e+03])\n array([4.21289387e+00, 5.83646566e+00, 5.93423264e+00, ...,\n       9.96573451e+03, 9.96574295e+03, 9.96581225e+03])\n array([3.98769316e+00, 4.08196012e+00, 4.55719495e+00, ...,\n       9.95634035e+03, 9.96550388e+03, 9.96580891e+03])\n array([3.80239257e+00, 3.89995955e+00, 3.94759303e+00, ...,\n       9.96614052e+03, 9.96614882e+03, 9.96618895e+03])\n array([4.07322676e+00, 4.94269617e+00, 5.61966498e+00, ...,\n       9.96614352e+03, 9.96622332e+03, 9.96625202e+03])\n array([3.84992605e+00, 4.33959427e+00, 4.35626099e+00, ...,\n       9.96606645e+03, 9.96607048e+03, 9.96624375e+03])\n array([5.74996539e+00, 6.69230170e+00, 1.02186128e+01, ...,\n       9.96118607e+03, 9.96474608e+03, 9.96529315e+03])\n array([4.04976002e+00, 4.08286012e+00, 4.55462828e+00, ...,\n       9.96547491e+03, 9.96547795e+03, 9.96553941e+03])\n array([6.48013436e+00, 7.46873748e+00, 8.20867315e+00, ...,\n       9.95735409e+03, 9.95813222e+03, 9.95837566e+03])\n array([4.02655994e+00, 6.77196861e+00, 7.04520281e+00, ...,\n       9.96592518e+03, 9.96593135e+03, 9.96598118e+03])\n array([8.47567399e+00, 1.10722822e+01, 1.15123836e+01, ...,\n       9.94158434e+03, 9.95522231e+03, 9.95962016e+03])\n array([3.99599318e+00, 5.80509889e+00, 5.80843224e+00, ...,\n       9.96065420e+03, 9.96172530e+03, 9.96594508e+03])\n array([5.23126375e+00, 5.34776412e+00, 5.34963079e+00, ...,\n       9.96608302e+03, 9.96616898e+03, 9.96626025e+03])\n array([3.81735928e+00, 3.86609277e+00, 3.93029297e+00, ...,\n       9.96616458e+03, 9.96619212e+03, 9.96624278e+03])\n array([3.97872646e+00, 4.22629391e+00, 4.25636067e+00, ...,\n       9.96617705e+03, 9.96622922e+03, 9.96625528e+03])\n array([4.20206050e+00, 4.52932820e+00, 4.74959556e+00, ...,\n       9.96574375e+03, 9.96586458e+03, 9.96624882e+03])\n array([3.78792586e+00, 3.90589290e+00, 3.98649315e+00, ...,\n       9.96610532e+03, 9.96618865e+03, 9.96623615e+03])\n array([5.22393039e+00, 5.34869745e+00, 1.14386167e+01, ...,\n       9.96618312e+03, 9.96618812e+03, 9.96625168e+03])\n array([3.90809290e+00, 4.04102666e+00, 4.05439337e+00, ...,\n       9.96619145e+03, 9.96622945e+03, 9.96626002e+03])\n array([7.57180447e+00, 7.87270542e+00, 1.93718417e+01, ...,\n       9.96418664e+03, 9.96463808e+03, 9.96501288e+03])\n array([4.38972776e+00, 4.95332954e+00, 5.66793179e+00, ...,\n       9.96473648e+03, 9.96522671e+03, 9.96535038e+03])\n array([9.77551143e+00, 1.05819473e+01, 1.08712482e+01, ...,\n       9.96556315e+03, 9.96600145e+03, 9.96611475e+03])\n array([7.18333658e+00, 7.58257117e+00, 8.93697545e+00, ...,\n       9.95026993e+03, 9.95060327e+03, 9.95489448e+03])\n array([6.72690180e+00, 7.00056934e+00, 1.13616164e+01, ...,\n       9.96618052e+03, 9.96618852e+03, 9.96620832e+03])\n array([3.85465940e+00, 5.77166546e+00, 1.10260154e+01, ...,\n       9.96619292e+03, 9.96621945e+03, 9.96626308e+03])\n array([  11.34818306,   11.36354978,   11.37578315, ..., 9965.94368153,\n       9966.12698211, 9966.23401578])\n array([  11.63835065,   11.85565133,   11.8997848 , ..., 9965.99458169,\n       9966.03651516, 9966.22788243])\n array([4.08022678e+00, 6.45220094e+00, 8.07810607e+00, ...,\n       9.96588888e+03, 9.96589765e+03, 9.96590235e+03])\n array([  11.35474975,   11.36451645,   11.3695498 , ..., 9966.20204901,\n       9966.22158241, 9966.25151583])\n array([3.78685919e+00, 4.75389557e+00, 6.36360066e+00, ...,\n       9.96624902e+03, 9.96625362e+03, 9.96626112e+03])\n array([  11.38214984,   11.38738319,   11.47135012, ..., 9965.5321469 ,\n       9965.55024695, 9966.1470155 ])\n array([3.79605922e+00, 4.08529346e+00, 4.18932713e+00, ...,\n       9.96015413e+03, 9.96057246e+03, 9.96207124e+03])\n array([3.78382585e+00, 3.94405968e+00, 4.13322695e+00, ...,\n       9.96623635e+03, 9.96624965e+03, 9.96626165e+03])\n array([3.78012583e+00, 3.94859303e+00, 4.57366167e+00, ...,\n       9.96599158e+03, 9.96602242e+03, 9.96605018e+03])\n array([3.91735960e+00, 4.01202657e+00, 4.11102688e+00, ...,\n       9.96610272e+03, 9.96615485e+03, 9.96624282e+03])\n array([8.66937460e+00, 8.67684129e+00, 1.32606558e+01, ...,\n       9.96607385e+03, 9.96611498e+03, 9.96619625e+03])\n array([4.86872927e+00, 6.35310062e+00, 6.63863486e+00, ...,\n       9.96614202e+03, 9.96618355e+03, 9.96625412e+03])\n array([3.83325933e+00, 4.02132660e+00, 4.13346028e+00, ...,\n       9.96601532e+03, 9.96613458e+03, 9.96623115e+03])\n array([  15.65142998,   23.0977535 ,   27.30680012, ..., 9965.95358156,\n       9966.10721538, 9966.25278251])\n array([5.77546547e+00, 6.75756857e+00, 9.93271193e+00, ...,\n       9.96584835e+03, 9.96601902e+03, 9.96604908e+03])\n array([4.73782886e+00, 5.02719644e+00, 6.20480016e+00, ...,\n       9.96571831e+03, 9.96576245e+03, 9.96581165e+03])\n array([4.49999477e+00, 4.85609590e+00, 5.01669640e+00, ...,\n       9.96596945e+03, 9.96611648e+03, 9.96624588e+03])\n array([4.93799616e+00, 6.75886857e+00, 1.14340500e+01, ...,\n       9.96559661e+03, 9.96571171e+03, 9.96582851e+03])\n array([6.87630228e+00, 7.30043695e+00, 7.42810402e+00, ...,\n       9.96553571e+03, 9.96557878e+03, 9.96574721e+03])\n array([5.06786323e+00, 5.87083243e+00, 6.85930222e+00, ...,\n       9.96364127e+03, 9.96388284e+03, 9.96390524e+03])\n array([3.78402585e+00, 3.84545937e+00, 3.87862614e+00, ...,\n       9.96608045e+03, 9.96611122e+03, 9.96622452e+03])\n array([5.18049692e+00, 1.18419513e+01, 1.19253849e+01, ...,\n       9.96574345e+03, 9.96580565e+03, 9.96621335e+03])\n array([6.83630215e+00, 6.83803549e+00, 7.07093622e+00, ...,\n       9.96568055e+03, 9.96583431e+03, 9.96588268e+03])\n array([  32.73498393,   60.71447227,   68.01542866, ..., 9960.97416584,\n       9962.80350495, 9965.67334734])\n array([7.74130501e+00, 7.84263866e+00, 7.85243869e+00, ...,\n       9.96040316e+03, 9.96044426e+03, 9.96462051e+03])\n array([3.83372600e+00, 4.02175993e+00, 4.29746080e+00, ...,\n       9.96540018e+03, 9.96578528e+03, 9.96579591e+03])\n array([6.81850209e+00, 7.18340325e+00, 9.86384504e+00, ...,\n       9.96601705e+03, 9.96614785e+03, 9.96622252e+03])\n array([7.55117107e+00, 1.13965165e+01, 1.14091499e+01, ...,\n       9.96589371e+03, 9.96601565e+03, 9.96620685e+03])\n array([  11.9830184 ,   53.21588193,   68.67163073, ..., 9907.49829699,\n       9935.31485149, 9935.584019  ])\n array([3.97485978e+00, 4.38649441e+00, 4.57546168e+00, ...,\n       9.96572031e+03, 9.96577001e+03, 9.96603418e+03])\n array([9.03367575e+00, 9.90174516e+00, 1.00942124e+01, ...,\n       9.96442561e+03, 9.96445258e+03, 9.96580225e+03])\n array([8.89447532e+00, 1.13429497e+01, 1.14078833e+01, ...,\n       9.96577791e+03, 9.96584188e+03, 9.96589711e+03])\n array([  97.02438692,  110.17356177,  119.67492511, ..., 9958.05778996,\n       9960.87506553, 9960.88636556])\n array([  50.59310698,   60.84053934,   84.86218185, ..., 9955.34238139,\n       9959.76249535, 9960.47979761])\n array([  51.67387706,   82.41620746,  130.16245822, ..., 9962.74927144,\n       9965.33881295, 9966.23444911])\n array([6.34496727e+00, 6.36100065e+00, 6.41723416e+00, ...,\n       9.96560091e+03, 9.96561801e+03, 9.96563761e+03])\n array([3.99389318e+00, 3.99589318e+00, 3.99822652e+00, ...,\n       9.96456224e+03, 9.96558835e+03, 9.96559235e+03])\n array([6.79396868e+00, 1.14547501e+01, 5.12782091e+01, ...,\n       9.92394708e+03, 9.95629932e+03, 9.96100193e+03])\n array([6.63356818e+00, 6.64123487e+00, 6.80423538e+00, ...,\n       9.96580178e+03, 9.96586181e+03, 9.96616262e+03])\n array([6.66453494e+00, 1.15690171e+01, 4.11825773e+01, ...,\n       9.96556751e+03, 9.96559688e+03, 9.96576285e+03])\n array([4.25779401e+00, 5.02599643e+00, 5.03596313e+00, ...,\n       9.96024000e+03, 9.96048186e+03, 9.96134537e+03])\n array([  58.77743282,   60.84697269,   60.86327274, ..., 9962.69537127,\n       9962.80367161, 9962.95683877])\n array([  11.39501654,   11.48241682,   11.54491702, ..., 9966.09774868,\n       9966.12854878, 9966.16548223])\n array([5.27953057e+00, 6.43433421e+00, 6.68643501e+00, ...,\n       9.96585511e+03, 9.96590658e+03, 9.96600175e+03])\n array([6.36790067e+00, 6.63920153e+00, 6.68446834e+00, ...,\n       9.96594315e+03, 9.96597358e+03, 9.96601328e+03])\n array([4.78769568e+00, 9.34571007e+00, 9.36434347e+00, ...,\n       9.95723039e+03, 9.96069983e+03, 9.96217470e+03])\n array([ 218.20156954,  252.33764399,  291.82113533, ..., 9948.2825591 ,\n       9948.43565958, 9959.26526044])\n array([3.80532591e+00, 3.85142606e+00, 3.88169282e+00, ...,\n       9.96577598e+03, 9.96578718e+03, 9.96595538e+03])\n array([3.78992586e+00, 3.79822589e+00, 3.81692595e+00, ...,\n       9.96553438e+03, 9.96569311e+03, 9.96611602e+03])\n array([3.92132628e+00, 3.94965970e+00, 3.95265971e+00, ...,\n       9.96477301e+03, 9.96477891e+03, 9.96478341e+03])\n array([4.37326104e+00, 4.39946112e+00, 4.44372793e+00, ...,\n       9.96591425e+03, 9.96597635e+03, 9.96610338e+03])\n array([3.78229251e+00, 3.80542591e+00, 3.89705954e+00, ...,\n       9.96589961e+03, 9.96597198e+03, 9.96600392e+03])\n array([4.90649606e+00, 5.54309807e+00, 5.54903142e+00, ...,\n       9.96497871e+03, 9.96498498e+03, 9.96498898e+03])\n array([4.08446013e+00, 4.28436076e+00, 4.56916166e+00, ...,\n       9.95444255e+03, 9.95445288e+03, 9.96402908e+03])\n array([3.79239254e+00, 3.88719284e+00, 3.93562632e+00, ...,\n       9.96470121e+03, 9.96591868e+03, 9.96600628e+03])\n array([3.77915916e+00, 3.80575925e+00, 3.87589280e+00, ...,\n       9.96586888e+03, 9.96595741e+03, 9.96597745e+03])\n array([3.80662592e+00, 3.86799278e+00, 3.87102612e+00, ...,\n       9.96588798e+03, 9.96613138e+03, 9.96614025e+03])\n array([3.98132647e+00, 2.40069897e+01, 6.38586822e+01, ...,\n       9.96003060e+03, 9.96049936e+03, 9.96147940e+03])\n array([5.68739852e+00, 8.40987379e+00, 1.28550545e+01, ...,\n       9.96474548e+03, 9.96475364e+03, 9.96550901e+03])\n array([3.96652642e+00, 3.99929319e+00, 4.94252950e+00, ...,\n       9.96524451e+03, 9.96585645e+03, 9.96599372e+03])\n array([  27.19019975,   27.19753311,   33.8781542 , ..., 9962.83407171,\n       9962.88423854, 9964.2771096 ])\n array([3.90342622e+00, 3.91005958e+00, 3.94445969e+00, ...,\n       9.96147973e+03, 9.96290944e+03, 9.96291421e+03])\n array([3.79685922e+00, 3.80815926e+00, 3.82595931e+00, ...,\n       9.96282164e+03, 9.96283927e+03, 9.96472811e+03])\n array([3.80285924e+00, 3.80765925e+00, 3.81319260e+00, ...,\n       9.96475704e+03, 9.96477274e+03, 9.96598318e+03])\n array([ 116.64471554,  129.51535618,  130.46552584, ..., 9916.40269177,\n       9932.95681071, 9952.41500548])\n array([3.79039253e+00, 3.81729262e+00, 3.85929275e+00, ...,\n       9.96592385e+03, 9.96596628e+03, 9.96601182e+03])\n array([3.97992646e+00, 3.98702649e+00, 3.99619318e+00, ...,\n       9.96564318e+03, 9.96566138e+03, 9.96568781e+03])\n array([ 474.70277945,  527.83571388,  589.0285071 , ..., 9953.26227482,\n       9955.60358221, 9961.47800076])\n array([3.79049253e+00, 3.80292591e+00, 3.82585931e+00, ...,\n       9.96595108e+03, 9.96596481e+03, 9.96598441e+03])\n array([3.78015917e+00, 3.78459251e+00, 3.79539255e+00, ...,\n       9.95043983e+03, 9.95046277e+03, 9.96499545e+03])\n array([4.32316088e+00, 4.71712879e+00, 4.99282966e+00, ...,\n       9.96614098e+03, 9.96617778e+03, 9.96619895e+03])\n array([4.39549444e+00, 6.35643397e+00, 6.83430214e+00, ...,\n       9.96565685e+03, 9.96569961e+03, 9.96608802e+03])\n array([4.25819401e+00, 1.01508459e+01, 1.01540793e+01, ...,\n       9.96595031e+03, 9.96596545e+03, 9.96609185e+03])\n array([  38.71593614,   53.62304988,   71.81904067, ..., 9966.19158231,\n       9966.19634899, 9966.20464902])\n array([3.80172590e+00, 4.25359400e+00, 4.28259409e+00, ...,\n       9.96589788e+03, 9.96592321e+03, 9.96605692e+03])\n array([ 220.14687568,  303.1920379 ,  319.41065578, ..., 9965.00977858,\n       9965.18821248, 9965.59024708])\n array([3.95625972e+00, 8.73377481e+00, 9.89894515e+00, ...,\n       9.96053383e+03, 9.96150987e+03, 9.96229630e+03])\n array([3.78069250e+00, 3.79109253e+00, 4.18502711e+00, ...,\n       9.95409618e+03, 9.95994503e+03, 9.96493855e+03])\n array([3.79512588e+00, 3.80505925e+00, 3.97329311e+00, ...,\n       9.95954503e+03, 9.96165487e+03, 9.96265660e+03])\n array([3.81399261e+00, 3.86432610e+00, 3.93079298e+00, ...,\n       9.96386031e+03, 9.96422381e+03, 9.96591608e+03])\n array([7.19110327e+00, 7.98439327e+01, 7.98494327e+01, ...,\n       9.96123863e+03, 9.96148720e+03, 9.96149113e+03])\n array([7.46080412e+00, 1.35013232e+01, 2.17861827e+01, ...,\n       9.95140414e+03, 9.95595832e+03, 9.96102350e+03])\n array([3.79612588e+00, 3.94075967e+00, 4.20039383e+00, ...,\n       9.96336224e+03, 9.96382531e+03, 9.96383051e+03])\n array([3.81692595e+00, 3.89835954e+00, 3.95965973e+00, ...,\n       9.92681666e+03, 9.96476928e+03, 9.96477938e+03])\n array([3.97005977e+00, 4.01802658e+00, 4.55486161e+00, ...,\n       9.96536741e+03, 9.96575625e+03, 9.96602502e+03])\n array([3.79725922e+00, 3.80372591e+00, 3.92089294e+00, ...,\n       9.96470534e+03, 9.96471168e+03, 9.96620768e+03])\n array([3.79215920e+00, 4.05796004e+00, 4.07899344e+00, ...,\n       9.96616478e+03, 9.96618545e+03, 9.96619888e+03])\n array([4.82946248e+00, 8.73220814e+00, 1.84917390e+01, ...,\n       9.96528988e+03, 9.96529548e+03, 9.96595485e+03])\n array([3.87162612e+00, 3.90869291e+00, 3.95305971e+00, ...,\n       9.96599888e+03, 9.96602212e+03, 9.96616668e+03])\n array([4.38916109e+00, 4.41572784e+00, 4.49076141e+00, ...,\n       9.95999216e+03, 9.96254160e+03, 9.96276917e+03])\n array([  94.92631363,   94.93004697,   94.93468032, ..., 9964.9519784 ,\n       9965.03464533, 9966.20471569])\n array([  12.82508773,   13.94345792,   15.26402876, ..., 9963.65767431,\n       9965.14927902, 9965.90064806])\n array([4.26396069e+00, 4.28809410e+00, 4.51659483e+00, ...,\n       9.96461538e+03, 9.96470771e+03, 9.96473921e+03])\n array([3.78862586e+00, 3.82445931e+00, 4.03799331e+00, ...,\n       9.96184317e+03, 9.96192824e+03, 9.96601538e+03])\n array([  43.46691781,   43.47091782,  129.41832254, ..., 9965.7853477 ,\n       9965.95768157, 9966.16944891])\n array([3.86672611e+00, 3.87129279e+00, 5.45233111e+00, ...,\n       9.96598455e+03, 9.96599365e+03, 9.96599905e+03])\n array([6.83726882e+00, 6.84200217e+00, 8.71440808e+00, ...,\n       9.96616632e+03, 9.96617962e+03, 9.96620192e+03])\n array([6.82950213e+00, 6.83330214e+00, 2.16985157e+01, ...,\n       9.96599425e+03, 9.96599752e+03, 9.96617348e+03])\n array([3.83815935e+00, 4.07776011e+00, 4.29679413e+00, ...,\n       9.96387884e+03, 9.96424771e+03, 9.96427468e+03])\n array([4.82966248e+00, 4.96619625e+00, 5.09062997e+00, ...,\n       9.96436908e+03, 9.96451228e+03, 9.96595481e+03])\n array([5.36276416e+00, 5.36813085e+00, 5.37189753e+00, ...,\n       9.96478268e+03, 9.96514381e+03, 9.96546475e+03])\n array([4.01465991e+00, 4.42189453e+00, 5.37543087e+00, ...,\n       9.96584168e+03, 9.96590601e+03, 9.96595201e+03])\n array([3.87299279e+00, 4.15892703e+00, 4.54092824e+00, ...,\n       9.96556255e+03, 9.96570058e+03, 9.96581225e+03])\n array([3.96759309e+00, 4.10039351e+00, 4.28829410e+00, ...,\n       9.96528478e+03, 9.96542661e+03, 9.96562611e+03])\n array([3.97325978e+00, 4.44472793e+00, 4.86339592e+00, ...,\n       9.96275727e+03, 9.96278580e+03, 9.96514318e+03])\n array([3.85702608e+00, 4.06849341e+00, 4.38462774e+00, ...,\n       9.96189600e+03, 9.96190300e+03, 9.96296467e+03])\n array([3.87522613e+00, 3.90102622e+00, 3.95759306e+00, ...,\n       9.96604362e+03, 9.96606975e+03, 9.96610078e+03])\n array([ 500.16225983,  505.32937615,  510.39865882, ..., 9965.01014525,\n       9965.31047953, 9966.14724884])\n array([5.20793034e+00, 6.06263304e+00, 6.38186738e+00, ...,\n       9.96560908e+03, 9.96570901e+03, 9.96598145e+03])\n array([4.29089411e+00, 4.59886175e+00, 4.86269592e+00, ...,\n       9.96573001e+03, 9.96588265e+03, 9.96617315e+03])\n array([3.98422648e+00, 4.35872766e+00, 4.53746156e+00, ...,\n       9.96508735e+03, 9.96527408e+03, 9.96535578e+03])\n array([3.78842586e+00, 3.84695938e+00, 4.20959386e+00, ...,\n       9.96566825e+03, 9.96582928e+03, 9.96597831e+03])\n array([3.78145917e+00, 3.94239301e+00, 3.99162650e+00, ...,\n       9.96573628e+03, 9.96609822e+03, 9.96617785e+03])\n array([ 185.57729986,  323.54536883,  338.56908294, ..., 9954.88577995,\n       9955.08078056, 9966.15838221])\n array([9.68654448e+00, 1.15021169e+01, 1.77297365e+01, ...,\n       9.96597895e+03, 9.96610738e+03, 9.96617095e+03])\n array([3.91535959e+00, 4.19492714e+00, 4.35499432e+00, ...,\n       9.96479568e+03, 9.96491488e+03, 9.96537425e+03])\n array([6.30653381e+00, 6.40203411e+00, 6.53126785e+00, ...,\n       9.96600888e+03, 9.96607928e+03, 9.96615915e+03])\n array([3.96265974e+00, 4.45389463e+00, 4.64332856e+00, ...,\n       9.96349807e+03, 9.96593001e+03, 9.96620188e+03])\n array([  11.38438318,   11.40088323,   11.41431661, ..., 9964.97771181,\n       9965.12177893, 9965.28831279])\n array([7.22283670e+00, 1.13640831e+01, 1.13684165e+01, ...,\n       9.96231634e+03, 9.96289407e+03, 9.96295284e+03])\n array([  11.35508308,   11.37741649,  583.71309031, ..., 9962.39123698,\n       9962.68940459, 9962.9457054 ])\n array([  11.44648337,   21.28431444,   53.31501557, ..., 9965.56688034,\n       9965.71804748, 9965.8090811 ])\n array([4.90639606e+00, 5.08969664e+00, 6.42286751e+00, ...,\n       9.96591761e+03, 9.96592768e+03, 9.96594221e+03])\n array([4.29116078e+00, 1.13034163e+01, 1.14490500e+01, ...,\n       9.87363626e+03, 9.87556486e+03, 9.87560150e+03])\n array([5.24129711e+00, 5.72546531e+00, 6.34736727e+00, ...,\n       9.96587241e+03, 9.96605808e+03, 9.96608352e+03])\n array([  69.81010099,  114.85620989,  119.71882525, ..., 9965.33871295,\n       9965.39951314, 9966.17658226])\n array([3.79639255e+00, 3.80675925e+00, 3.85489274e+00, ...,\n       9.96615775e+03, 9.96616228e+03, 9.96619638e+03])\n array([8.93160877e+00, 1.13779498e+01, 1.13903499e+01, ...,\n       9.96593505e+03, 9.96609775e+03, 9.96621312e+03])\n array([3.78452585e+00, 3.79919256e+00, 3.81859262e+00, ...,\n       9.96603472e+03, 9.96611758e+03, 9.96617082e+03])\n array([3.78805919e+00, 3.82932599e+00, 3.86099276e+00, ...,\n       9.96572711e+03, 9.96584178e+03, 9.96607275e+03])\n array([3.93532632e+00, 4.02675995e+00, 4.25099399e+00, ...,\n       9.96615565e+03, 9.96619335e+03, 9.96621222e+03])\n array([3.80342591e+00, 3.91352625e+00, 4.00219320e+00, ...,\n       9.96575598e+03, 9.96585748e+03, 9.96588531e+03])\n array([3.91329292e+00, 3.99422651e+00, 4.03822665e+00, ...,\n       9.96608462e+03, 9.96614052e+03, 9.96621378e+03])\n array([7.06143619e+00, 7.17326988e+00, 2.81634695e+01, ...,\n       9.96575125e+03, 9.96589601e+03, 9.96590218e+03])\n array([3.85389273e+00, 3.92485962e+00, 3.95672639e+00, ...,\n       9.96607378e+03, 9.96612068e+03, 9.96613725e+03])\n array([3.79779256e+00, 3.94332635e+00, 4.08292679e+00, ...,\n       9.96585888e+03, 9.96608328e+03, 9.96614712e+03])\n array([  86.08605238,   86.19271939,  109.68996025, ..., 9965.97148162,\n       9966.12004875, 9966.19298232])\n array([3.82102596e+00, 4.34649429e+00, 5.69103187e+00, ...,\n       9.96329417e+03, 9.96336521e+03, 9.96348751e+03])\n array([  29.72604109,   85.80568483,   88.57956026, ..., 9965.12841229,\n       9965.2178459 , 9965.39091312])\n array([4.26019402e+00, 4.84446253e+00, 5.04906317e+00, ...,\n       9.96561585e+03, 9.96564705e+03, 9.96574681e+03])\n array([3.87565947e+00, 3.95202638e+00, 3.98745982e+00, ...,\n       9.96594961e+03, 9.96598348e+03, 9.96600632e+03])\n array([7.10436448e+00, 7.39789797e+00, 8.57829858e+00, ...,\n       9.94993896e+03, 9.94998592e+03, 9.95000582e+03])\n array([6.96316440e+00, 1.84782371e+01, 3.10699104e+01, ...,\n       9.94966219e+03, 9.94970512e+03, 9.94992786e+03])\n array([  86.28567262,   95.85264429,  265.64599989, ..., 9931.69584799,\n       9934.73388281, 9944.01638734])\n array([5.61683037e+00, 6.33173074e+00, 6.33189741e+00, ...,\n       9.93963469e+03, 9.94281559e+03, 9.94389962e+03])\n array([7.62129808e+00, 7.83353153e+00, 8.07423165e+00, ...,\n       9.94946836e+03, 9.94962912e+03, 9.94998649e+03])\n array([5.60506369e+00, 7.29999791e+00, 8.37323181e+00, ...,\n       9.94961752e+03, 9.94982009e+03, 9.94990072e+03])\n array([4.33739636e+00, 5.85633049e+00, 6.16916399e+00, ...,\n       9.94962682e+03, 9.94984776e+03, 9.94997599e+03])\n array([6.35133075e+00, 6.47663082e+00, 6.51453084e+00, ...,\n       9.94986949e+03, 9.94993736e+03, 9.94995636e+03])\n array([6.08156394e+00, 6.08439728e+00, 6.08809728e+00, ...,\n       9.94969029e+03, 9.94974042e+03, 9.94992412e+03])\n array([5.70323041e+00, 5.70576375e+00, 5.70973042e+00, ...,\n       9.94984969e+03, 9.94991226e+03, 9.94999732e+03])\n array([5.70659708e+00, 6.57053087e+00, 6.73279762e+00, ...,\n       9.94950242e+03, 9.94958032e+03, 9.94963606e+03])\n array([  39.42294807,   50.52682055,   50.56272057, ..., 9947.82665587,\n       9949.02575646, 9949.03602313])\n array([3.96319617e+00, 4.03266287e+00, 5.70076374e+00, ...,\n       9.94965349e+03, 9.94969992e+03, 9.94989576e+03])\n array([4.01846286e+00, 4.09622957e+00, 4.82962995e+00, ...,\n       9.94994926e+03, 9.94999132e+03, 9.95002159e+03])\n array([3.79516275e+00, 4.01916286e+00, 4.09066290e+00, ...,\n       9.94989832e+03, 9.94994862e+03, 9.94999899e+03])\n array([3.80712942e+00, 6.87099769e+00, 1.40855681e+01, ...,\n       9.94828662e+03, 9.94949616e+03, 9.94951489e+03])\n array([3.78926274e+00, 3.86982945e+00, 3.87806279e+00, ...,\n       9.94984826e+03, 9.94985189e+03, 9.94985842e+03])\n array([3.95512950e+00, 3.99842952e+00, 4.03819621e+00, ...,\n       9.94988822e+03, 9.94993332e+03, 9.94999682e+03])\n array([3.84222944e+00, 3.86932945e+00, 3.87332945e+00, ...,\n       9.94999019e+03, 9.94999932e+03, 9.95001892e+03])\n array([  44.58008411,  113.95062044,  122.24902478, ..., 9949.71669013,\n       9949.8677902 , 9949.95889025])\n array([3.79666275e+00, 3.81192942e+00, 4.02872953e+00, ...,\n       9.94992749e+03, 9.94995866e+03, 9.95001232e+03])\n array([7.64739810e+00, 1.41594015e+01, 1.41714682e+01, ...,\n       9.94906119e+03, 9.94930382e+03, 9.94973016e+03])\n array([4.03182954e+00, 4.46816310e+00, 5.67066373e+00, ...,\n       9.94985376e+03, 9.94987352e+03, 9.95000086e+03])\n array([6.67923092e+00, 6.71046427e+00, 7.57753139e+00, ...,\n       9.94988549e+03, 9.94998709e+03, 9.95002529e+03])\n array([3.84532944e+00, 4.05172955e+00, 4.07389623e+00, ...,\n       9.95000562e+03, 9.95001112e+03, 9.95002749e+03])\n array([4.66609654e+00, 5.71006375e+00, 6.18116400e+00, ...,\n       9.94985252e+03, 9.94992719e+03, 9.94995289e+03])\n array([5.30193020e+00, 5.87503050e+00, 6.33339741e+00, ...,\n       9.94987132e+03, 9.94996759e+03, 9.95000026e+03])\n array([3.86142945e+00, 4.00179619e+00, 4.01242953e+00, ...,\n       9.94990839e+03, 9.94998249e+03, 9.95001329e+03])\n array([4.13716292e+00, 6.33299741e+00, 9.69186583e+00, ...,\n       9.94952362e+03, 9.94952789e+03, 9.94989706e+03])\n array([4.49166311e+00, 7.86589821e+00, 7.93156491e+00, ...,\n       9.94952619e+03, 9.94953792e+03, 9.94999669e+03])\n array([3.79226274e+00, 3.85399611e+00, 3.89436280e+00, ...,\n       9.94996306e+03, 9.95001052e+03, 9.95001766e+03])\n array([3.96442950e+00, 6.33183074e+00, 6.33286407e+00, ...,\n       9.94989292e+03, 9.94989852e+03, 9.94992436e+03])\n array([3.89512946e+00, 4.25199632e+00, 4.40346306e+00, ...,\n       9.94999536e+03, 9.95000096e+03, 9.95000759e+03])\n array([4.42642974e+00, 4.62996318e+00, 4.64766319e+00, ...,\n       9.94985596e+03, 9.94990672e+03, 9.94997426e+03])\n array([4.67436321e+00, 6.84586434e+00, 8.99506547e+00, ...,\n       9.95001289e+03, 9.95002709e+03, 9.95002932e+03])\n array([3.80319608e+00, 3.81082942e+00, 3.82412943e+00, ...,\n       9.94986096e+03, 9.94991966e+03, 9.94992699e+03])\n array([4.12822959e+00, 4.78029660e+00, 4.78322993e+00, ...,\n       9.94977609e+03, 9.94983516e+03, 9.94996259e+03])\n array([3.85096277e+00, 4.42519641e+00, 5.37733024e+00, ...,\n       9.94990776e+03, 9.94991639e+03, 9.95001872e+03])\n array([3.79376275e+00, 3.94809616e+00, 4.17412961e+00, ...,\n       9.95001689e+03, 9.95001929e+03, 9.95002972e+03])\n array([4.05599622e+00, 5.43686361e+00, 6.48793082e+00, ...,\n       9.94967669e+03, 9.94978919e+03, 9.94990376e+03])\n array([3.79392941e+00, 4.15556293e+00, 4.16589627e+00, ...,\n       9.94997282e+03, 9.94998416e+03, 9.95000662e+03])\n array([4.11142958e+00, 4.47829644e+00, 4.66566320e+00, ...,\n       9.94992192e+03, 9.94994769e+03, 9.95000212e+03])\n array([4.13426292e+00, 4.29869634e+00, 4.31222968e+00, ...,\n       9.94463179e+03, 9.94613249e+03, 9.94618869e+03])\n array([7.32226459e+00, 7.46759800e+00, 7.97546494e+00, ...,\n       9.94942722e+03, 9.94952172e+03, 9.94982526e+03])\n array([3.85189611e+00, 4.06426289e+00, 4.25369632e+00, ...,\n       9.94984146e+03, 9.94990426e+03, 9.94997666e+03])\n array([5.62449704e+00, 5.89156384e+00, 6.30296406e+00, ...,\n       9.94965429e+03, 9.94968029e+03, 9.94990099e+03])\n array([6.36609743e+00, 8.77074067e+01, 1.11637519e+02, ...,\n       9.94521032e+03, 9.94747746e+03, 9.94777992e+03])\n array([ 271.78556977,  283.98144282,  297.9369168 , ..., 9949.52422337,\n       9949.61985675, 9949.96352358])\n array([5.03696340e+00, 7.06766446e+00, 7.12529782e+00, ...,\n       9.94983186e+03, 9.94994556e+03, 9.95002019e+03])\n array([4.98546337e+00, 6.33303074e+00, 6.39883078e+00, ...,\n       9.94982659e+03, 9.94990356e+03, 9.94994289e+03])\n array([3.91239614e+00, 3.91572948e+00, 3.91932948e+00, ...,\n       9.94994199e+03, 9.94997476e+03, 9.95000926e+03])\n array([6.01583058e+00, 6.33266407e+00, 6.33489741e+00, ...,\n       9.94976229e+03, 9.94991856e+03, 9.95002602e+03])\n array([3.85996278e+00, 4.12686292e+00, 4.18589628e+00, ...,\n       9.94987406e+03, 9.94994746e+03, 9.95001896e+03])\n array([5.82993048e+00, 6.14479731e+00, 6.15493065e+00, ...,\n       9.94981516e+03, 9.94987799e+03, 9.94994996e+03])\n array([8.11396501e+00, 8.20406505e+00, 1.34791345e+01, ...,\n       9.94995696e+03, 9.95000222e+03, 9.95002496e+03])\n array([  10.18816609,   21.10950515,   21.39303863, ..., 9949.83635685,\n       9949.90659022, 9950.02149028])\n array([  12.91703419,   13.90680137,   14.00113476, ..., 9949.88165688,\n       9949.90529022, 9949.97902359])\n array([7.16376451e+00, 1.60680358e+01, 1.76509033e+01, ...,\n       9.94938296e+03, 9.94994099e+03, 9.94996132e+03])\n array([8.41089850e+00, 1.06554997e+01, 1.07594331e+01, ...,\n       9.94956929e+03, 9.94960256e+03, 9.94961172e+03])\n array([3.81102942e+00, 3.89542946e+00, 3.94142949e+00, ...,\n       9.95000766e+03, 9.95001326e+03, 9.95002309e+03])\n array([4.02232953e+00, 6.44136413e+00, 8.80969871e+00, ...,\n       9.94957712e+03, 9.94962289e+03, 9.94995966e+03])\n array([ 112.81931985,  265.22536633,  444.75762703, ..., 9950.00395694,\n       9950.01242361, 9950.01559028])\n array([4.05552955e+00, 5.90353052e+00, 6.09216395e+00, ...,\n       9.94894526e+03, 9.94895746e+03, 9.94935659e+03])\n array([3.82649610e+00, 3.92326281e+00, 3.95926283e+00, ...,\n       9.94986806e+03, 9.94988032e+03, 9.94997816e+03])\n array([4.17779628e+00, 4.86452997e+00, 5.61416370e+00, ...,\n       9.95001006e+03, 9.95001859e+03, 9.95002272e+03])\n array([3.83019610e+00, 3.96822950e+00, 4.31206302e+00, ...,\n       9.94962759e+03, 9.94980899e+03, 9.94992642e+03])\n array([3.85276278e+00, 4.70082989e+00, 5.14773012e+00, ...,\n       9.94961456e+03, 9.94978439e+03, 9.94991849e+03])\n array([  13.01843424,   13.03850092,   14.38746829, ..., 9949.92442356,\n       9949.92912357, 9949.96645692])\n array([  13.85880135,   15.53116889,   23.69157317, ..., 9949.92842357,\n       9949.93682357, 9949.94719024])\n array([4.03986287e+00, 4.20076296e+00, 4.22589630e+00, ...,\n       9.94994632e+03, 9.94996739e+03, 9.94997252e+03])\n array([3.82442943e+00, 3.89806280e+00, 3.93802949e+00, ...,\n       9.94989522e+03, 9.94991452e+03, 9.94994282e+03])\n array([8.56596524e+00, 1.13342667e+01, 1.14372667e+01, ...,\n       9.94998842e+03, 9.94999142e+03, 9.95002832e+03])\n array([3.91699614e+00, 3.98499618e+00, 4.00792952e+00, ...,\n       9.90489497e+03, 9.90501270e+03, 9.90506470e+03])\n array([3.80049608e+00, 3.81972943e+00, 3.87566279e+00, ...,\n       9.94963036e+03, 9.94973299e+03, 9.94989716e+03])\n array([3.81869609e+00, 3.96446283e+00, 4.14869626e+00, ...,\n       9.94977802e+03, 9.94990329e+03, 9.95002162e+03])\n array([6.50939750e+00, 8.07856499e+00, 1.13854334e+01, ...,\n       9.94992446e+03, 9.94998736e+03, 9.95001562e+03])\n array([3.82819610e+00, 4.06136289e+00, 4.14679626e+00, ...,\n       9.94978649e+03, 9.94981422e+03, 9.94990486e+03])\n array([  13.07956761,   13.17543433,   14.43883499, ..., 9949.93569024,\n       9949.97935692, 9950.01169027])\n array([3.93659615e+00, 4.29889634e+00, 4.53652980e+00, ...,\n       9.94956726e+03, 9.94965322e+03, 9.95000716e+03])\n array([6.00433057e+00, 9.36396566e+00, 1.19276337e+01, ...,\n       9.94882969e+03, 9.94929912e+03, 9.94985929e+03])\n array([3.78109607e+00, 3.84009610e+00, 3.91189614e+00, ...,\n       9.94986682e+03, 9.94992252e+03, 9.94998572e+03])\n array([6.75453096e+00, 1.13449667e+01, 1.46555018e+01, ...,\n       9.94867152e+03, 9.94872306e+03, 9.94932346e+03])\n array([4.06106289e+00, 4.16909627e+00, 5.79476379e+00, ...,\n       9.94985256e+03, 9.94994886e+03, 9.94998326e+03])\n array([4.91909667e+00, 5.03213006e+00, 5.30366354e+00, ...,\n       9.94937832e+03, 9.94938846e+03, 9.94952606e+03])\n array([4.10249624e+00, 4.15762960e+00, 4.21882963e+00, ...,\n       9.94991789e+03, 9.94993349e+03, 9.94997336e+03])\n array([3.98126284e+00, 4.00849619e+00, 4.25212965e+00, ...,\n       9.94993846e+03, 9.95000892e+03, 9.95002239e+03])\n array([5.53469699e+00, 5.69723041e+00, 5.69953041e+00, ...,\n       9.94973602e+03, 9.94994572e+03, 9.95000872e+03])\n array([3.79286274e+00, 3.86596278e+00, 4.10962958e+00, ...,\n       9.94986462e+03, 9.94999622e+03, 9.95002519e+03])\n array([  12.79486746,   14.7183018 ,   15.74713567, ..., 9918.78290834,\n       9924.58751118, 9937.68998425])\n array([4.12532959e+00, 4.70182989e+00, 4.70639656e+00, ...,\n       9.94983236e+03, 9.94987232e+03, 9.94996172e+03])\n array([  25.00460719,   57.42309083,   63.14892716, ..., 9914.32097283,\n       9922.91361036, 9942.21538646])\n array([4.10226291e+00, 4.26049632e+00, 4.26429632e+00, ...,\n       9.94979182e+03, 9.94986952e+03, 9.94988746e+03])\n array([3.80822942e+00, 3.84112944e+00, 4.01549619e+00, ...,\n       9.94985882e+03, 9.94991042e+03, 9.95002072e+03])\n array([4.21999630e+00, 5.29986353e+00, 5.66503039e+00, ...,\n       9.94809479e+03, 9.94855616e+03, 9.94973512e+03])\n array([  22.79290603,   32.84004462,   41.49168249, ..., 9949.93392357,\n       9949.95655691, 9949.97752359])\n array([3.78462941e+00, 4.56572982e+00, 5.73926376e+00, ...,\n       9.94982949e+03, 9.94994826e+03, 9.95002049e+03])\n array([3.80762942e+00, 3.84446277e+00, 3.85009611e+00, ...,\n       9.95000132e+03, 9.95001162e+03, 9.95002836e+03])\n array([5.19486348e+00, 5.64496371e+00, 8.50119854e+00, ...,\n       9.94955629e+03, 9.94980802e+03, 9.94994346e+03])\n array([3.78472941e+00, 3.87456279e+00, 3.96812950e+00, ...,\n       9.94973556e+03, 9.95000059e+03, 9.95001976e+03])\n array([4.48916311e+00, 5.59916369e+00, 5.60176369e+00, ...,\n       9.94987349e+03, 9.94990716e+03, 9.94998782e+03])\n array([3.79869608e+00, 3.80416275e+00, 3.84539611e+00, ...,\n       9.94928109e+03, 9.94947129e+03, 9.94993302e+03])\n array([  29.31717611,   30.81861023,   30.92277695, ..., 9948.76125633,\n       9949.35715662, 9949.74069014])\n array([4.07382956e+00, 4.10496291e+00, 4.18589628e+00, ...,\n       9.94972626e+03, 9.94977432e+03, 9.94990499e+03])\n array([4.77842993e+00, 6.73233095e+00, 7.10776448e+00, ...,\n       9.94931079e+03, 9.94966826e+03, 9.94990799e+03])\n array([  15.80286903,  102.11888091,  106.95361677, ..., 9924.5681445 ,\n       9936.72851711, 9942.2964865 ])\n array([3.93386282e+00, 5.70026374e+00, 5.70293041e+00, ...,\n       9.94980632e+03, 9.94985249e+03, 9.94999112e+03])\n array([4.36602971e+00, 4.72856323e+00, 5.63736371e+00, ...,\n       9.94676012e+03, 9.94845582e+03, 9.94881369e+03])\n array([3.82059609e+00, 6.45626414e+00, 6.59173088e+00, ...,\n       9.94988892e+03, 9.94996012e+03, 9.95000339e+03])\n array([4.12102958e+00, 4.13296292e+00, 4.58652983e+00, ...,\n       9.94982456e+03, 9.94994609e+03, 9.94999759e+03])\n array([  15.94890244,   19.26303751,   21.6490721 , ..., 9949.75919015,\n       9949.79865684, 9950.01389027])\n array([5.88709717e+00, 6.71999761e+00, 1.02759661e+01, ...,\n       9.94949482e+03, 9.94953402e+03, 9.94970959e+03])\n array([3.77856274e+00, 3.85026277e+00, 3.95189616e+00, ...,\n       9.94994549e+03, 9.94996429e+03, 9.94997229e+03])\n array([5.58999702e+00, 5.88403051e+00, 7.01923110e+00, ...,\n       9.94993426e+03, 9.94995032e+03, 9.94998146e+03])\n array([3.85639611e+00, 4.07066289e+00, 4.64166319e+00, ...,\n       9.94721422e+03, 9.94864376e+03, 9.94928652e+03])\n array([4.50759645e+00, 4.85616330e+00, 5.47729696e+00, ...,\n       9.92827655e+03, 9.93227631e+03, 9.94684329e+03])\n array([5.95709721e+00, 7.02499777e+00, 9.15599889e+00, ...,\n       9.94944172e+03, 9.94950839e+03, 9.94997669e+03])\n array([ 322.8923632 ,  322.8984632 ,  379.38049279, ..., 9941.33241936,\n       9945.4301547 , 9948.85902304])\n array([9.70656584e+00, 1.10820999e+01, 1.10863999e+01, ...,\n       9.94961459e+03, 9.94980109e+03, 9.94982179e+03])\n array([3.79546275e+00, 3.82112943e+00, 3.84589611e+00, ...,\n       9.94978136e+03, 9.94985286e+03, 9.94988739e+03])\n array([4.14752960e+00, 4.16086294e+00, 4.17059628e+00, ...,\n       9.94990126e+03, 9.94996156e+03, 9.95000716e+03])\n array([5.12053011e+00, 6.78786431e+00, 7.44553132e+00, ...,\n       9.94893542e+03, 9.94902842e+03, 9.94908052e+03])\n array([3.81476276e+00, 3.84216277e+00, 3.90842947e+00, ...,\n       9.94995282e+03, 9.95000502e+03, 9.95002929e+03])\n array([3.87556279e+00, 3.95919617e+00, 3.98986285e+00, ...,\n       9.94978792e+03, 9.94983312e+03, 9.94986379e+03])\n array([3.79642941e+00, 3.93266282e+00, 3.94539616e+00, ...,\n       9.94569265e+03, 9.94602409e+03, 9.94618309e+03])\n array([8.68546531e+00, 8.70269865e+00, 7.68926677e+01, ...,\n       9.94972069e+03, 9.94983536e+03, 9.94984559e+03])\n array([4.65472986e+00, 8.73186533e+00, 9.40106568e+00, ...,\n       9.94927412e+03, 9.94946429e+03, 9.94946842e+03])\n array([3.78002940e+00, 3.78582941e+00, 3.84332944e+00, ...,\n       9.94929492e+03, 9.94950326e+03, 9.94950739e+03])\n array([8.74423200e+00, 9.70439917e+00, 1.12658333e+01, ...,\n       9.94736542e+03, 9.94819642e+03, 9.94898262e+03])\n array([  44.14955055,   45.17268442,   74.48989977, ..., 9950.00749027,\n       9950.01282361, 9950.02579028])\n array([3.84719611e+00, 4.20786296e+00, 4.24372965e+00, ...,\n       9.94757656e+03, 9.94786776e+03, 9.94787936e+03])\n array([8.69013198e+00, 1.78199701e+01, 3.30413447e+01, ...,\n       9.94999706e+03, 9.95000306e+03, 9.95002732e+03])\n array([4.15992960e+00, 4.71162989e+00, 5.08843009e+00, ...,\n       9.94942822e+03, 9.94959572e+03, 9.94996842e+03])\n array([3.87892946e+00, 3.88276279e+00, 3.88856279e+00, ...,\n       9.94964956e+03, 9.94965452e+03, 9.94987609e+03])\n array([3.82752943e+00, 3.90676280e+00, 3.96096283e+00, ...,\n       9.94955956e+03, 9.94967922e+03, 9.94969182e+03])\n array([3.82069609e+00, 3.82539609e+00, 3.85326278e+00, ...,\n       9.94994662e+03, 9.94995029e+03, 9.94995809e+03])\n array([3.95502950e+00, 4.28766300e+00, 4.29252967e+00, ...,\n       9.94949606e+03, 9.94961286e+03, 9.94984386e+03])\n array([ 270.35840235,  270.36606903,  270.41640238, ..., 9949.61312341,\n       9949.93965691, 9949.94529024])\n array([  14.30110158,   72.35189865,   80.9104698 , ..., 9949.85342353,\n       9949.86042353, 9949.87285687])\n array([4.41206307e+00, 5.08739676e+00, 5.09326343e+00, ...,\n       9.94958949e+03, 9.94963022e+03, 9.94986756e+03])\n array([3.82749610e+00, 4.91983000e+00, 5.12956344e+00, ...,\n       9.94964416e+03, 9.94966696e+03, 9.94987832e+03])\n array([3.91796281e+00, 4.22492964e+00, 4.41276307e+00, ...,\n       9.94986619e+03, 9.94997676e+03, 9.95001042e+03])\n array([3.81882942e+00, 3.85009611e+00, 4.01729620e+00, ...,\n       9.94992269e+03, 9.94993272e+03, 9.94996689e+03])\n array([  85.40800549,  240.07058649,  434.85928851, ..., 9949.34558995,\n       9949.39458997, 9949.52732337])\n array([  57.79892436,   58.40945802,  122.59799163, ..., 9948.90738973,\n       9948.92595641, 9948.96145643])\n array([6.84729768e+00, 9.25166560e+00, 9.64673248e+00, ...,\n       9.94787412e+03, 9.94816852e+03, 9.94862176e+03])\n array([6.46929748e+00, 1.14884334e+01, 1.16413669e+01, ...,\n       9.94984859e+03, 9.94986272e+03, 9.94999089e+03])\n array([3.78112941e+00, 3.88579613e+00, 3.95949617e+00, ...,\n       9.94969556e+03, 9.94993889e+03, 9.95002136e+03])\n array([3.97849618e+00, 4.03912954e+00, 4.29016301e+00, ...,\n       9.94980459e+03, 9.95001502e+03, 9.95002879e+03])\n array([  11.68503354,   11.73143357,   11.74566691, ..., 9949.34382328,\n       9949.36912329, 9949.54799005])\n array([  11.5333668 ,   21.83993886,   22.34447246, ..., 9948.30705611,\n       9948.58638958, 9949.05325647])\n array([  28.40190897,   37.04791349,   37.07321351, ..., 9949.69239012,\n       9949.82052351, 9949.8558902 ])\n array([4.12452958e+00, 4.19792962e+00, 4.27602966e+00, ...,\n       9.94924762e+03, 9.94941809e+03, 9.94967992e+03])\n array([6.48269749e+00, 6.59476421e+00, 6.85513102e+00, ...,\n       9.94951919e+03, 9.94958229e+03, 9.94978866e+03])\n array([  28.38284229,   28.44957566,   28.51044236, ..., 9947.38698899,\n       9947.56995575, 9947.6706558 ])\n array([4.48399644e+00, 4.89456332e+00, 5.92093053e+00, ...,\n       9.95000506e+03, 9.95001569e+03, 9.95002509e+03])\n array([6.60179755e+00, 6.61796422e+00, 6.63743090e+00, ...,\n       9.94948416e+03, 9.94966806e+03, 9.94978482e+03])\n array([4.22099630e+00, 4.25162965e+00, 4.32272969e+00, ...,\n       9.93659328e+03, 9.93702202e+03, 9.94412835e+03])\n array([6.41013078e+00, 1.14678001e+01, 1.15088668e+01, ...,\n       9.94960926e+03, 9.94967499e+03, 9.94996172e+03])\n array([  12.72590076,   28.42177564,   28.48437568, ..., 9926.81117893,\n       9929.86121376, 9930.09501387])\n array([4.16372961e+00, 4.16609627e+00, 4.30836301e+00, ...,\n       9.94793819e+03, 9.94857376e+03, 9.94935536e+03])\n array([  92.35940913,  355.77641376,  355.77894709, ..., 9944.06678737,\n       9944.11775406, 9946.1154217 ])\n array([  11.54703347,   11.61793351,   12.22653383, ..., 9940.99735253,\n       9942.17728644, 9943.12605357])\n array([3.97759617e+00, 4.09256290e+00, 4.18846295e+00, ...,\n       9.74174792e+03, 9.81201059e+03, 9.94889002e+03])\n array([  48.23925269,   84.65907176,   84.81833851, ..., 9949.28672325,\n       9949.3211566 , 9949.94885691])\n array([5.33369688e+00, 5.99539723e+00, 6.15803065e+00, ...,\n       9.94993522e+03, 9.94999542e+03, 9.95000739e+03])\n array([3.80529608e+00, 3.85939611e+00, 3.91692948e+00, ...,\n       9.94986166e+03, 9.94993716e+03, 9.95000062e+03])\n array([4.25716299e+00, 9.92509929e+00, 1.13748334e+01, ...,\n       9.94985349e+03, 9.94992606e+03, 9.95002656e+03])\n array([4.16286294e+00, 4.21989630e+00, 4.22729631e+00, ...,\n       9.94998492e+03, 9.94999372e+03, 9.95000526e+03])\n array([  11.40036673,   11.43073341,   11.43826675, ..., 9949.94872358,\n       9950.0056236 , 9950.01492361])\n array([3.86146278e+00, 3.90662947e+00, 3.97152950e+00, ...,\n       9.94976342e+03, 9.94986449e+03, 9.94996762e+03])\n array([3.80586275e+00, 3.92149615e+00, 4.05399621e+00, ...,\n       9.94949892e+03, 9.94967062e+03, 9.94996399e+03])\n array([3.95772950e+00, 4.38542972e+00, 4.52246313e+00, ...,\n       9.94951209e+03, 9.94976566e+03, 9.94997486e+03])\n array([3.83646277e+00, 3.93652949e+00, 4.04132954e+00, ...,\n       9.94961076e+03, 9.94972256e+03, 9.94979982e+03])\n array([4.37959639e+00, 5.54186366e+00, 6.38346410e+00, ...,\n       9.94991916e+03, 9.94995242e+03, 9.95001886e+03])\n array([9.82763257e+00, 4.96525201e+01, 6.30982938e+01, ...,\n       9.94862892e+03, 9.94869782e+03, 9.94965686e+03])\n array([3.82042943e+00, 3.88022946e+00, 3.90786280e+00, ...,\n       9.94999319e+03, 9.95001299e+03, 9.95002609e+03])\n array([3.94592949e+00, 4.08172956e+00, 5.35876356e+00, ...,\n       9.94987106e+03, 9.94998492e+03, 9.95001446e+03])\n array([4.52572980e+00, 4.53656313e+00, 5.52046365e+00, ...,\n       9.94838769e+03, 9.94875926e+03, 9.94878622e+03])\n array([3.83902944e+00, 3.92632948e+00, 4.10186291e+00, ...,\n       9.94807756e+03, 9.94824142e+03, 9.95002686e+03])\n array([4.27566300e+00, 6.76333097e+00, 6.83563100e+00, ...,\n       9.94981616e+03, 9.95001229e+03, 9.95002729e+03])\n array([4.48399644e+00, 5.56879701e+00, 6.53996418e+00, ...,\n       9.94843829e+03, 9.94851769e+03, 9.94869609e+03])\n array([  27.90357537,   31.37911053,   48.14778597, ..., 9948.39398948,\n       9948.41702283, 9948.61612292])\n array([9.74019919e+00, 1.47304685e+01, 1.60745025e+01, ...,\n       9.94934862e+03, 9.94941846e+03, 9.95002382e+03])\n array([  11.44983342,   33.47121162,   34.43504546, ..., 9949.68365678,\n       9949.76815682, 9950.02949028])\n array([  11.58103349,   18.91047066,   40.08548175, ..., 9949.40458998,\n       9949.57529006, 9949.77072349])\n array([ 202.52940016,  224.93487856,  250.70289206, ..., 9949.78239016,\n       9949.82859018, 9949.9254569 ])\n array([7.32786460e+00, 6.83396632e+01, 8.48498719e+01, ...,\n       9.94435012e+03, 9.94453365e+03, 9.94879852e+03])\n array([  48.29035272,   85.72310565,   90.29810805, ..., 9947.02488881,\n       9947.22922225, 9948.42072283])\n array([  28.33984227,   76.04700059,   85.31773878, ..., 9937.58595087,\n       9938.52988466, 9948.75858966])\n array([  11.38473339,   11.45443342,   31.75914406, ..., 9947.10148885,\n       9949.07698982, 9949.35452329])\n array([  48.34268608,   84.5940384 ,   84.60610507, ..., 9948.99238978,\n       9949.72762347, 9949.83002352])\n array([  11.44840009,   11.76886692,   34.14531197, ..., 9944.40698753,\n       9948.74888966, 9948.76888967])\n array([  28.32467559,   28.34244227,   28.39064229, ..., 9937.7979843 ,\n       9937.87651767, 9937.94215104])\n array([3.80781359e+00, 3.96244680e+00, 3.97091347e+00, ...,\n       9.96608104e+03, 9.96619138e+03, 9.96620341e+03])\n array([4.99211268e+00, 5.57417890e+00, 5.57541223e+00, ...,\n       9.91092139e+03, 9.93558007e+03, 9.93606793e+03])\n array([4.16407998e+00, 4.21191328e+00, 4.24884658e+00, ...,\n       9.96606594e+03, 9.96607631e+03, 9.96619928e+03])\n array([  11.61207425,   68.62569702,  175.45138143, ..., 9940.2298961 ,\n       9940.62792913, 9950.46722155])\n array([4.30647987e+00, 4.99084601e+00, 5.57484556e+00, ...,\n       9.96590828e+03, 9.96594224e+03, 9.96609708e+03])\n array([4.01368010e+00, 5.60177888e+00, 5.63574552e+00, ...,\n       9.96604761e+03, 9.96605408e+03, 9.96608551e+03])\n array([3.96071347e+00, 3.97108013e+00, 3.99641345e+00, ...,\n       9.96616434e+03, 9.96619894e+03, 9.96623114e+03])\n array([3.80711359e+00, 3.84338023e+00, 3.84788023e+00, ...,\n       9.96590458e+03, 9.96608711e+03, 9.96620451e+03])\n array([5.57097890e+00, 5.58724555e+00, 6.62344476e+00, ...,\n       9.96618928e+03, 9.96619704e+03, 9.96620364e+03])\n array([4.01918009e+00, 4.84194613e+00, 4.97367936e+00, ...,\n       9.96568001e+03, 9.96581421e+03, 9.96619328e+03])\n array([4.25024658e+00, 4.26127991e+00, 4.27037990e+00, ...,\n       9.96584534e+03, 9.96608644e+03, 9.96619998e+03])\n array([5.14311256e+00, 5.15234589e+00, 5.15981255e+00, ...,\n       9.96405324e+03, 9.96409481e+03, 9.96472224e+03])\n array([5.09837926e+00, 8.67187651e+00, 9.69707572e+00, ...,\n       9.96609028e+03, 9.96609351e+03, 9.96616194e+03])\n array([6.21411174e+00, 1.18784740e+01, 1.18818074e+01, ...,\n       9.96448664e+03, 9.96478221e+03, 9.96511184e+03])\n array([8.65754319e+00, 8.66360985e+00, 8.67414318e+00, ...,\n       9.96471948e+03, 9.96583168e+03, 9.96622094e+03])\n array([5.94197861e+00, 9.17154279e+00, 9.27597605e+00, ...,\n       9.96288181e+03, 9.96570781e+03, 9.96610638e+03])\n array([3.81068026e+00, 3.82464691e+00, 3.82814691e+00, ...,\n       9.96583764e+03, 9.96585611e+03, 9.96615498e+03])\n array([8.89267634e+00, 1.13450411e+01, 1.13498745e+01, ...,\n       9.96605231e+03, 9.96613474e+03, 9.96617294e+03])\n array([6.05744519e+00, 6.83124460e+00, 8.82350973e+00, ...,\n       9.96591804e+03, 9.96594241e+03, 9.96605591e+03])\n array([  15.77040438,   17.00680343,   21.74756644, ..., 9966.1975761 ,\n       9966.21297609, 9966.22464275])\n array([  11.35167445,   11.35584111,   11.53500764, ..., 9966.09344285,\n       9966.10307618, 9966.13244282])\n array([  13.02153983,   19.68676803,   26.12736307, ..., 9965.83557638,\n       9965.8561097 , 9966.19854277])\n array([  14.40010543,   14.4055721 ,   14.41130543, ..., 9962.22274583,\n       9965.72060981, 9965.75194311])\n array([  14.02650572,   14.03963905,   14.0536057 , ..., 9964.62327732,\n       9964.66604395, 9965.54914327])\n array([4.06724672e+00, 4.23931326e+00, 4.51114638e+00, ...,\n       9.96559928e+03, 9.96571064e+03, 9.96578454e+03])\n array([3.86538021e+00, 3.95164681e+00, 4.00754677e+00, ...,\n       9.96593144e+03, 9.96610071e+03, 9.96618744e+03])\n array([4.40477980e+00, 4.53507970e+00, 4.61931297e+00, ...,\n       9.96616331e+03, 9.96617661e+03, 9.96619658e+03])\n array([4.11274669e+00, 4.21517994e+00, 4.39701314e+00, ...,\n       9.96606054e+03, 9.96616168e+03, 9.96620478e+03])\n array([4.18654663e+00, 4.71391289e+00, 5.13871257e+00, ...,\n       9.96601124e+03, 9.96611451e+03, 9.96619884e+03])\n array([4.35547984e+00, 4.65514627e+00, 4.95471271e+00, ...,\n       9.96598118e+03, 9.96607548e+03, 9.96620374e+03])\n array([6.64251141e+00, 9.13010949e+00, 1.14171744e+01, ...,\n       9.96599774e+03, 9.96608791e+03, 9.96617534e+03])\n array([4.11034669e+00, 4.20434662e+00, 4.47564641e+00, ...,\n       9.96540481e+03, 9.96584178e+03, 9.96591404e+03])\n array([4.21717994e+00, 4.22541327e+00, 4.40007980e+00, ...,\n       9.96540551e+03, 9.96554648e+03, 9.96583481e+03])\n array([4.11918002e+00, 5.68527881e+00, 1.13776078e+01, ...,\n       9.96023801e+03, 9.96347038e+03, 9.96450034e+03])\n array([4.62784629e+00, 4.88977942e+00, 5.05671263e+00, ...,\n       9.96581458e+03, 9.96603778e+03, 9.96617634e+03])\n array([5.08511261e+00, 6.34481164e+00, 6.41097825e+00, ...,\n       9.96601814e+03, 9.96614621e+03, 9.96617888e+03])\n array([4.51334638e+00, 1.11541079e+01, 1.12035746e+01, ...,\n       9.96566621e+03, 9.96568674e+03, 9.96571161e+03])\n array([4.16401332e+00, 5.00237934e+00, 6.08414517e+00, ...,\n       9.96619608e+03, 9.96620691e+03, 9.96621541e+03])\n array([  11.50887433,   11.69150752,   11.72344083, ..., 9965.97477628,\n       9966.10974284, 9966.12147616])]\n</pre> In\u00a0[24]: Copied! <pre>l_n_ids\n</pre> l_n_ids Out[24]: <pre>array([951814884, 951814876, 951815032, 951815275, 951815314, 951815335,\n       951815517, 951815642, 951815712, 951815812, 951815886, 951815948,\n       951815938, 951815929, 951815967, 951816201, 951816190, 951816180,\n       951816222, 951816328, 951816336, 951818175, 951816365, 951816480,\n       951816471, 951816452, 951816607, 951816565, 951816539, 951816416,\n       951816826, 951816691, 951816638, 951818326, 951816775, 951816951,\n       951816936, 951816988, 951817042, 951817026, 951817018, 951817177,\n       951817159, 951817153, 951817227, 951817219, 951817212, 951817185,\n       951817233, 951817257, 951817303, 951817350, 951817341, 951818214,\n       951817332, 951817324, 951817376, 951817367, 951817489, 951817431,\n       951817422, 951817396, 951817447, 951817440, 951817643, 951817514,\n       951817506, 951817482, 951818241, 951817532, 951817473, 951817589,\n       951817568, 951817559, 951817551, 951817634, 951817614, 951817605,\n       951817597, 951817693, 951817677, 951817651, 951817748, 951817712,\n       951817798, 951817823, 951817813, 951818248, 951817731, 951818268,\n       951818261, 951817867, 951817785, 951817927, 951817918, 951818276,\n       951817909, 951817953, 951817981, 951818350, 951818336, 951818307,\n       951818031, 951818068, 951818058, 951818049, 951818083, 951818441,\n       951818431, 951818460, 951818450, 951818497, 951818470, 951818505,\n       951818583, 951818566, 951818655, 951818629, 951818641, 951818732,\n       951818739, 951818779, 951818764, 951818803, 951818837, 951818810,\n       951818845, 951818886, 951818878, 951818998, 951819013, 951819005,\n       951819041, 951819076, 951819089, 951819118, 951819109, 951819140,\n       951819126, 951819191, 951819283, 951819262, 951819255, 951819314,\n       951819431, 951819393, 951819471, 951819496, 951819524, 951819578,\n       951819551, 951819651, 951819699, 951821897, 951819777, 951821903,\n       951820003, 951819958, 951819948, 951820035, 951820020, 951820012,\n       951821916, 951820046, 951820135, 951820085, 951820074, 951820179,\n       951820171, 951820364, 951820151, 951820142, 951820127, 951819967,\n       951820236, 951820295, 951820286, 951820356, 951820413, 951820405,\n       951820455, 951820485, 951820502, 951820510, 951820547, 951820541,\n       951820551, 951820565, 951820595, 951821627, 951820580, 951820574,\n       951820631, 951820623, 951820670, 951821635, 951820713, 951820699,\n       951820732, 951820745, 951820707, 951821642, 951820761, 951821656,\n       951820795, 951820754, 951820788, 951821663, 951820851, 951820844,\n       951821923, 951820816, 951820809, 951820884, 951820877, 951820864,\n       951820857, 951820837, 951820984, 951820902, 951820896, 951820890,\n       951820977, 951820969, 951820956, 951820938, 951821022, 951821065,\n       951821009, 951821000, 951820992, 951821841, 951821060, 951821054,\n       951821043, 951821037, 951821676, 951821114, 951821689, 951821081,\n       951821070, 951821087, 951821103, 951821122, 951821172, 951821165,\n       951821127, 951821711, 951821705, 951821156, 951821734, 951821230,\n       951821193, 951821208, 951821201, 951821292, 951821284, 951821274,\n       951821223, 951821726, 951821260, 951821252, 951821237, 951821315,\n       951821307, 951821351, 951821345, 951821339, 951821322, 951821430,\n       951821408, 951821385, 951821446, 951821489, 951809088, 951809153,\n       951809193, 951812064, 951812048, 951809254, 951809243, 951809334,\n       951809378, 951809496, 951809485, 951809540, 951809528, 951809507,\n       951809599, 951809586, 951809610, 951809640, 951812103, 951809648,\n       951812482, 951809714, 951809704, 951809767, 951809833, 951809888,\n       951809879, 951809932, 951809956, 951810140, 951810191, 951810314,\n       951810369, 951810338, 951810392, 951810425, 951812218, 951810459,\n       951810548, 951810517, 951810495, 951810564, 951810681, 951810724,\n       951810714, 951810747, 951810810, 951810800, 951810780, 951810862,\n       951810906, 951810821, 951811003, 951810960, 951810949, 951811011,\n       951812284, 951811082, 951811061, 951811155, 951811093, 951811269,\n       951811227, 951811217, 951811321, 951811306, 951811295, 951811440,\n       951811426, 951811399, 951812296, 951811514, 951811504, 951811494,\n       951811546, 951811535, 951811578, 951811558, 951812326, 951811646,\n       951811789, 951811778, 951803373, 951803302, 951798448, 951798461,\n       951798529, 951798623, 951798678, 951798836, 951798824, 951798812,\n       951798803, 951798792, 951798892, 951798882, 951798872, 951798849,\n       951798902, 951799024, 951799198, 951799233, 951803410, 951799311,\n       951799336, 951799405, 951799477, 951799419, 951803443, 951799532,\n       951799800, 951799976, 951800040, 951800083, 951800313, 951800330,\n       951800295, 951800362, 951800642, 951800597, 951800680, 951800893,\n       951800908, 951801041, 951800977, 951801069, 951801200, 951801187,\n       951801175, 951801153, 951801140, 951801127, 951801304, 951801290,\n       951801276, 951801248, 951801225, 951801414, 951801384, 951801330,\n       951801449, 951801437, 951801487, 951801475, 951801462, 951801585,\n       951801571, 951801545, 951801653, 951801785, 951801773, 951801760,\n       951801848, 951801836, 951801797, 951801901, 951801891, 951801859,\n       951801869, 951802013, 951802025, 951802068, 951802055, 951802089,\n       951802184, 951802098, 951802200, 951802233, 951802223, 951802334,\n       951802323, 951802310, 951802288, 951802346, 951802409, 951802420,\n       951802501, 951802492, 951803658, 951803611, 951808573, 951808581,\n       951803793, 951803783, 951803772, 951803750, 951803739, 951803728,\n       951803649, 951803924, 951803804, 951803717, 951803705, 951803696,\n       951803838, 951803826, 951803969, 951803949, 951803849, 951803882,\n       951803871, 951803979, 951803960, 951804045, 951804025, 951804015,\n       951804004, 951803995, 951804093, 951804067, 951804123, 951804152,\n       951804103, 951804356, 951804326, 951804171, 951804386, 951804443,\n       951804399, 951808624, 951804421, 951804411, 951804434, 951804478,\n       951808913, 951804602, 951804531, 951804520, 951804508, 951808643,\n       951804496, 951804625, 951804678, 951808652, 951804669, 951804652,\n       951804707, 951804792, 951804759, 951804838, 951804824, 951804877,\n       951804960, 951805029, 951805002, 951805042, 951805078, 951805053,\n       951808659, 951805114, 951805101, 951805256, 951805166, 951805233,\n       951805222, 951805201, 951805333, 951805290, 951805279, 951805267,\n       951805355, 951805340, 951805310, 951805387, 951805365, 951805427,\n       951808669, 951805507, 951805472, 951805458, 951805442, 951805582,\n       951805570, 951805592, 951805561, 951805659, 951805784, 951808686,\n       951808677, 951805943, 951805813, 951805774, 951805761, 951805750,\n       951805726, 951808696, 951805826, 951805931, 951805919, 951805875,\n       951805978, 951806082, 951806215, 951806266, 951806325, 951806358,\n       951806368, 951806377, 951806401, 951806712, 951806780, 951806770,\n       951806814, 951806801, 951806828, 951806876, 951806911, 951806899,\n       951806887, 951807116, 951807008, 951806958, 951806942, 951807087,\n       951807055, 951807270, 951807302, 951807374, 951807358, 951807399,\n       951807423, 951807434, 951807487, 951807445, 951807536, 951807495,\n       951807552, 951807608, 951807596, 951807630, 951807699, 951807680,\n       951807668, 951807659, 951807649, 951807639, 951807707, 951807733,\n       951807808, 951807822, 951807907, 951807880, 951808857, 951808026,\n       951808007, 951807987, 951807848, 951807997, 951807971, 951807962,\n       951807953, 951807935, 951808033, 951808059, 951808890, 951808100,\n       951808091, 951808147, 951808884, 951808875, 951808135, 951808122,\n       951808112, 951808193, 951808163, 951808898, 951808379, 951808326,\n       951808393, 951808498, 951808490, 951812742, 951814469, 951812764,\n       951812715, 951812753, 951812795, 951812879, 951812961, 951812995,\n       951813038, 951813178, 951813339, 951813441, 951813525, 951813598,\n       951813670, 951813756, 951813766, 951813786, 951813775, 951813797,\n       951813846, 951813836, 951813826, 951813941, 951813960, 951814704,\n       951814002, 951813991, 951813982, 951813971, 951814060, 951814108,\n       951814096, 951814089, 951814212, 951814199, 951814190, 951814312])</pre> In\u00a0[25]: Copied! <pre># Example of `t_start` and `t_stop` for a window length equal to 0.250sec\nt_start = 0.0\nt_stop  = 0.250\n</pre> # Example of `t_start` and `t_stop` for a window length equal to 0.250sec t_start = 0.0 t_stop  = 0.250 In\u00a0[26]: Copied! <pre># filtering by stilumus:\n\nn_stimulus = 20 # Replace 10 by l_stim_start_time.shape[0] (all the trials)\nn_neurons  = l_n_ids.shape[0]\n    \nspike_times = np.array([])\nii_spike_times = np.zeros([n_stimulus,n_neurons,2], dtype=np.uint32)\n\n\nfor i in range(n_stimulus):\n    print (\"Processing epoch #%s\" % (i+1))\n    tmp_start_time_i = l_stim_start_time[i] + t_start\n    tmp_stop_time_i  = l_stim_start_time[i] + t_stop\n    \n    for j in range(n_neurons):\n        tmp_spike_time  = session.spike_times[neurons.index[j]]\n        \n        tmp_spike_time  = tmp_spike_time[\n            (tmp_spike_time&gt;=tmp_start_time_i) &amp; (tmp_spike_time&lt;tmp_stop_time_i)\n        ]\n        spike_times = np.append(spike_times,tmp_spike_time - tmp_start_time_i)\n        ii_spike_times[i,j,0] = int(np.max(ii_spike_times))\n        ii_spike_times[i,j,1] = int(ii_spike_times[i,j,0] + len(tmp_spike_time))\n</pre> # filtering by stilumus:  n_stimulus = 20 # Replace 10 by l_stim_start_time.shape[0] (all the trials) n_neurons  = l_n_ids.shape[0]      spike_times = np.array([]) ii_spike_times = np.zeros([n_stimulus,n_neurons,2], dtype=np.uint32)   for i in range(n_stimulus):     print (\"Processing epoch #%s\" % (i+1))     tmp_start_time_i = l_stim_start_time[i] + t_start     tmp_stop_time_i  = l_stim_start_time[i] + t_stop          for j in range(n_neurons):         tmp_spike_time  = session.spike_times[neurons.index[j]]                  tmp_spike_time  = tmp_spike_time[             (tmp_spike_time&gt;=tmp_start_time_i) &amp; (tmp_spike_time <pre>Processing epoch #1\nProcessing epoch #2\nProcessing epoch #3\nProcessing epoch #4\nProcessing epoch #5\nProcessing epoch #6\nProcessing epoch #7\nProcessing epoch #8\nProcessing epoch #9\nProcessing epoch #10\nProcessing epoch #11\nProcessing epoch #12\nProcessing epoch #13\nProcessing epoch #14\nProcessing epoch #15\nProcessing epoch #16\nProcessing epoch #17\nProcessing epoch #18\nProcessing epoch #19\nProcessing epoch #20\n</pre> In\u00a0[27]: Copied! <pre>print (\"# Epochs: %i # Neurons: %i\" % (ii_spike_times.shape[0], ii_spike_times.shape[1]))\n</pre> print (\"# Epochs: %i # Neurons: %i\" % (ii_spike_times.shape[0], ii_spike_times.shape[1])) <pre># Epochs: 20 # Neurons: 684\n</pre> <p>Visualization by trial</p> In\u00a0[28]: Copied! <pre>def raster(spike_times, ii_spike_times, epoch_id, figsize=(14,4), xrange=()):\n    plt.figure(figsize=figsize)\n    for n in range(ii_spike_times.shape[1]): # num neurons\n        tmp_st = spike_times[ ii_spike_times[epoch_id,n,0]:ii_spike_times[epoch_id,n,1] ]\n        plt.plot(tmp_st, np.ones(tmp_st.shape[0])*n, marker='|', color='black', linestyle='')\n    plt.xlabel('Time [s]'); plt.ylabel('Neuron ID');\n    if xrange!=():\n        plt.xlim(xrange)\n</pre> def raster(spike_times, ii_spike_times, epoch_id, figsize=(14,4), xrange=()):     plt.figure(figsize=figsize)     for n in range(ii_spike_times.shape[1]): # num neurons         tmp_st = spike_times[ ii_spike_times[epoch_id,n,0]:ii_spike_times[epoch_id,n,1] ]         plt.plot(tmp_st, np.ones(tmp_st.shape[0])*n, marker='|', color='black', linestyle='')     plt.xlabel('Time [s]'); plt.ylabel('Neuron ID');     if xrange!=():         plt.xlim(xrange) In\u00a0[29]: Copied! <pre>raster(spike_times, ii_spike_times, epoch_id = 0, xrange=(t_stop, t_start))\n</pre> raster(spike_times, ii_spike_times, epoch_id = 0, xrange=(t_stop, t_start)) In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Spike Count (SC)</p> In\u00a0[30]: Copied! <pre>def get_spike_count_per_epoch(spike_times, ii_spike_times, normalized=''):\n'''\n    Spike Count per trial (Raw SC). \n    If `normalized` is equal to 'zscore', it return the z-scored spike counts.\n    '''\n    spike_count_per_epoch = np.zeros((ii_spike_times.shape[0], ii_spike_times.shape[1]), dtype=np.float32)\n    for i_e in range(ii_spike_times.shape[0]):\n        for i_n in range(ii_spike_times.shape[1]):#n_selected_neurons):\n            tmp_spks = spike_times[ii_spike_times[i_e,i_n,0]:ii_spike_times[i_e,i_n,1]]\n            spike_count_per_epoch[i_e, i_n] = len(tmp_spks)\n        \n    if normalized=='zscore':\n        for i_n in range(ii_spike_times.shape[1]):\n            if np.std(spike_count_per_epoch[:, i_n])&gt;0:\n                spike_count_per_epoch[:, i_n] = (spike_count_per_epoch[:, i_n] - np.mean(spike_count_per_epoch[:, i_n])) / np.std(spike_count_per_epoch[:, i_n])\n            \n    return spike_count_per_epoch\n</pre> def get_spike_count_per_epoch(spike_times, ii_spike_times, normalized=''):     '''     Spike Count per trial (Raw SC).      If `normalized` is equal to 'zscore', it return the z-scored spike counts.     '''     spike_count_per_epoch = np.zeros((ii_spike_times.shape[0], ii_spike_times.shape[1]), dtype=np.float32)     for i_e in range(ii_spike_times.shape[0]):         for i_n in range(ii_spike_times.shape[1]):#n_selected_neurons):             tmp_spks = spike_times[ii_spike_times[i_e,i_n,0]:ii_spike_times[i_e,i_n,1]]             spike_count_per_epoch[i_e, i_n] = len(tmp_spks)              if normalized=='zscore':         for i_n in range(ii_spike_times.shape[1]):             if np.std(spike_count_per_epoch[:, i_n])&gt;0:                 spike_count_per_epoch[:, i_n] = (spike_count_per_epoch[:, i_n] - np.mean(spike_count_per_epoch[:, i_n])) / np.std(spike_count_per_epoch[:, i_n])                  return spike_count_per_epoch In\u00a0[31]: Copied! <pre>def euclidean_dist(st1, st2):\n'''\n    Euclidean distance between two spike trains `st1` and `st2`.\n    '''\n    ret = 0.\n    for ii in range(len(st1)):\n        ret += (st1[ii]-st2[ii])**2 # sum\n    \n    return np.sqrt(ret)\n\ndef diss_spike_counts(SC):\n'''\n    Dissimilarity Matrix between spike count vectors via Euclidean distance.\n    '''\n    diss_spike_count = np.zeros((SC.shape[0], SC.shape[0]))\n    for i_e1 in range(SC.shape[0]):\n        for i_e2 in range(i_e1, SC.shape[0]):\n            diss_spike_count[i_e1, i_e2] = euclidean_dist(SC[i_e1], SC[i_e2])\n            diss_spike_count[i_e2, i_e1] = diss_spike_count[i_e1, i_e2]\n    return diss_spike_count\n</pre> def euclidean_dist(st1, st2):     '''     Euclidean distance between two spike trains `st1` and `st2`.     '''     ret = 0.     for ii in range(len(st1)):         ret += (st1[ii]-st2[ii])**2 # sum          return np.sqrt(ret)  def diss_spike_counts(SC):     '''     Dissimilarity Matrix between spike count vectors via Euclidean distance.     '''     diss_spike_count = np.zeros((SC.shape[0], SC.shape[0]))     for i_e1 in range(SC.shape[0]):         for i_e2 in range(i_e1, SC.shape[0]):             diss_spike_count[i_e1, i_e2] = euclidean_dist(SC[i_e1], SC[i_e2])             diss_spike_count[i_e2, i_e1] = diss_spike_count[i_e1, i_e2]     return diss_spike_count In\u00a0[32]: Copied! <pre># let's compute spike count per trial\nSC = get_spike_count_per_epoch(spike_times, ii_spike_times)\n</pre> # let's compute spike count per trial SC = get_spike_count_per_epoch(spike_times, ii_spike_times) In\u00a0[34]: Copied! <pre># Computing dissimilarity matrix (Euclidean distance of Spike count vectors)\ndissimilarities = diss_spike_counts(SC)\n</pre> # Computing dissimilarity matrix (Euclidean distance of Spike count vectors) dissimilarities = diss_spike_counts(SC) In\u00a0[35]: Copied! <pre>fs = 14 # fontsize\nplt.figure(figsize=(7,6))\nplt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs)\n_ = plt.colorbar(label='Euclidean distance')\n</pre> fs = 14 # fontsize plt.figure(figsize=(7,6)) plt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs) _ = plt.colorbar(label='Euclidean distance') In\u00a0[36]: Copied! <pre>fs = 14 # fontsize\nplt.figure(figsize=(7,6))\nplt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs)\n_ = plt.colorbar(label='Euclidean distance')\n</pre> fs = 14 # fontsize plt.figure(figsize=(7,6)) plt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs) _ = plt.colorbar(label='Euclidean distance') In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#libraries-and-data-loading","title":"Libraries and Data loading\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#data-analysis","title":"Data Analysis\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#todo","title":"TODO\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#playground","title":"Playground\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#stimulus-presentation","title":"Stimulus presentation\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#accessing-neurons-and-spiketimes","title":"Accessing neurons and spiketimes\u00b6","text":""},{"location":"notebooks/NWB_data_analysis_tutorial_extended/#todo","title":"TODO:\u00b6","text":""},{"location":"notebooks/NWB_data_exploration/","title":"NWB data exploration","text":"In\u00a0[1]: Copied! <pre>%load_ext autoreload\n\nimport os\nimport sys\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# warnings from jupyter notebook\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%autoreload 2\n</pre> %load_ext autoreload  import os import sys  import numpy as np import pandas as pd import matplotlib.pyplot as plt  # warnings from jupyter notebook import warnings warnings.filterwarnings('ignore')  %autoreload 2 In\u00a0[2]: Copied! <pre># Install allensdk! \nfrom allensdk.brain_observatory.ecephys.ecephys_session import EcephysSession\n</pre> # Install allensdk!  from allensdk.brain_observatory.ecephys.ecephys_session import EcephysSession In\u00a0[3]: Copied! <pre>import hdbscan\nfrom sklearn.manifold import TSNE\nimport matplotlib.pyplot as plt\n</pre> import hdbscan from sklearn.manifold import TSNE import matplotlib.pyplot as plt In\u00a0[4]: Copied! <pre>! ls -l /mnt/gs/departmentN4/AllenVisualCoding/data_boris/\n</pre> ! ls -l /mnt/gs/departmentN4/AllenVisualCoding/data_boris/ <pre>total 76603281\r\n-rwxrwx--- 1 root       departmentn4 1862261144 May 26  2020 1026123377\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123377_\r\n-rwxrwx--- 1 root       departmentn4 1859545192 May 26  2020 1026123537\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123537_\r\n-rwxrwx--- 1 root       departmentn4 2912508032 May 26  2020 1026123599\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123599_\r\n-rwxrwx--- 1 root       departmentn4 1960982972 May 26  2020 1026123651\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123651_\r\n-rwxrwx--- 1 root       departmentn4 2376304984 May 26  2020 1026123685\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123685_\r\n-rwxrwx--- 1 root       departmentn4 1736516600 May 26  2020 1026123696\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123696_\r\n-rwxrwx--- 1 root       departmentn4 2198584804 May 26  2020 1026123877\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123877_\r\n-rwxrwx--- 1 root       departmentn4 2156671312 May 26  2020 1026123897\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123897_\r\n-rwxrwx--- 1 root       departmentn4 2917686364 May 26  2020 1026123964\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123964_\r\n-rwxrwx--- 1 root       departmentn4 2182040332 May 26  2020 1026123989\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026123989_\r\n-rwxrwx--- 1 root       departmentn4 3071442940 May 26  2020 1026124034\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124034_\r\n-rwxrwx--- 1 root       departmentn4 2120570640 May 26  2020 1026124068\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124068_\r\n-rwxrwx--- 1 root       departmentn4 1928749868 May 26  2020 1026124109\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124109_\r\n-rwxrwx--- 1 root       departmentn4 2581201976 Mar  9  2021 1026124216\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124216_\r\n-rwxrwx--- 1 root       departmentn4 2818447324 May 26  2020 1026124242\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124242_\r\n-rwxrwx--- 1 root       departmentn4 2562070092 May 26  2020 1026124262\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124262_\r\n-rwxrwx--- 1 root       departmentn4 2696702864 May 26  2020 1026124326\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124326_\r\n-rwxrwx--- 1 root       departmentn4 2646264724 May 26  2020 1026124429\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124429_\r\n-rwxrwx--- 1 root       departmentn4 2856232912 May 26  2020 1026124469\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124469_\r\n-rwxrwx--- 1 root       departmentn4 2537645144 May 26  2020 1026124500\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124500_\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124569_\r\n-rwxrwx--- 1 root       departmentn4 3039748856 May 26  2020 1026124603\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124603_\r\n-rwxrwx--- 1 root       departmentn4 2317463664 May 26  2020 1026124645\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124645_\r\n-rwxrwx--- 1 root       departmentn4 2235680540 May 26  2020 1026124684\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124684_\r\n-rwxrwx--- 1 root       departmentn4 2864072620 May 26  2020 1026124702\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124702_\r\n-rwxrwx--- 1 root       departmentn4 3240335928 May 26  2020 1026124724\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124724_\r\n-rwxrwx--- 1 root       departmentn4 2864276308 May 26  2020 1026124743\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124743_\r\n-rwxrwx--- 1 root       departmentn4 2674791348 May 26  2020 1026124793\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124793_\r\n-rwxrwx--- 1 root       departmentn4 2545679280 May 26  2020 1026124804\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124804_\r\n-rwxrwx--- 1 root       departmentn4 3073327756 May 26  2020 1026124863\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124863_\r\n-rwxrwx--- 1 root       departmentn4 2865464220 May 26  2020 1026124884\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026124884_\r\n-rwxrwx--- 1 root       departmentn4 2737981244 May 26  2020 1026125021\r\ndrwxrws--- 2 sotomayorb departmentn4       4096 Sep  7  2021 1026125021_\r\n-rwxrwx--- 1 root       departmentn4       1879 Mar  8  2021 manifest_boris.json\r\ndrwxrws--- 2 root       departmentn4       4096 Jun 17  2021 tmp\r\n</pre> In\u00a0[5]: Copied! <pre># Load downloaded session\nbase_path = '/mnt/gs/departmentN4/AllenVisualCoding/data_boris/'\n#base_path = '/mnt/gs/home/sotomayorb/git/AllenSDK_datasets/datasets/' # Remove this line!\n\nsess_name = '1026124216'\n\nsession = EcephysSession.from_nwb_path('%s/%s' % (base_path, sess_name))\nprint (\"Session loaded: `%s`\" % sess_name)\n</pre> # Load downloaded session base_path = '/mnt/gs/departmentN4/AllenVisualCoding/data_boris/' #base_path = '/mnt/gs/home/sotomayorb/git/AllenSDK_datasets/datasets/' # Remove this line!  sess_name = '1026124216'  session = EcephysSession.from_nwb_path('%s/%s' % (base_path, sess_name)) print (\"Session loaded: `%s`\" % sess_name) <pre>Session loaded: `1026124216`\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[6]: Copied! <pre>session.units\n</pre> session.units Out[6]: L_ratio presence_ratio d_prime waveform_halfwidth cluster_id firing_rate peak_channel_id silhouette_score waveform_repolarization_slope waveform_amplitude ... probe_vertical_position probe_horizontal_position probe_id channel_local_index ecephys_structure_id probe_description location probe_sampling_rate probe_lfp_sampling_rate probe_has_lfp_data unit_id 951814884 0.024771 0.99 3.555518 0.096147 6 9.492176 850126382 0.033776 0.673650 187.434780 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951814876 0.001785 0.99 4.445414 0.206030 5 39.100557 850126382 0.108908 0.518633 129.686505 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815032 0.035654 0.99 3.848256 0.096147 17 28.383277 850126398 0.096715 0.766347 207.380940 ... 140 43 760640083 12 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815275 0.016783 0.99 3.065938 0.096147 30 5.709358 850126416 0.144249 0.628944 158.158650 ... 220 11 760640083 21 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815314 0.009666 0.99 4.198612 0.123618 34 23.902235 850126420 0.111106 0.740222 173.475705 ... 240 27 760640083 23 215.0 probeA See electrode locations 29999.949611 1249.997900 True ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 951814089 0.032323 0.99 3.194123 0.192295 138 6.579819 850122942 0.046354 0.285857 101.803065 ... 1560 59 760640104 154 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814212 0.235540 0.99 2.005153 0.137353 149 8.288338 850122968 0.044749 0.248256 77.300730 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814199 0.001055 0.99 6.563771 0.151089 148 2.653770 850122968 0.201445 0.384777 139.877010 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814190 0.036486 0.99 2.578246 NaN 147 17.181448 850122968 0.075027 0.034052 60.427575 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814312 0.012800 0.99 4.575564 0.233501 159 3.226923 850122984 0.099238 0.200151 70.730790 ... 1760 27 760640104 175 417.0 probeF See electrode locations 30000.023099 1250.000962 True <p>684 rows \u00d7 39 columns</p> In\u00a0[7]: Copied! <pre>plt.figure(figsize=(15,5))\nplt.plot(\n    session.stimulus_presentations.start_time, \n    session.stimulus_presentations.stimulus_name,\n    marker= '|', linestyle=''\n    )\n\nplt.xlabel(\"Time\")\n</pre> plt.figure(figsize=(15,5)) plt.plot(     session.stimulus_presentations.start_time,      session.stimulus_presentations.stimulus_name,     marker= '|', linestyle=''     )  plt.xlabel(\"Time\") Out[7]: <pre>Text(0.5, 0, 'Time')</pre> In\u00a0[8]: Copied! <pre>session.stimulus_presentations[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ]\n</pre> session.stimulus_presentations[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ] Out[8]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 22000 null 1 0 0 null [1920.0, 1080.0] null 2846.788598 4 natural_movie_one 2846.821959 null null null 0.033361 3887 22001 null 1 1 0 null [1920.0, 1080.0] null 2846.821959 4 natural_movie_one 2846.855320 null null null 0.033361 3888 22002 null 1 2 0 null [1920.0, 1080.0] null 2846.855320 4 natural_movie_one 2846.888681 null null null 0.033361 3889 22003 null 1 3 0 null [1920.0, 1080.0] null 2846.888681 4 natural_movie_one 2846.922042 null null null 0.033361 3890 22004 null 1 4 0 null [1920.0, 1080.0] null 2846.922042 4 natural_movie_one 2846.955403 null null null 0.033361 3891 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 66113 null 1 895 0 null [1920.0, 1080.0] null 8010.955485 12 natural_movie_one 8010.988846 null null null 0.033361 4782 66114 null 1 896 0 null [1920.0, 1080.0] null 8010.988846 12 natural_movie_one 8011.022206 null null null 0.033361 4783 66115 null 1 897 0 null [1920.0, 1080.0] null 8011.022206 12 natural_movie_one 8011.055567 null null null 0.033361 4784 66116 null 1 898 0 null [1920.0, 1080.0] null 8011.055567 12 natural_movie_one 8011.088927 null null null 0.033361 4785 66117 null 1 899 0 null [1920.0, 1080.0] null 8011.088927 12 natural_movie_one 8011.122288 null null null 0.033361 4786 <p>18000 rows \u00d7 16 columns</p> In\u00a0[37]: Copied! <pre>session.stimulus_presentations.keys()\n</pre> session.stimulus_presentations.keys() Out[37]: <pre>Index(['color', 'contrast', 'frame', 'orientation', 'phase', 'size',\n       'spatial_frequency', 'start_time', 'stimulus_block', 'stimulus_name',\n       'stop_time', 'temporal_frequency', 'x_position', 'y_position',\n       'duration', 'stimulus_condition_id'],\n      dtype='object')</pre> In\u00a0[\u00a0]: Copied! <pre>my_selection = {}\n</pre> my_selection = {} In\u00a0[\u00a0]: Copied! <pre>stimulus_name\n</pre> stimulus_name In\u00a0[9]: Copied! <pre>plt.plot(\n    session.stimulus_presentations.stimulus_condition_id[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    marker='|', ls=''\n)\n</pre> plt.plot(     session.stimulus_presentations.stimulus_condition_id[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     marker='|', ls='' ) Out[9]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe912d2ccf8&gt;]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[10]: Copied! <pre>plt.plot(\n    session.stimulus_presentations.stimulus_block[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    marker='|', ls=''\n)\n</pre> plt.plot(     session.stimulus_presentations.stimulus_block[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     marker='|', ls='' ) Out[10]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe925904898&gt;]</pre> In\u00a0[11]: Copied! <pre>plt.figure(figsize=(15,5));\nplt.plot(\n    session.stimulus_presentations.start_time[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    session.stimulus_presentations.frame[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],\n    marker='|', ls=''\n)\n</pre> plt.figure(figsize=(15,5)); plt.plot(     session.stimulus_presentations.start_time[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     session.stimulus_presentations.frame[ session.stimulus_presentations.stimulus_name == 'natural_movie_one' ],     marker='|', ls='' ) Out[11]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fe919de3748&gt;]</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[12]: Copied! <pre>NS_table = session.stimulus_presentations[\n    (session.stimulus_presentations.stimulus_name == 'natural_scenes')\n]\n</pre> NS_table = session.stimulus_presentations[     (session.stimulus_presentations.stimulus_name == 'natural_scenes') ] In\u00a0[13]: Copied! <pre>NS_table\n</pre> NS_table Out[13]: color contrast frame orientation phase size spatial_frequency start_time stimulus_block stimulus_name stop_time temporal_frequency x_position y_position duration stimulus_condition_id stimulus_presentation_id 51355 null null 95 null null null null 5909.365398 9 natural_scenes 5909.615606 null null null 0.250208 4908 51356 null null 87 null null null null 5909.615606 9 natural_scenes 5909.865814 null null null 0.250208 4909 51357 null null 72 null null null null 5909.865814 9 natural_scenes 5910.116023 null null null 0.250208 4910 51358 null null 41 null null null null 5910.116023 9 natural_scenes 5910.366231 null null null 0.250208 4911 51359 null null 9 null null null null 5910.366231 9 natural_scenes 5910.616443 null null null 0.250212 4912 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 68224 null null 81 null null null null 8567.837656 13 natural_scenes 8568.087864 null null null 0.250208 4927 68225 null null 17 null null null null 8568.087864 13 natural_scenes 8568.338073 null null null 0.250208 5011 68226 null null 113 null null null null 8568.338073 13 natural_scenes 8568.588281 null null null 0.250208 4944 68227 null null 59 null null null null 8568.588281 13 natural_scenes 8568.838488 null null null 0.250207 5020 68228 null null 98 null null null null 8568.838488 13 natural_scenes 8569.088694 null null null 0.250207 4979 <p>5950 rows \u00d7 16 columns</p> <p>NWB to Numpy</p> In\u00a0[14]: Copied! <pre>l_stim_start_time  = np.array(NS_table['start_time']) # Stimulus onset\nl_stim_orientation = np.array(NS_table['orientation'])           # Natural Image ID\nduration = 0.25 # seconds\n</pre> l_stim_start_time  = np.array(NS_table['start_time']) # Stimulus onset l_stim_orientation = np.array(NS_table['orientation'])           # Natural Image ID duration = 0.25 # seconds In\u00a0[16]: Copied! <pre>#print (\"Number of natural scenes         : %i\" % len(set(l_stim_frame)))\n#print (\"Number of presentations per image: %i\" % (len(l_stim_frame)/len(set(l_stim_frame))))\n</pre> #print (\"Number of natural scenes         : %i\" % len(set(l_stim_frame))) #print (\"Number of presentations per image: %i\" % (len(l_stim_frame)/len(set(l_stim_frame)))) In\u00a0[17]: Copied! <pre>\"total neurons in this session\", len(session.spike_times.keys())\n</pre> \"total neurons in this session\", len(session.spike_times.keys()) Out[17]: <pre>('total neurons in this session', 684)</pre> In\u00a0[18]: Copied! <pre>neurons = session.units\n</pre> neurons = session.units In\u00a0[19]: Copied! <pre>neurons\n</pre> neurons Out[19]: L_ratio presence_ratio d_prime waveform_halfwidth cluster_id firing_rate peak_channel_id silhouette_score waveform_repolarization_slope waveform_amplitude ... probe_vertical_position probe_horizontal_position probe_id channel_local_index ecephys_structure_id probe_description location probe_sampling_rate probe_lfp_sampling_rate probe_has_lfp_data unit_id 951814884 0.024771 0.99 3.555518 0.096147 6 9.492176 850126382 0.033776 0.673650 187.434780 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951814876 0.001785 0.99 4.445414 0.206030 5 39.100557 850126382 0.108908 0.518633 129.686505 ... 60 43 760640083 4 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815032 0.035654 0.99 3.848256 0.096147 17 28.383277 850126398 0.096715 0.766347 207.380940 ... 140 43 760640083 12 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815275 0.016783 0.99 3.065938 0.096147 30 5.709358 850126416 0.144249 0.628944 158.158650 ... 220 11 760640083 21 215.0 probeA See electrode locations 29999.949611 1249.997900 True 951815314 0.009666 0.99 4.198612 0.123618 34 23.902235 850126420 0.111106 0.740222 173.475705 ... 240 27 760640083 23 215.0 probeA See electrode locations 29999.949611 1249.997900 True ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 951814089 0.032323 0.99 3.194123 0.192295 138 6.579819 850122942 0.046354 0.285857 101.803065 ... 1560 59 760640104 154 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814212 0.235540 0.99 2.005153 0.137353 149 8.288338 850122968 0.044749 0.248256 77.300730 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814199 0.001055 0.99 6.563771 0.151089 148 2.653770 850122968 0.201445 0.384777 139.877010 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814190 0.036486 0.99 2.578246 NaN 147 17.181448 850122968 0.075027 0.034052 60.427575 ... 1680 27 760640104 167 417.0 probeF See electrode locations 30000.023099 1250.000962 True 951814312 0.012800 0.99 4.575564 0.233501 159 3.226923 850122984 0.099238 0.200151 70.730790 ... 1760 27 760640104 175 417.0 probeF See electrode locations 30000.023099 1250.000962 True <p>684 rows \u00d7 39 columns</p> In\u00a0[20]: Copied! <pre>l_n_ids  = np.array(neurons.index) # list of neuron's IDs\nprint (\"Total neurons: %s\" % l_n_ids.shape[0])\n</pre> l_n_ids  = np.array(neurons.index) # list of neuron's IDs print (\"Total neurons: %s\" % l_n_ids.shape[0]) <pre>Total neurons: 684\n</pre> In\u00a0[21]: Copied! <pre>print (\"List of properties\", neurons.keys())\n</pre> print (\"List of properties\", neurons.keys()) <pre>List of properties Index(['L_ratio', 'presence_ratio', 'd_prime', 'waveform_halfwidth',\n       'cluster_id', 'firing_rate', 'peak_channel_id', 'silhouette_score',\n       'waveform_repolarization_slope', 'waveform_amplitude', 'snr',\n       'waveform_velocity_below', 'max_drift', 'nn_miss_rate', 'nn_hit_rate',\n       'waveform_velocity_above', 'waveform_spread', 'amplitude_cutoff',\n       'waveform_duration', 'waveform_PT_ratio', 'cumulative_drift',\n       'isolation_distance', 'isi_violations', 'waveform_recovery_slope',\n       'local_index_unit', 'anterior_posterior_ccf_coordinate',\n       'dorsal_ventral_ccf_coordinate', 'left_right_ccf_coordinate',\n       'ecephys_structure_acronym', 'probe_vertical_position',\n       'probe_horizontal_position', 'probe_id', 'channel_local_index',\n       'ecephys_structure_id', 'probe_description', 'location',\n       'probe_sampling_rate', 'probe_lfp_sampling_rate', 'probe_has_lfp_data'],\n      dtype='object')\n</pre> <p>Spike times</p> In\u00a0[22]: Copied! <pre>l_spike_times = np.array([ session.spike_times[n_id] for n_id in l_n_ids ]) #dex#[l_n_ids]\n</pre> l_spike_times = np.array([ session.spike_times[n_id] for n_id in l_n_ids ]) #dex#[l_n_ids] In\u00a0[23]: Copied! <pre>print(\"spike times:\", l_spike_times)\n</pre> print(\"spike times:\", l_spike_times) <pre>spike times: [array([3.80928400e+00, 3.84358406e+00, 3.94235089e+00, ...,\n       9.94395425e+03, 9.96080897e+03, 9.96476828e+03])\n array([3.82861736e+00, 3.87158410e+00, 3.90445082e+00, ...,\n       9.96614322e+03, 9.96616348e+03, 9.96618938e+03])\n array([3.81211734e+00, 3.83468404e+00, 3.90791750e+00, ...,\n       9.96618255e+03, 9.96619485e+03, 9.96620922e+03])\n array([3.87385077e+00, 3.94535089e+00, 3.97931762e+00, ...,\n       9.90429721e+03, 9.91353780e+03, 9.94737115e+03])\n array([3.80601733e+00, 3.82201735e+00, 3.82865070e+00, ...,\n       9.96544542e+03, 9.96545708e+03, 9.96553402e+03])\n array([3.81051733e+00, 3.82808403e+00, 3.86331742e+00, ...,\n       9.95155443e+03, 9.96555178e+03, 9.96565845e+03])\n array([6.38542166e+00, 1.15116969e+01, 1.15370970e+01, ...,\n       9.95688457e+03, 9.96524272e+03, 9.96548838e+03])\n array([3.80391732e+00, 3.81505067e+00, 3.83268404e+00, ...,\n       9.92975532e+03, 9.95420393e+03, 9.96108484e+03])\n array([3.78548396e+00, 3.80398399e+00, 3.82135069e+00, ...,\n       9.96618315e+03, 9.96619242e+03, 9.96620228e+03])\n array([3.78635063e+00, 3.79898398e+00, 3.82945070e+00, ...,\n       9.96554795e+03, 9.96588238e+03, 9.96611635e+03])\n array([3.79361731e+00, 3.81168400e+00, 3.85448407e+00, ...,\n       9.96571592e+03, 9.96586922e+03, 9.96612488e+03])\n array([5.17158629e+00, 5.77315396e+00, 7.78345734e+00, ...,\n       9.96586505e+03, 9.96586748e+03, 9.96616655e+03])\n array([4.99271932e+00, 5.02215270e+00, 5.52355354e+00, ...,\n       9.96611762e+03, 9.96612255e+03, 9.96616738e+03])\n array([4.35221824e+00, 4.92021920e+00, 5.46105344e+00, ...,\n       9.96595492e+03, 9.96611408e+03, 9.96612002e+03])\n array([  63.37195071,   76.77147322,   90.77469674,  137.71834225,\n        164.47622053,  193.79750311,  208.01806033,  215.22050576,\n        223.63555323,  226.51019139,  268.31809495,  274.30147166,\n        286.21619168,  288.31186186,  290.61886574,  294.89253958,\n        325.37132411,  361.03668401,  369.52586494,  381.32751809,\n        456.94951178,  462.51645446,  468.2557641 ,  523.47999019,\n        527.45773021,  548.86796617,  568.37133226,  576.93877999,\n        589.4710677 ,  595.96124527,  599.94771863,  655.74511235,\n        690.54740414,  720.99535528,  766.50103172,  814.72654605,\n        824.17792859,  826.22926537,  840.15608876,  860.15788903,\n        876.99528397,  888.67117025,  892.32200972,  904.54686358,\n        907.2752015 ,  917.02758455,  932.67194416,  935.156015  ,\n        951.58067592,  971.44204261,  979.15245556, 1026.47453505,\n       1041.16202638, 1063.62973079, 1082.2314287 , 1137.08522083,\n       1148.89380733, 1153.51338176, 1189.0022747 , 1221.46756257,\n       1223.10396531, 1224.08636696, 1226.35557078, 1236.48068778,\n       1247.96974041, 1270.14027765, 1278.38705817, 1312.65478239,\n       1348.05197518, 1355.64828794, 1366.80254001, 1370.9256136 ,\n       1424.41380344, 1434.45048697, 1438.37056022, 1461.41306559,\n       1469.13354522, 1517.6994268 , 1520.05073075, 1549.30067988,\n       1557.32739336, 1570.0343147 , 1579.93336466, 1612.16878547,\n       1626.5340096 , 1647.49861148, 1702.73597093, 1712.80532117,\n       1730.8812182 , 1757.81643011, 1763.81037351, 1802.73073888,\n       1826.2759451 , 1829.396317  , 1833.00728973, 1870.36348581,\n       1876.33109584, 1888.7546167 , 1928.25034971, 1974.15496015,\n       1994.39702748, 2001.36753919, 2012.88735854, 2025.85114698,\n       2041.11610595, 2041.48227323, 2060.48347181, 2066.65111551,\n       2094.77112941, 2106.64254934, 2136.19266565, 2149.59855483,\n       2153.58522819, 2160.92250718, 2168.31608627, 2171.2892246 ,\n       2195.71823229, 2207.60318559, 2215.47386548, 2219.03260479,\n       2245.52938263, 2252.66322794, 2259.06870537, 2265.67041646,\n       2284.74451516, 2325.64198385, 2359.05113997, 2362.34977884,\n       2384.7508498 , 2388.86672338, 2415.12513415, 2430.18575945,\n       2439.40757494, 2444.26904977, 2453.72849899, 2458.42877355,\n       2469.64359239, 2474.75810098, 2478.82427448, 2484.14801675,\n       2522.4169477 , 2531.86969691, 2628.5297926 , 2662.94018373,\n       2669.38199455, 2674.81117033, 2676.76847362, 2687.05522423,\n       2694.95900417, 2729.86382947, 2743.12295174, 2748.48126074,\n       2774.1208038 , 2787.76542672, 2795.20903923, 2796.64317497,\n       2803.06275242, 2810.88323222, 2827.14355953, 2852.27140174,\n       2882.19881867, 2909.88753184, 2930.43753303, 2951.62366861,\n       2962.96268766, 2996.68064429, 3003.84708966, 3013.89223987,\n       3027.04532863, 3040.01198374, 3062.63895508, 3086.89266248,\n       3099.17981646, 3102.34842178, 3172.50210628, 3187.1189975 ,\n       3188.51969985, 3214.55881025, 3228.7958675 , 3238.50611714,\n       3248.82703448, 3279.84448657, 3289.34146919, 3301.38475609,\n       3333.8395106 , 3355.25231323, 3384.52886241, 3391.49727411,\n       3403.24212717, 3408.46440261, 3413.66371134, 3450.38710636,\n       3457.16931775, 3484.74463073, 3502.94586131, 3550.988642  ,\n       3565.72323342, 3579.53695662, 3582.40106143, 3585.88143394,\n       3589.39650651, 3670.82654329, 3683.47206453, 3694.71645008,\n       3700.07352574, 3709.85957551, 3722.75159717, 3726.49493679,\n       3745.12510141, 3755.19288499, 3770.2025102 , 3775.6790194 ,\n       3781.47352913, 3789.72847633, 3795.87168665, 3810.35574431,\n       3836.54415497, 3844.39410148, 3857.98249097, 3882.58386563,\n       3911.41491406, 3914.97022003, 3919.48276094, 3921.10363033,\n       3935.17662063, 3936.79119001, 3956.80072362, 4007.83104267,\n       4018.06079318, 4024.34580374, 4041.69663288, 4054.24382062,\n       4059.37502924, 4072.89198528, 4079.78019685, 4082.57310154,\n       4090.06924746, 4162.97433659, 4165.76804128, 4177.07936028,\n       4193.97088865, 4208.10254572, 4237.16219453, 4273.0829882 ,\n       4289.43318232, 4320.15300059, 4348.94218228, 4359.87113397,\n       4368.75488222, 4395.37986028, 4434.43019254, 4446.30111247,\n       4487.50401501, 4493.42649163, 4499.61136868, 4518.32190011,\n       4523.6518424 , 4548.0025833 , 4563.32360903, 4571.80308994,\n       4577.9304669 , 4602.55490826, 4618.65076863, 4620.657372  ,\n       4622.21680795, 4632.01835775, 4658.30603523, 4664.33664536,\n       4672.72662612, 4695.72326475, 4697.52066777, 4701.13657384,\n       4713.67482823, 4725.95894887, 4754.65006372, 4758.96710431,\n       4785.06898148, 4793.2974953 , 4809.67438948, 4811.9124599 ,\n       4826.78288488, 4835.27723248, 4850.69695838, 4857.19263596,\n       4869.99209079, 4914.76839933, 4924.43828224, 4935.38880063,\n       4945.92301833, 4963.13334724, 5010.58482694, 5079.18114215,\n       5103.12444904, 5112.14919753, 5162.36054853, 5177.4047738 ,\n       5179.41274384, 5184.00538489, 5220.18174565, 5228.92946035,\n       5256.96430743, 5266.91419081, 5269.33259487, 5290.38193023,\n       5305.15238837, 5308.23692689, 5316.60244094, 5322.13908357,\n       5353.11003559, 5358.7700451 , 5367.08742573, 5375.89377386,\n       5422.23165169, 5436.59524248, 5458.89701328, 5489.71653171,\n       5498.55617989, 5552.75290425, 5571.68356938, 5589.68523295,\n       5606.47792783, 5610.20573409, 5614.3620744 , 5623.47492304,\n       5659.61875042, 5667.76153076, 5670.51463538, 5675.07494304,\n       5700.37321887, 5714.9763434 , 5726.97149688, 5764.33995964,\n       5782.28848979, 5803.42229196, 5808.32826686, 5826.63363094,\n       5835.67321279, 5862.15625727, 5864.6509948 , 5869.21520246,\n       5882.18212424, 5912.63284206, 5920.91505597, 5928.27196833,\n       5951.9932415 , 5966.06426514, 6012.41064298, 6015.56844829,\n       6035.95144919, 6050.78340743, 6056.64735062, 6059.17362153,\n       6076.90908465, 6087.76660289, 6096.89355155, 6126.46353455,\n       6132.67134498, 6164.35363153, 6167.42420335, 6170.81834238,\n       6181.65279392, 6202.55326235, 6207.18790347, 6231.58147778,\n       6263.9215321 , 6280.13789267, 6283.43469821, 6293.14704785,\n       6298.2157897 , 6333.45081555, 6358.130357  , 6407.80637377,\n       6410.86041224, 6436.85492256, 6447.21107329, 6453.45311711,\n       6460.70859596, 6479.52762757, 6485.28927058, 6496.51925611,\n       6518.19065918, 6526.47713976, 6542.94486742, 6546.96580751,\n       6575.43132199, 6578.84402772, 6596.04105661, 6611.07188185,\n       6650.77038187, 6667.41414316, 6678.40432828, 6686.38824169,\n       6726.33237545, 6758.4692961 , 6797.63592855, 6818.64659717,\n       6842.63137079, 6853.08222168, 6857.48919575, 6902.8079052 ,\n       6913.39288965, 6918.81249875, 6938.12953119, 6951.2483199 ,\n       6953.73019073, 6956.8293626 , 6959.44346699, 6971.63238747,\n       6978.892833  , 7018.47189947, 7053.81952551, 7058.32709975,\n       7062.80640727, 7074.57316037, 7091.44932205, 7111.98552321,\n       7115.19259526, 7140.16930388, 7142.68117477, 7155.96296374,\n       7174.67402851, 7182.09757431, 7183.46974328, 7187.03334926,\n       7195.56839693, 7208.62171886, 7228.33898531, 7254.4494625 ,\n       7259.01750351, 7266.22428228, 7342.13074311, 7360.36267373,\n       7394.03573029, 7426.83325204, 7431.64556013, 7450.05622438,\n       7469.1374231 , 7471.96809452, 7486.32035196, 7513.332164  ,\n       7546.07441899, 7563.28551457, 7595.50140201, 7598.59660721,\n       7604.46218373, 7612.5838307 , 7627.69138941, 7638.76160801,\n       7665.57125304, 7701.66638033, 7728.8930594 , 7742.6666492 ,\n       7775.47037096, 7808.01725896, 7817.34597463, 7866.37205698,\n       7889.24292873, 7912.79856829, 7915.19987233, 7959.13524612,\n       7959.33111312, 8019.64131442, 8022.06605182, 8041.98071861,\n       8082.0673526 , 8128.43903049, 8144.79425796, 8150.42470075,\n       8187.55959646, 8193.72060681, 8201.71725357, 8203.8396238 ,\n       8211.18896948, 8226.12862791, 8284.61772615, 8292.16440549,\n       8301.22515404, 8304.02762542, 8310.0908356 , 8312.34407272,\n       8321.88822208, 8337.01424749, 8351.20810466, 8388.16610007,\n       8394.12507675, 8406.44693078, 8422.89759174, 8426.5639979 ,\n       8446.13816411, 8448.27363437, 8453.42997636, 8464.43086151,\n       8499.63235396, 8505.410697  , 8548.85543664, 8605.91949916,\n       8608.45793675, 8622.90106101, 8624.3223634 , 8635.8304494 ,\n       8640.69185756, 8648.83397124, 8657.21435198, 8666.71166793,\n       8704.35216449, 8768.41293875, 8768.96410635, 8775.31741702,\n       8777.32895373, 8793.05214681, 8809.32654081, 8810.92721016,\n       8813.51794785, 8821.48242789, 8855.49031835, 8868.57757366,\n       8879.02132454, 8914.57165092, 8928.88597496, 8994.39355165,\n       9037.71505775, 9045.65703776, 9087.08630735, 9095.24202104,\n       9101.32316459, 9123.28873482, 9132.4846836 , 9154.22552012,\n       9172.59685097, 9179.25299549, 9234.61418847, 9234.86188889,\n       9265.93054107, 9285.75394104, 9295.47179069, 9303.16163694,\n       9331.55781797, 9368.25687961, 9383.69533888, 9385.36500835,\n       9396.12302642, 9405.32660854, 9465.43670951, 9494.39242481,\n       9521.9897045 , 9563.0945402 , 9569.85395156, 9572.29505566,\n       9596.49352964, 9609.6720851 , 9610.95995393, 9614.93192727,\n       9653.46732533, 9730.04572062, 9762.47530843, 9783.04430964,\n       9785.13211315, 9871.13632427, 9894.11156286, 9906.3774168 ,\n       9936.50223406, 9945.12828188, 9961.63810962, 9963.80847993])\n array([3.96171759e+00, 4.16938460e+00, 4.18601796e+00, ...,\n       9.96477555e+03, 9.96492775e+03, 9.96500745e+03])\n array([5.42462004e+00, 5.43885340e+00, 5.48972015e+00, ...,\n       9.96556815e+03, 9.96567165e+03, 9.96582205e+03])\n array([  19.79911086,   63.58245106,  116.99657411, ..., 9965.19964893,\n       9965.52618281, 9965.52991615])\n array([3.91238417e+00, 3.98438429e+00, 4.56085193e+00, ...,\n       9.96578202e+03, 9.96582972e+03, 9.96592302e+03])\n array([5.51242019e+00, 5.63392040e+00, 7.99375769e+00, ...,\n       9.96507615e+03, 9.96557175e+03, 9.96578978e+03])\n array([5.28445314e+00, 5.28861982e+00, 5.50602018e+00, ...,\n       9.96596595e+03, 9.96597348e+03, 9.96597835e+03])\n array([5.09375282e+00, 5.10958618e+00, 6.34262159e+00, ...,\n       9.88524335e+03, 9.91817807e+03, 9.93763764e+03])\n array([3.82871736e+00, 3.83301737e+00, 3.83991738e+00, ...,\n       9.96448045e+03, 9.96470001e+03, 9.96471838e+03])\n array([3.94085089e+00, 3.94408422e+00, 3.96238426e+00, ...,\n       9.96417415e+03, 9.96418068e+03, 9.96475861e+03])\n array([3.89411747e+00, 3.89865082e+00, 3.91275084e+00, ...,\n       9.96292661e+03, 9.96472568e+03, 9.96473288e+03])\n array([3.94145089e+00, 3.95878425e+00, 4.09785115e+00, ...,\n       9.96244828e+03, 9.96245404e+03, 9.96246594e+03])\n array([3.86468409e+00, 3.87165077e+00, 4.60228533e+00, ...,\n       9.94731219e+03, 9.95342313e+03, 9.96499395e+03])\n array([4.24208473e+00, 4.24615140e+00, 4.25291808e+00, ...,\n       9.96589915e+03, 9.96590292e+03, 9.96603272e+03])\n array([3.89511748e+00, 3.91988418e+00, 4.39171831e+00, ...,\n       9.96537298e+03, 9.96575508e+03, 9.96600372e+03])\n array([4.01301767e+00, 4.01715101e+00, 4.02881770e+00, ...,\n       9.96527948e+03, 9.96539538e+03, 9.96556415e+03])\n array([5.08791948e+00, 1.11841631e+01, 1.16524305e+01, ...,\n       9.96366121e+03, 9.96366668e+03, 9.96384878e+03])\n array([3.85961742e+00, 3.86415076e+00, 3.87211744e+00, ...,\n       9.96469341e+03, 9.96583152e+03, 9.96587575e+03])\n array([4.03541771e+00, 4.64478540e+00, 5.59932034e+00, ...,\n       9.96577542e+03, 9.96584168e+03, 9.96584845e+03])\n array([4.98105263e+00, 1.39250343e+01, 1.40620346e+01, ...,\n       9.94688018e+03, 9.94940346e+03, 9.94949116e+03])\n array([8.67839218e+00, 8.68432552e+00, 1.38138341e+01, ...,\n       9.96483665e+03, 9.96583138e+03, 9.96586352e+03])\n array([3.81328401e+00, 4.20301799e+00, 4.30151816e+00, ...,\n       9.96615988e+03, 9.96617945e+03, 9.96619655e+03])\n array([3.87718411e+00, 4.16558460e+00, 4.30111816e+00, ...,\n       9.96605892e+03, 9.96607105e+03, 9.96608552e+03])\n array([  11.56889703,   11.61916378,   11.67723055, ..., 9962.82924495,\n       9964.92384847, 9966.19411727])\n array([  36.92117295,   36.92640629,   36.93023963, ..., 9965.70398311,\n       9965.7158498 , 9965.72548315])\n array([3.88181745e+00, 4.21241801e+00, 4.25811809e+00, ...,\n       9.96488015e+03, 9.96513568e+03, 9.96543812e+03])\n array([  19.81944422,   42.53034904,   88.64389316, ..., 9965.47398272,\n       9965.51558279, 9965.69244976])\n array([  41.33514703,   44.45111893,   68.4273592 , ..., 9966.11735047,\n       9966.18415058, 9966.19971728])\n array([  66.96382341,   84.82828675,   84.84248677, ..., 9965.23918233,\n       9965.99311693, 9966.1114838 ])\n array([3.92585086e+00, 4.02221769e+00, 4.12521786e+00, ...,\n       9.96586522e+03, 9.96597295e+03, 9.96618718e+03])\n array([7.23085641e+00, 7.78065734e+00, 7.86422414e+00, ...,\n       9.96584828e+03, 9.96602685e+03, 9.96610165e+03])\n array([  11.79383074,   11.92289763,   11.96299769, ..., 9966.11431713,\n       9966.16211721, 9966.20301728])\n array([  11.63306381,   14.45636855,   29.21089333, ..., 9966.0568837 ,\n       9966.09288376, 9966.11855047])\n array([  11.53813031,   20.5180454 ,   23.22991662, ..., 9955.6762996 ,\n       9959.68780634, 9960.41317422])\n array([7.27902316e+00, 8.22992476e+00, 1.13897301e+01, ...,\n       9.96591702e+03, 9.96594958e+03, 9.96605742e+03])\n array([6.41925505e+00, 6.56725530e+00, 6.63982209e+00, ...,\n       9.96605198e+03, 9.96606712e+03, 9.96613622e+03])\n array([4.24265139e+00, 4.78638564e+00, 4.87275245e+00, ...,\n       9.96614438e+03, 9.96617272e+03, 9.96620005e+03])\n array([3.82151735e+00, 3.89218414e+00, 3.97515094e+00, ...,\n       9.96576018e+03, 9.96604035e+03, 9.96617948e+03])\n array([4.82465237e+00, 1.13895634e+01, 3.59614380e+01, ...,\n       9.96600058e+03, 9.96605368e+03, 9.96613232e+03])\n array([4.50011849e+00, 4.67475212e+00, 4.73811889e+00, ...,\n       9.96600362e+03, 9.96608165e+03, 9.96610052e+03])\n array([3.81958402e+00, 3.91988418e+00, 3.98485096e+00, ...,\n       9.96556818e+03, 9.96561548e+03, 9.96574645e+03])\n array([7.06095613e+00, 1.11029962e+01, 1.58230375e+01, ...,\n       9.96546965e+03, 9.96555528e+03, 9.96608548e+03])\n array([  11.44256349,   11.46406352,   11.53806365, ..., 9966.12915049,\n       9966.17581724, 9966.19691727])\n array([4.77925229e+00, 5.58648698e+00, 1.13897967e+01, ...,\n       9.96593542e+03, 9.96603352e+03, 9.96618115e+03])\n array([3.83758405e+00, 3.89498414e+00, 3.94668423e+00, ...,\n       9.96597778e+03, 9.96606988e+03, 9.96612985e+03])\n array([4.06588443e+00, 5.02128603e+00, 5.81458737e+00, ...,\n       9.96562525e+03, 9.96576195e+03, 9.96605088e+03])\n array([3.79101730e+00, 3.85705075e+00, 3.93651755e+00, ...,\n       9.96534475e+03, 9.96539718e+03, 9.96546455e+03])\n array([3.82035068e+00, 3.94031755e+00, 4.04951774e+00, ...,\n       9.96609535e+03, 9.96617122e+03, 9.96619858e+03])\n array([3.83158404e+00, 4.05308441e+00, 4.29515148e+00, ...,\n       9.96574125e+03, 9.96585685e+03, 9.96616965e+03])\n array([3.84728406e+00, 3.93681755e+00, 4.12111786e+00, ...,\n       9.96579798e+03, 9.96588802e+03, 9.96606932e+03])\n array([5.16615294e+00, 5.73638724e+00, 5.93228756e+00, ...,\n       9.96611195e+03, 9.96613408e+03, 9.96618665e+03])\n array([4.29121814e+00, 4.67475212e+00, 4.92571921e+00, ...,\n       9.96608745e+03, 9.96609315e+03, 9.96610908e+03])\n array([3.78891730e+00, 3.87871745e+00, 3.93308421e+00, ...,\n       9.96604525e+03, 9.96606945e+03, 9.96614885e+03])\n array([3.85285074e+00, 3.96211759e+00, 4.03015104e+00, ...,\n       9.96410625e+03, 9.96502935e+03, 9.96530628e+03])\n array([3.87975078e+00, 4.07885112e+00, 4.28435146e+00, ...,\n       9.96485365e+03, 9.96529338e+03, 9.96543722e+03])\n array([3.78405062e+00, 3.87061743e+00, 3.97765095e+00, ...,\n       9.96606005e+03, 9.96609285e+03, 9.96618348e+03])\n array([3.85165074e+00, 4.11048450e+00, 4.37698495e+00, ...,\n       9.96597298e+03, 9.96598698e+03, 9.96599098e+03])\n array([6.62848873e+00, 7.38809001e+00, 8.83232577e+00, ...,\n       9.96471638e+03, 9.96557875e+03, 9.96567998e+03])\n array([3.78725063e+00, 3.83938405e+00, 3.95698425e+00, ...,\n       9.96595042e+03, 9.96596582e+03, 9.96618178e+03])\n array([5.14935292e+00, 6.36202162e+00, 6.62875540e+00, ...,\n       9.96615825e+03, 9.96618195e+03, 9.96620142e+03])\n array([3.78178395e+00, 3.86921743e+00, 3.94541756e+00, ...,\n       9.96591205e+03, 9.96594112e+03, 9.96620465e+03])\n array([3.92838420e+00, 4.00961767e+00, 4.15771792e+00, ...,\n       9.96508248e+03, 9.96574905e+03, 9.96603385e+03])\n array([3.98695096e+00, 4.85385242e+00, 5.69155383e+00, ...,\n       9.96595848e+03, 9.96604758e+03, 9.96612452e+03])\n array([  29.39599364,   36.72360595,   47.50292405, ..., 9966.12655049,\n       9966.18335058, 9966.20335062])\n array([3.99648431e+00, 4.35725159e+00, 4.56121859e+00, ...,\n       9.96569148e+03, 9.96596665e+03, 9.96615342e+03])\n array([4.70781884e+00, 4.92281920e+00, 1.04714952e+01, ...,\n       9.96386811e+03, 9.96424821e+03, 9.96586942e+03])\n array([3.78421729e+00, 3.87281744e+00, 4.24018472e+00, ...,\n       9.96444891e+03, 9.96454808e+03, 9.96521515e+03])\n array([4.14701790e+00, 4.25861809e+00, 4.67765212e+00, ...,\n       9.96571295e+03, 9.96579425e+03, 9.96596725e+03])\n array([4.75941893e+00, 4.88748581e+00, 5.00521934e+00, ...,\n       9.96292795e+03, 9.96301791e+03, 9.96376105e+03])\n array([9.08469286e+00, 9.10392622e+00, 9.80496074e+00, ...,\n       9.96537292e+03, 9.96570698e+03, 9.96605958e+03])\n array([4.97878596e+00, 5.10041950e+00, 5.12048620e+00, ...,\n       9.96608538e+03, 9.96612768e+03, 9.96620608e+03])\n array([3.78471729e+00, 3.88561746e+00, 3.91531751e+00, ...,\n       9.96576895e+03, 9.96584578e+03, 9.96613538e+03])\n array([ 345.9268253 ,  376.75744375,  376.7676771 , ..., 9961.2497423 ,\n       9961.90411006, 9964.37038087])\n array([7.23725642e+00, 9.11269291e+00, 1.13698634e+01, ...,\n       9.94409401e+03, 9.95105213e+03, 9.95137299e+03])\n array([3.78818396e+00, 3.84791740e+00, 3.88341746e+00, ...,\n       9.96584715e+03, 9.96601835e+03, 9.96602965e+03])\n array([  45.31002037,   52.89136644,   85.66798816, ..., 9938.85093801,\n       9947.37055232, 9948.95572165])\n array([  28.25505839,   28.48369211,   41.16611341, ..., 9966.10015044,\n       9966.11231713, 9966.12241715])\n array([6.64392209e+00, 2.83044585e+01, 4.45513524e+01, ...,\n       9.96334828e+03, 9.96399648e+03, 9.96588728e+03])\n array([5.05041942e+00, 5.08655281e+00, 6.45075510e+00, ...,\n       9.96591635e+03, 9.96601468e+03, 9.96604158e+03])\n array([4.23671805e+00, 4.35858492e+00, 4.36101826e+00, ...,\n       9.96605992e+03, 9.96607082e+03, 9.96612578e+03])\n array([5.09981950e+00, 5.72732055e+00, 5.76735395e+00, ...,\n       9.94829099e+03, 9.96195198e+03, 9.96547162e+03])\n array([  14.86783591,   78.74540986,  331.55576783, ..., 9944.94094824,\n       9946.28678383, 9946.85295145])\n array([4.20005132e+00, 4.24348473e+00, 5.09918616e+00, ...,\n       9.94896545e+03, 9.95094252e+03, 9.96599108e+03])\n array([3.77691728e+00, 3.79121730e+00, 3.84015072e+00, ...,\n       9.96596862e+03, 9.96601658e+03, 9.96616328e+03])\n array([6.80488903e+00, 7.20142303e+00, 8.35845831e+00, ...,\n       9.96609038e+03, 9.96613465e+03, 9.96618158e+03])\n array([  11.50256359,   36.63103913,   41.20438014, ..., 9948.24805379,\n       9965.89218343, 9966.09365043])\n array([  85.09125386,   85.32295425,   89.59579476, ..., 9953.83439651,\n       9959.16557213, 9963.26064567])\n array([6.55332194e+00, 1.28261991e+01, 8.48889869e+01, 1.49810763e+02,\n       1.50254963e+02, 1.70391497e+02, 1.85190589e+02, 2.70481065e+02,\n       3.14241905e+02, 3.20780950e+02, 3.65383425e+02, 4.10085133e+02,\n       4.10881234e+02, 4.46511828e+02, 5.08436832e+02, 5.31256570e+02,\n       5.49375200e+02, 5.80237186e+02, 5.86015062e+02, 5.87739165e+02,\n       6.36037279e+02, 6.44778294e+02, 6.52703841e+02, 6.53358842e+02,\n       6.77282682e+02, 7.13958410e+02, 8.70486573e+02, 9.38071853e+02,\n       9.40340490e+02, 9.90196341e+02, 1.12092449e+03, 1.41890169e+03,\n       1.58604401e+03, 1.60115490e+03, 1.60688208e+03, 1.61965490e+03,\n       1.63795250e+03, 1.65092928e+03, 1.72799578e+03, 1.76446691e+03,\n       1.77267216e+03, 1.78303847e+03, 1.79582089e+03, 1.81250309e+03,\n       1.86251994e+03, 1.87418693e+03, 1.91471109e+03, 1.91477283e+03,\n       1.94914762e+03, 2.03196479e+03, 2.03492880e+03, 2.03645563e+03,\n       2.06766222e+03, 2.08328504e+03, 2.08414724e+03, 2.14175877e+03,\n       2.18548108e+03, 2.26195774e+03, 2.27322696e+03, 2.28982052e+03,\n       2.32073611e+03, 2.32134938e+03, 2.32649185e+03, 2.33006776e+03,\n       2.37988241e+03, 2.39825111e+03, 2.44184321e+03, 2.44297695e+03,\n       2.44304558e+03, 2.44923822e+03, 2.44950043e+03, 2.45546390e+03,\n       2.47471900e+03, 2.51185953e+03, 2.54030181e+03, 2.55720364e+03,\n       2.56387992e+03, 2.56475945e+03, 2.56719466e+03, 2.56834416e+03,\n       2.56837272e+03, 2.56921199e+03, 2.58460072e+03, 2.58556745e+03,\n       2.61804707e+03, 2.61808481e+03, 2.61840078e+03, 2.62062005e+03,\n       2.62100268e+03, 2.62124481e+03, 2.62234978e+03, 2.62415339e+03,\n       2.66621119e+03, 2.68405469e+03, 2.69171823e+03, 2.70492565e+03,\n       2.71881991e+03, 2.72450512e+03, 2.73830531e+03, 2.73839398e+03,\n       2.74364115e+03, 2.75182467e+03, 2.76953653e+03, 2.77161243e+03,\n       2.77346860e+03, 2.77902671e+03, 2.79982205e+03, 2.81073250e+03,\n       2.85186790e+03, 2.85325454e+03, 2.87173980e+03, 2.87505801e+03,\n       2.87549567e+03, 2.87676091e+03, 2.91279917e+03, 2.93661251e+03,\n       2.94172509e+03, 2.96902986e+03, 2.97368087e+03, 2.99650641e+03,\n       3.00758366e+03, 3.00797133e+03, 3.02672939e+03, 3.03965285e+03,\n       3.08693293e+03, 3.08917010e+03, 3.08927547e+03, 3.08934520e+03,\n       3.08941343e+03, 3.09934925e+03, 3.11740751e+03, 3.14630443e+03,\n       3.14688280e+03, 3.17731958e+03, 3.17737748e+03, 3.17826878e+03,\n       3.18050015e+03, 3.20533473e+03, 3.20845563e+03, 3.21158841e+03,\n       3.21434454e+03, 3.22013549e+03, 3.23124464e+03, 3.24515143e+03,\n       3.26122482e+03, 3.28822500e+03, 3.30757420e+03, 3.31868795e+03,\n       3.32772850e+03, 3.32797070e+03, 3.32866710e+03, 3.33531125e+03,\n       3.33639281e+03, 3.36114996e+03, 3.38514976e+03, 3.41257864e+03,\n       3.42170076e+03, 3.42350916e+03, 3.42416836e+03, 3.42450066e+03,\n       3.42567973e+03, 3.42826760e+03, 3.43234931e+03, 3.45743538e+03,\n       3.51472838e+03, 3.53642935e+03, 3.55579648e+03, 3.58560063e+03,\n       3.60114679e+03, 3.61477762e+03, 3.63120294e+03, 3.63211924e+03,\n       3.64962664e+03, 3.71279218e+03, 3.71950829e+03, 3.71961033e+03,\n       3.73386625e+03, 3.76935314e+03, 3.88136216e+03, 3.88992104e+03,\n       3.89061045e+03, 3.90502984e+03, 3.93100871e+03, 3.93223262e+03,\n       3.96508067e+03, 3.99644986e+03, 3.99645886e+03, 3.99673879e+03,\n       3.99703259e+03, 3.99705232e+03, 3.99743423e+03, 4.09124758e+03,\n       4.09207382e+03, 4.10309700e+03, 4.10452507e+03, 4.10563101e+03,\n       4.11995753e+03, 4.11996043e+03, 4.11999320e+03, 4.14435427e+03,\n       4.15748083e+03, 4.17668589e+03, 4.18057267e+03, 4.18317367e+03,\n       4.18336344e+03, 4.18422457e+03, 4.18476744e+03, 4.18507437e+03,\n       4.18532644e+03, 4.18552907e+03, 4.18633851e+03, 4.18641661e+03,\n       4.18760551e+03, 4.18804601e+03, 4.18808018e+03, 4.19327392e+03,\n       4.20843858e+03, 4.21523316e+03, 4.22315997e+03, 4.22364017e+03,\n       4.22556534e+03, 4.25359592e+03, 4.26451237e+03, 4.30326137e+03,\n       4.30526014e+03, 4.31015408e+03, 4.31039805e+03, 4.31243489e+03,\n       4.32694518e+03, 4.36131450e+03, 4.36315867e+03, 4.40019797e+03,\n       4.40231084e+03, 4.42171454e+03, 4.42255657e+03, 4.42351187e+03,\n       4.42608795e+03, 4.42633571e+03, 4.42642828e+03, 4.43055095e+03,\n       4.43696623e+03, 4.43857693e+03, 4.44378444e+03, 4.47597313e+03,\n       4.47921780e+03, 4.47979820e+03, 4.48034810e+03, 4.48041560e+03,\n       4.48369491e+03, 4.48852922e+03, 4.50735435e+03, 4.51932070e+03,\n       4.52461191e+03, 4.53671450e+03, 4.54546578e+03, 4.54552385e+03,\n       4.54557081e+03, 4.55070545e+03, 4.55171092e+03, 4.55328516e+03,\n       4.56581095e+03, 4.56675135e+03, 4.57583206e+03, 4.57696350e+03,\n       4.58394614e+03, 4.58625055e+03, 4.59151812e+03, 4.59578183e+03,\n       4.59792150e+03, 4.59828333e+03, 4.59985994e+03, 4.59991304e+03,\n       4.60000610e+03, 4.60061574e+03, 4.60220414e+03, 4.60271171e+03,\n       4.64199464e+03, 4.66552575e+03, 4.66555818e+03, 4.66667215e+03,\n       4.67272633e+03, 4.67718687e+03, 4.71155316e+03, 4.71388836e+03,\n       4.72961726e+03, 4.73003512e+03, 4.73134312e+03, 4.73852760e+03,\n       4.73914607e+03, 4.76064251e+03, 4.76933266e+03, 4.77507696e+03,\n       4.78401201e+03, 4.78539322e+03, 4.78670992e+03, 4.80001681e+03,\n       4.81559727e+03, 4.83171749e+03, 4.85857027e+03, 4.87544040e+03,\n       4.95669117e+03, 4.98519048e+03, 5.01247900e+03, 5.02369558e+03,\n       5.03354537e+03, 5.03551357e+03, 5.03635897e+03, 5.03707920e+03,\n       5.04281641e+03, 5.05151013e+03, 5.06029624e+03, 5.09937581e+03,\n       5.10191681e+03, 5.10388412e+03, 5.10389552e+03, 5.10490889e+03,\n       5.10542082e+03, 5.12321732e+03, 5.12443362e+03, 5.12487339e+03,\n       5.15377600e+03, 5.15488817e+03, 5.15689414e+03, 5.15716234e+03,\n       5.16621592e+03, 5.16661172e+03, 5.16725419e+03, 5.17073410e+03,\n       5.17117920e+03, 5.17233000e+03, 5.19954894e+03, 5.20208942e+03,\n       5.21083963e+03, 5.21950768e+03, 5.22260132e+03, 5.24481195e+03,\n       5.24927016e+03, 5.25195983e+03, 5.25521027e+03, 5.26856849e+03,\n       5.27387300e+03, 5.28004028e+03, 5.29833914e+03, 5.30451889e+03,\n       5.31205737e+03, 5.31637701e+03, 5.32469362e+03, 5.38714443e+03,\n       5.39978505e+03, 5.43118727e+03, 5.43761178e+03, 5.44237202e+03,\n       5.44541012e+03, 5.45187363e+03, 5.45494864e+03, 5.47081037e+03,\n       5.47826061e+03, 5.48166785e+03, 5.48707719e+03, 5.48765253e+03,\n       5.48950356e+03, 5.50414649e+03, 5.51309614e+03, 5.51868008e+03,\n       5.53688861e+03, 5.56418016e+03, 5.60665913e+03, 5.61707791e+03,\n       5.62752850e+03, 5.63285014e+03, 5.64413162e+03, 5.65313051e+03,\n       5.65678351e+03, 5.69176104e+03, 5.70204219e+03, 5.71916415e+03,\n       5.72004079e+03, 5.72160145e+03, 5.76185522e+03, 5.76740543e+03,\n       5.77010810e+03, 5.78139565e+03, 5.79188684e+03, 5.79455518e+03,\n       5.79941165e+03, 5.80602730e+03, 5.81278254e+03, 5.82844900e+03,\n       5.84616060e+03, 5.84768473e+03, 5.85185477e+03, 5.85276261e+03,\n       5.86743777e+03, 5.86893650e+03, 5.87773245e+03, 5.88495273e+03,\n       5.90977427e+03, 5.90998840e+03, 5.91001400e+03, 5.91509141e+03,\n       5.91736042e+03, 5.91981465e+03, 5.92031042e+03, 5.92039229e+03,\n       5.92307249e+03, 5.92444246e+03, 5.92723973e+03, 5.93215571e+03,\n       5.93814445e+03, 5.94099859e+03, 5.94129469e+03, 5.94425113e+03,\n       5.94549076e+03, 5.95036837e+03, 5.95453665e+03, 5.95530521e+03,\n       5.96251709e+03, 5.96862610e+03, 5.97431148e+03, 5.97611895e+03,\n       5.97613548e+03, 5.97881695e+03, 5.98369736e+03, 5.98675933e+03,\n       5.98919714e+03, 5.99136761e+03, 5.99354108e+03, 5.99688445e+03,\n       5.99859865e+03, 6.00506773e+03, 6.01250494e+03, 6.01524255e+03,\n       6.03925155e+03, 6.04409306e+03, 6.04515350e+03, 6.06039812e+03,\n       6.06611767e+03, 6.06916434e+03, 6.06923561e+03, 6.07040627e+03,\n       6.07217988e+03, 6.07434728e+03, 6.07507595e+03, 6.07736942e+03,\n       6.07737109e+03, 6.08749100e+03, 6.09968809e+03, 6.10178559e+03,\n       6.11020027e+03, 6.11642398e+03, 6.11702655e+03, 6.14561820e+03,\n       6.14713084e+03, 6.16669037e+03, 6.18470943e+03, 6.18515020e+03,\n       6.19290725e+03, 6.21432242e+03, 6.22683627e+03, 6.22845414e+03,\n       6.22978297e+03, 6.24715507e+03, 6.25002484e+03, 6.25153214e+03,\n       6.25514118e+03, 6.25604099e+03, 6.25647372e+03, 6.25649412e+03,\n       6.25860629e+03, 6.25914379e+03, 6.25926976e+03, 6.25979039e+03,\n       6.26173573e+03, 6.27378352e+03, 6.28031483e+03, 6.28231436e+03,\n       6.28301136e+03, 6.28305873e+03, 6.28314590e+03, 6.28350226e+03,\n       6.28403033e+03, 6.28691017e+03, 6.29977366e+03, 6.30299176e+03,\n       6.30776771e+03, 6.31703815e+03, 6.31932579e+03, 6.31985043e+03,\n       6.32537077e+03, 6.32551670e+03, 6.32729794e+03, 6.33233278e+03,\n       6.34471737e+03, 6.34741377e+03, 6.34901198e+03, 6.34904121e+03,\n       6.35166931e+03, 6.36177883e+03, 6.36191203e+03, 6.36429270e+03,\n       6.36536327e+03, 6.36537024e+03, 6.36812064e+03, 6.36824517e+03,\n       6.36836484e+03, 6.37616902e+03, 6.38262013e+03, 6.38645290e+03,\n       6.38765357e+03, 6.40751331e+03, 6.44582707e+03, 6.47808493e+03,\n       6.50926231e+03, 6.54190090e+03, 6.55034838e+03, 6.56787838e+03,\n       6.58403887e+03, 6.58415777e+03, 6.59826506e+03, 6.63827759e+03,\n       6.66196670e+03, 6.68684201e+03, 6.69412715e+03, 6.69797449e+03,\n       6.69857006e+03, 6.70168120e+03, 6.70942648e+03, 6.71135672e+03,\n       6.71919296e+03, 6.72843038e+03, 6.72859265e+03, 6.73236822e+03,\n       6.73565809e+03, 6.74114827e+03, 6.74622438e+03, 6.75223352e+03,\n       6.76396334e+03, 6.76669681e+03, 6.77546266e+03, 6.78150460e+03,\n       6.78848238e+03, 6.79070512e+03, 6.80367967e+03, 6.80471254e+03,\n       6.80896345e+03, 6.82326390e+03, 6.83475966e+03, 6.83867970e+03,\n       6.83873443e+03, 6.84780545e+03, 6.85303662e+03, 6.86960262e+03,\n       6.86967008e+03, 6.87478856e+03, 6.87900953e+03, 6.90342211e+03,\n       6.91224972e+03, 6.91418419e+03, 6.91451812e+03, 6.92086267e+03,\n       6.92160724e+03, 6.92857972e+03, 6.93121879e+03, 6.94324811e+03,\n       6.94843778e+03, 6.94921982e+03, 6.94928715e+03, 6.94950175e+03,\n       6.95668563e+03, 6.96686985e+03, 6.96943362e+03, 6.97009138e+03,\n       6.97112695e+03, 6.97342436e+03, 6.97676580e+03, 6.99176299e+03,\n       6.99663080e+03, 7.02873558e+03, 7.03775733e+03, 7.04669951e+03,\n       7.05511209e+03, 7.06145060e+03, 7.06751392e+03, 7.07329662e+03,\n       7.07652560e+03, 7.07821533e+03, 7.07822803e+03, 7.08452861e+03,\n       7.08490754e+03, 7.08866925e+03, 7.08920222e+03, 7.09249889e+03,\n       7.09772537e+03, 7.10007917e+03, 7.10471301e+03, 7.10603325e+03,\n       7.11902667e+03, 7.12272491e+03, 7.13648846e+03, 7.15208906e+03,\n       7.15653166e+03, 7.15762780e+03, 7.16123207e+03, 7.16636485e+03,\n       7.17043309e+03, 7.20795092e+03, 7.20885209e+03, 7.22380631e+03,\n       7.23163499e+03, 7.24436678e+03, 7.25229889e+03, 7.25633110e+03,\n       7.26462928e+03, 7.29342043e+03, 7.33817570e+03, 7.34518661e+03,\n       7.37044309e+03, 7.37380133e+03, 7.37518553e+03, 7.37645653e+03,\n       7.38201941e+03, 7.38996462e+03, 7.39214969e+03, 7.39949994e+03,\n       7.40410701e+03, 7.40621992e+03, 7.41006696e+03, 7.41697910e+03,\n       7.42510568e+03, 7.43582667e+03, 7.44120484e+03, 7.44264441e+03,\n       7.44574958e+03, 7.46373975e+03, 7.47052679e+03, 7.47228310e+03,\n       7.49750807e+03, 7.49754617e+03, 7.50898819e+03, 7.52558758e+03,\n       7.52659725e+03, 7.52882349e+03, 7.52961449e+03, 7.53029786e+03,\n       7.53113196e+03, 7.54199001e+03, 7.54235628e+03, 7.55934341e+03,\n       7.56924612e+03, 7.57750631e+03, 7.58010371e+03, 7.59023769e+03,\n       7.59311716e+03, 7.61144236e+03, 7.63320243e+03, 7.65044976e+03,\n       7.65090116e+03, 7.65466020e+03, 7.67380580e+03, 7.67494387e+03,\n       7.67916571e+03, 7.70913829e+03, 7.71098903e+03, 7.71323160e+03,\n       7.71599974e+03, 7.71641524e+03, 7.72701696e+03, 7.74279888e+03,\n       7.74640159e+03, 7.75137746e+03, 7.77053390e+03, 7.77330783e+03,\n       7.77589477e+03, 7.78236832e+03, 7.80863413e+03, 7.80949536e+03,\n       7.80992966e+03, 7.81327680e+03, 7.82105658e+03, 7.83342543e+03,\n       7.83613097e+03, 7.83766048e+03, 7.84244202e+03, 7.85493200e+03,\n       7.86002901e+03, 7.86112308e+03, 7.86776193e+03, 7.87219027e+03,\n       7.87234360e+03, 7.87317260e+03, 7.87403317e+03, 7.87754578e+03,\n       7.87938945e+03, 7.88813989e+03, 7.89785801e+03, 7.90110195e+03,\n       7.90681539e+03, 7.91917898e+03, 7.93248593e+03, 7.93335084e+03,\n       7.95800994e+03, 7.99130787e+03, 7.99346500e+03, 8.02817136e+03,\n       8.04279895e+03, 8.05602181e+03, 8.07377997e+03, 8.07556358e+03,\n       8.07677174e+03, 8.07730361e+03, 8.08395032e+03, 8.08562906e+03,\n       8.08634179e+03, 8.08881923e+03, 8.11304317e+03, 8.11702368e+03,\n       8.12507306e+03, 8.12978407e+03, 8.13487747e+03, 8.13626064e+03,\n       8.14803906e+03, 8.17471837e+03, 8.17474174e+03, 8.17509981e+03,\n       8.17863408e+03, 8.17985372e+03, 8.18008265e+03, 8.18580009e+03,\n       8.22322232e+03, 8.22541603e+03, 8.22563083e+03, 8.23246924e+03,\n       8.23271254e+03, 8.23490974e+03, 8.24594029e+03, 8.24893983e+03,\n       8.24919550e+03, 8.25281674e+03, 8.26059195e+03, 8.26153452e+03,\n       8.27043254e+03, 8.27144164e+03, 8.28146309e+03, 8.29523971e+03,\n       8.29935235e+03, 8.30401979e+03, 8.30471866e+03, 8.31817338e+03,\n       8.32450803e+03, 8.32479073e+03, 8.33100820e+03, 8.34463783e+03,\n       8.34484459e+03, 8.35470984e+03, 8.35580068e+03, 8.35712468e+03,\n       8.36516836e+03, 8.38519600e+03, 8.39557458e+03, 8.41420291e+03,\n       8.42365606e+03, 8.43435894e+03, 8.43650348e+03, 8.45013414e+03,\n       8.46636140e+03, 8.46843323e+03, 8.47264034e+03, 8.47286641e+03,\n       8.47694452e+03, 8.47705768e+03, 8.53232638e+03, 8.56427460e+03,\n       8.60442353e+03, 8.62920350e+03, 8.65760702e+03, 8.66805254e+03,\n       8.66851894e+03, 8.67153321e+03, 8.67527348e+03, 8.67552952e+03,\n       8.69607032e+03, 8.69786145e+03, 8.72507333e+03, 8.75621608e+03,\n       8.76310086e+03, 8.77362205e+03, 8.80855471e+03, 8.85410818e+03,\n       8.86096679e+03, 8.86762311e+03, 8.87719119e+03, 8.89578382e+03,\n       8.90953994e+03, 8.91344502e+03, 8.92127043e+03, 8.92436890e+03,\n       8.93092468e+03, 8.93512179e+03, 8.95474292e+03, 8.97447182e+03,\n       8.97529475e+03, 8.97533432e+03, 8.98627884e+03, 9.01205655e+03,\n       9.01579959e+03, 9.06159986e+03, 9.08643181e+03, 9.08932908e+03,\n       9.09322812e+03, 9.09393032e+03, 9.09934159e+03, 9.11692359e+03,\n       9.12144733e+03, 9.12504627e+03, 9.13448145e+03, 9.13466042e+03,\n       9.13921979e+03, 9.17585136e+03, 9.21406005e+03, 9.22458180e+03,\n       9.23543352e+03, 9.23558309e+03, 9.23998386e+03, 9.24400507e+03,\n       9.24701484e+03, 9.25437906e+03, 9.30289907e+03, 9.30955481e+03,\n       9.32078887e+03, 9.32602524e+03, 9.32908035e+03, 9.33375415e+03,\n       9.33856440e+03, 9.34201020e+03, 9.34257724e+03, 9.34489781e+03,\n       9.36746988e+03, 9.37057405e+03, 9.39468126e+03, 9.41633896e+03,\n       9.44538508e+03, 9.44998708e+03, 9.45019635e+03, 9.45821996e+03,\n       9.48622331e+03, 9.54607941e+03, 9.54645585e+03, 9.54919728e+03,\n       9.58089717e+03, 9.63575510e+03, 9.66119704e+03, 9.69464599e+03,\n       9.80743402e+03, 9.84075767e+03, 9.84108314e+03, 9.90756592e+03,\n       9.90833145e+03, 9.91600243e+03, 9.95964584e+03])\n array([  36.40503875,  104.95898723,  114.2080361 , ..., 9966.10011711,\n       9966.1122838 , 9966.12238381])\n array([5.06138610e+00, 8.16342465e+00, 8.32929159e+00, ...,\n       9.96546702e+03, 9.96548958e+03, 9.96589408e+03])\n array([  84.24971911,   85.05912047,   85.08172051, ..., 9965.9933836 ,\n       9966.0761504 , 9966.14198385])\n array([6.62785540e+00, 7.18515634e+00, 1.14815636e+01, ...,\n       9.96604542e+03, 9.96605652e+03, 9.96612522e+03])\n array([3.95345091e+00, 3.96421759e+00, 4.21755135e+00, ...,\n       9.93850284e+03, 9.94901979e+03, 9.95074039e+03])\n array([6.33206387e+00, 8.88730551e+00, 9.00390589e+00, ...,\n       9.96529965e+03, 9.96601745e+03, 9.96604669e+03])\n array([  10.18774307,   10.39924375,   10.7919117 , ..., 9966.10885272,\n       9966.15501954, 9966.17681961])\n array([  17.36489972,   87.24486006,   90.06453589, ..., 9966.09765268,\n       9966.12875278, 9966.17881961])\n array([  84.57711806,   88.50359749,   89.30403342, ..., 9965.62648449,\n       9965.77061829, 9965.93225215])\n array([3.82652240e+00, 3.92445605e+00, 4.05575648e+00, ...,\n       9.96580562e+03, 9.96594742e+03, 9.96612799e+03])\n array([7.08603299e+00, 7.27286693e+00, 1.25757842e+01, ...,\n       9.96602469e+03, 9.96615635e+03, 9.96618715e+03])\n array([  95.38591984,   98.1622622 ,   98.20986235, ..., 9965.9380855 ,\n       9966.0515192 , 9966.20558637])\n array([  23.301919  ,   37.8616663 ,   39.31413769, ..., 9950.74546948,\n       9965.94075217, 9966.06455258])\n array([3.80628900e+00, 3.81332236e+00, 3.82705574e+00, ...,\n       9.96618349e+03, 9.96619852e+03, 9.96620365e+03])\n array([  85.04018623,   85.12321984,   85.22488683, ..., 9953.74037921,\n       9953.82411281, 9953.90951309])\n array([3.80408900e+00, 3.81895571e+00, 3.87082255e+00, ...,\n       9.96616835e+03, 9.96618959e+03, 9.96620175e+03])\n array([3.79895565e+00, 3.81812237e+00, 3.83028908e+00, ...,\n       9.96613419e+03, 9.96615329e+03, 9.96618829e+03])\n array([  11.63494777,   19.26413922,   24.49838956, ..., 9965.98685232,\n       9966.08595265, 9966.17795294])\n array([  25.51262618,  169.57246085,  187.72415315, ..., 9965.79508503,\n       9965.86118525, 9965.91611876])\n array([  97.40995975,   97.49946004,   97.50982674, ..., 9943.18057823,\n       9944.87555041, 9950.98237025])\n array([6.33129721e+00, 7.14276651e+00, 1.05797443e+01, ...,\n       9.91948083e+03, 9.93359611e+03, 9.93422762e+03])\n array([3.91208935e+00, 3.95522282e+00, 3.97075620e+00, ...,\n       9.94727072e+03, 9.94734566e+03, 9.94745793e+03])\n array([  32.41894862,  103.95504768,  119.39153116, ..., 9965.64815122,\n       9965.95391888, 9966.0305858 ])\n array([3.87618923e+00, 3.93285608e+00, 3.96695619e+00, ...,\n       9.96608269e+03, 9.96614932e+03, 9.96618309e+03])\n array([3.84405579e+00, 4.00065630e+00, 6.42843085e+00, ...,\n       9.94991340e+03, 9.94992157e+03, 9.94995710e+03])\n array([3.90662266e+00, 3.92178938e+00, 3.94475612e+00, ...,\n       9.96552688e+03, 9.96577255e+03, 9.96605622e+03])\n array([3.80768901e+00, 3.84042245e+00, 3.88452259e+00, ...,\n       9.96581702e+03, 9.96592019e+03, 9.96596892e+03])\n array([3.81828904e+00, 3.86038918e+00, 3.86858920e+00, ...,\n       9.96612019e+03, 9.96615615e+03, 9.96618555e+03])\n array([  17.69626746,   19.63427376,   20.38534286, ..., 9959.11736334,\n       9965.83821851, 9965.97188561])\n array([3.96908953e+00, 3.99932296e+00, 4.18119022e+00, ...,\n       9.96603092e+03, 9.96613072e+03, 9.96618299e+03])\n array([  11.71658137,   11.74804814,   11.76964821, ..., 9965.58388435,\n       9965.6002844 , 9965.72291813])\n array([  11.80054831,   11.82418172,   11.87204854, ..., 9950.25266788,\n       9965.54051754, 9965.58011767])\n array([4.08668991e+00, 5.05312639e+00, 7.85696883e+00, ...,\n       9.96612002e+03, 9.96617015e+03, 9.96617932e+03])\n array([3.80375566e+00, 3.83945578e+00, 3.87135588e+00, ...,\n       9.96613172e+03, 9.96616562e+03, 9.96617629e+03])\n array([3.85915584e+00, 3.86515586e+00, 3.86908921e+00, ...,\n       9.96605822e+03, 9.96609062e+03, 9.96610315e+03])\n array([3.83295576e+00, 3.87608923e+00, 3.91012267e+00, ...,\n       9.96613405e+03, 9.96615672e+03, 9.96616785e+03])\n array([3.91812270e+00, 3.92572272e+00, 3.93025607e+00, ...,\n       9.96619802e+03, 9.96620382e+03, 9.96620795e+03])\n array([3.81038902e+00, 3.87035588e+00, 3.89402262e+00, ...,\n       9.96559965e+03, 9.96565622e+03, 9.96578382e+03])\n array([3.80282232e+00, 3.82228905e+00, 3.92998940e+00, ...,\n       9.96606772e+03, 9.96611359e+03, 9.96612942e+03])\n array([3.79848898e+00, 3.83175575e+00, 3.84575580e+00, ...,\n       9.96619332e+03, 9.96620232e+03, 9.96620849e+03])\n array([3.80052232e+00, 3.80468900e+00, 3.80942235e+00, ...,\n       9.96619779e+03, 9.96620092e+03, 9.96620625e+03])\n array([3.88298925e+00, 3.90408932e+00, 3.97565622e+00, ...,\n       9.96612422e+03, 9.96617655e+03, 9.96619949e+03])\n array([  13.51968722,   19.81937436,   22.0905484 , ..., 9950.21493442,\n       9965.45491726, 9965.46368396])\n array([4.55315810e+00, 4.91325927e+00, 5.31519390e+00, ...,\n       9.96510132e+03, 9.96517352e+03, 9.96545592e+03])\n array([  15.7682612 ,   40.02827334,   72.0288773 , ..., 9966.05305254,\n       9966.07261927, 9966.15875288])\n array([4.20922364e+00, 4.25835714e+00, 4.32345735e+00, ...,\n       9.96586129e+03, 9.96590295e+03, 9.96593805e+03])\n array([3.84275579e+00, 3.90408932e+00, 3.91945604e+00, ...,\n       9.96618655e+03, 9.96619419e+03, 9.96619695e+03])\n array([3.83185575e+00, 4.01645635e+00, 4.04178977e+00, ...,\n       9.96613712e+03, 9.96615962e+03, 9.96618985e+03])\n array([3.80332233e+00, 3.85975584e+00, 3.88048924e+00, ...,\n       9.96535825e+03, 9.96542148e+03, 9.96544562e+03])\n array([ 139.24442899,  140.63113349,  186.37491543, ..., 9961.00536947,\n       9961.33347054, 9962.08587298])\n array([4.61052495e+00, 4.80242557e+00, 4.82749232e+00, ...,\n       9.96392011e+03, 9.96412095e+03, 9.96462261e+03])\n array([  68.35819871,  172.91757171,  207.15624961, ..., 9960.53276794,\n       9960.65266833, 9966.18018629])\n array([3.98058957e+00, 4.98809284e+00, 5.10979324e+00, ...,\n       9.96527598e+03, 9.96566535e+03, 9.96583052e+03])\n array([3.85348916e+00, 3.88315592e+00, 4.03378974e+00, ...,\n       9.96532815e+03, 9.96547565e+03, 9.96557678e+03])\n array([4.48029119e+00, 4.48502454e+00, 4.48992456e+00, ...,\n       9.96590075e+03, 9.96590319e+03, 9.96600249e+03])\n array([4.70532526e+00, 4.89035919e+00, 8.51570430e+00, ...,\n       9.96227827e+03, 9.96369321e+03, 9.96369848e+03])\n array([4.54949142e+00, 6.72819849e+00, 8.32267034e+00, ...,\n       9.96552525e+03, 9.96563248e+03, 9.96563938e+03])\n array([3.79122229e+00, 3.95045614e+00, 3.95438948e+00, ...,\n       9.96578529e+03, 9.96594155e+03, 9.96618362e+03])\n array([3.80105565e+00, 3.81068902e+00, 3.82402239e+00, ...,\n       9.96612132e+03, 9.96612692e+03, 9.96617369e+03])\n array([3.92685606e+00, 3.97695622e+00, 4.11525667e+00, ...,\n       9.96593119e+03, 9.96606639e+03, 9.96615659e+03])\n array([4.89405920e+00, 5.46856107e+00, 5.47309442e+00, ...,\n       9.96425708e+03, 9.96494215e+03, 9.96495308e+03])\n array([4.09515661e+00, 4.50325793e+00, 4.77342548e+00, ...,\n       9.96606685e+03, 9.96615389e+03, 9.96616685e+03])\n array([ 179.36139265,  312.12275727,  312.91555985, ..., 9950.65266918,\n       9952.4060082 , 9961.98570599])\n array([  11.14937952,   20.70791058,   20.71244392, ..., 9965.07701603,\n       9965.25518328, 9965.39245039])\n array([4.93955935e+00, 4.95162606e+00, 4.95565940e+00, ...,\n       9.91166761e+03, 9.93710956e+03, 9.95184684e+03])\n array([3.88198925e+00, 4.51572464e+00, 4.53685804e+00, ...,\n       9.96439215e+03, 9.96475031e+03, 9.96562292e+03])\n array([6.04569628e+00, 9.01740593e+00, 9.02177261e+00, ...,\n       9.96607309e+03, 9.96616222e+03, 9.96619575e+03])\n array([3.84482246e+00, 3.91922270e+00, 3.94838946e+00, ...,\n       9.96215227e+03, 9.96234264e+03, 9.96235571e+03])\n array([3.88148925e+00, 4.08062323e+00, 4.15322346e+00, ...,\n       9.96541582e+03, 9.96591969e+03, 9.96618679e+03])\n array([3.82648907e+00, 3.92092271e+00, 3.94598946e+00, ...,\n       9.95082874e+03, 9.96282211e+03, 9.96457141e+03])\n array([3.94475612e+00, 3.94918947e+00, 4.08142323e+00, ...,\n       9.96615559e+03, 9.96616242e+03, 9.96618229e+03])\n array([8.91277226e+00, 8.91697227e+00, 8.92037228e+00, ...,\n       9.96493268e+03, 9.96509952e+03, 9.96541315e+03])\n array([4.70522526e+00, 8.51557097e+00, 9.17010643e+00, ...,\n       9.95848736e+03, 9.95936013e+03, 9.95964760e+03])\n array([  36.41142826,   36.68382914,   78.52476507, ..., 9961.90417239,\n       9965.22478318, 9965.93078547])\n array([  23.30495235,   32.75984973,   32.76641642, ..., 9964.88848209,\n       9964.89331544, 9965.90035204])\n array([5.10172654e+00, 5.13289331e+00, 5.13352665e+00, ...,\n       9.96473011e+03, 9.96473411e+03, 9.96608929e+03])\n array([  23.30488568,   32.75978306,   32.76634975, ..., 9964.69354812,\n       9964.89321544, 9965.90021871])\n array([3.85775584e+00, 9.52857426e+00, 1.00008758e+01, ...,\n       9.96531465e+03, 9.96540122e+03, 9.96540515e+03])\n array([3.91398935e+00, 4.08022323e+00, 4.10028996e+00, ...,\n       9.96606132e+03, 9.96608629e+03, 9.96618769e+03])\n array([3.79662230e+00, 3.80742234e+00, 3.81305569e+00, ...,\n       9.96612845e+03, 9.96615699e+03, 9.96618509e+03])\n array([3.82925574e+00, 3.88488926e+00, 4.03838976e+00, ...,\n       9.96608055e+03, 9.96618255e+03, 9.96620775e+03])\n array([3.79625564e+00, 3.80648900e+00, 3.85595583e+00, ...,\n       9.96618179e+03, 9.96618435e+03, 9.96619732e+03])\n array([  12.00624897,   85.23275353,  101.99947466, ..., 9966.0625859 ,\n       9966.13678614, 9966.20368636])\n array([  11.4179804 ,   11.45054717,   11.50431401, ..., 9965.9500522 ,\n       9966.01515242, 9966.11078606])\n array([3.80108899e+00, 3.81968905e+00, 3.83652243e+00, ...,\n       9.96573548e+03, 9.96599262e+03, 9.96602135e+03])\n array([3.80562233e+00, 3.95422282e+00, 4.11115666e+00, ...,\n       9.96565725e+03, 9.96598645e+03, 9.96600989e+03])\n array([  23.38825262,   25.03495797,   25.07159142, ..., 9962.57204123,\n       9963.39001055, 9963.54321105])\n array([3.83455576e+00, 3.97658956e+00, 4.11078999e+00, ...,\n       9.96521235e+03, 9.96531635e+03, 9.96534865e+03])\n array([4.53755804e+00, 5.02365962e+00, 7.34236716e+00, ...,\n       9.96514788e+03, 9.96529662e+03, 9.96540545e+03])\n array([3.92525606e+00, 4.09182326e+00, 4.37659086e+00, ...,\n       9.96508782e+03, 9.96527575e+03, 9.96540132e+03])\n array([4.85929242e+00, 5.53382795e+00, 5.54626132e+00, ...,\n       9.96597779e+03, 9.96615022e+03, 9.96615582e+03])\n array([3.82368906e+00, 3.86738920e+00, 4.01242301e+00, ...,\n       9.96599389e+03, 9.96611722e+03, 9.96619995e+03])\n array([  11.35438019,   11.37551359,   11.3873803 , ..., 9965.89128535,\n       9965.92381879, 9966.09985269])\n array([  50.5010407 ,   68.19259817,   92.24690965, ..., 9965.52798417,\n       9965.55365092, 9965.5884177 ])\n array([  71.94524369,   72.11881092,   72.36434505, ..., 9965.37098366,\n       9965.61548445, 9965.97595229])\n array([  12.10271595,   12.56721746,   13.81578819, ..., 9965.57255098,\n       9965.58305101, 9965.84355186])\n array([8.35000376e+00, 8.54313772e+00, 8.79263853e+00, ...,\n       9.96012987e+03, 9.96031597e+03, 9.96091554e+03])\n array([3.83175575e+00, 3.88125591e+00, 4.02682305e+00, ...,\n       9.96455095e+03, 9.96538088e+03, 9.96539968e+03])\n array([  11.34168015,   11.40074701,   11.41461372, ..., 9965.54365088,\n       9965.55645093, 9965.56225094])\n array([3.79608897e+00, 3.93242275e+00, 4.30735730e+00, ...,\n       9.96381875e+03, 9.96591119e+03, 9.96614305e+03])\n array([  24.52132296,   34.58488899,   85.96288923, ..., 9964.06561275,\n       9965.01731584, 9966.19398633])\n array([  11.34338015,   27.73866675,  106.97305749, ..., 9963.14204308,\n       9963.51424429, 9966.15818621])\n array([  84.91388582,   85.01535282,   86.03782281, ..., 9952.28880782,\n       9954.44228149, 9966.09445267])\n array([6.36173064e+00, 6.39969743e+00, 6.42813085e+00, ...,\n       9.96584665e+03, 9.96590009e+03, 9.96607735e+03])\n array([  11.35934687,   11.39004697,   11.43954713, ..., 9965.4988174 ,\n       9965.59688439, 9965.84088518])\n array([5.48419445e+00, 1.14219471e+01, 2.05163100e+01, ...,\n       9.91502175e+03, 9.95647642e+03, 9.96060073e+03])\n array([9.56864106e+00, 1.14294138e+01, 1.14536138e+01, ...,\n       9.96607385e+03, 9.96612239e+03, 9.96620375e+03])\n array([3.88395592e+00, 7.79780197e+00, 1.15849809e+01, ...,\n       9.96481832e+03, 9.96560265e+03, 9.96590372e+03])\n array([  11.48091393,   11.50994736,   11.58798095, ..., 9965.2808167 ,\n       9965.77475163, 9966.15558621])\n array([  11.34504683,   11.35281352,   11.36394689, ..., 9965.87098528,\n       9965.89948537, 9965.91788543])\n array([  46.10455975,   88.78809841,   92.60187747, ..., 9959.97949947,\n       9960.10813323, 9966.04385251])\n array([  86.12178975,   86.15828987,   86.28265694, ..., 9966.03468581,\n       9966.07581928, 9966.18298629])\n array([7.69806831e+00, 1.13830469e+01, 1.14465138e+01, ...,\n       9.96591645e+03, 9.96600752e+03, 9.96616612e+03])\n array([8.08480290e+00, 1.15265474e+01, 1.16518812e+01, ...,\n       9.96570922e+03, 9.96578492e+03, 9.96588119e+03])\n array([3.81578903e+00, 3.96755619e+00, 3.99805629e+00, ...,\n       9.96598322e+03, 9.96609025e+03, 9.96618315e+03])\n array([  11.45154717,   11.51191404,   11.57834758, ..., 9965.78085165,\n       9965.81935178, 9966.04425251])\n array([6.68953170e+00, 1.13986137e+01, 1.14136804e+01, ...,\n       9.96589975e+03, 9.96594169e+03, 9.96609705e+03])\n array([  36.53909534,   67.17049485,   84.63065157, ..., 9965.88511866,\n       9965.95548556, 9966.07771929])\n array([4.00015630e+00, 4.13412340e+00, 4.23972374e+00, ...,\n       9.96592939e+03, 9.96603995e+03, 9.96614372e+03])\n array([  11.36591356,   21.82088086,   68.16453141, ..., 9965.8040184 ,\n       9965.84088518, 9966.0424525 ])\n array([5.50956120e+00, 1.14438805e+01, 1.14443138e+01, ...,\n       9.96558665e+03, 9.96566535e+03, 9.96575355e+03])\n array([  11.70204799,   13.68638777,   13.83142157, ..., 9966.07735262,\n       9966.13311947, 9966.1543862 ])\n array([3.93948944e+00, 4.03452308e+00, 4.32095734e+00, ...,\n       9.96612119e+03, 9.96617229e+03, 9.96619435e+03])\n array([3.80972235e+00, 3.84358912e+00, 3.92642273e+00, ...,\n       9.96603449e+03, 9.96615119e+03, 9.96619342e+03])\n array([  11.39504699,   11.43624712,   11.44128047, ..., 9963.34284373,\n       9965.49108405, 9965.58105101])\n array([  11.42004707,   41.13381027,   52.7791481 , ..., 9962.49120763,\n       9965.77791831, 9965.91721876])\n array([3.82215572e+00, 3.92082271e+00, 3.97548955e+00, ...,\n       9.96588415e+03, 9.96603399e+03, 9.96615695e+03])\n array([3.81025568e+00, 3.91185601e+00, 3.98325624e+00, ...,\n       9.96611662e+03, 9.96613162e+03, 9.96618669e+03])\n array([3.86242252e+00, 3.96952287e+00, 4.08752325e+00, ...,\n       9.96609542e+03, 9.96615532e+03, 9.96620375e+03])\n array([3.92782273e+00, 4.93649267e+00, 5.72856191e+00, ...,\n       9.96608232e+03, 9.96613599e+03, 9.96619859e+03])\n array([3.96665619e+00, 5.36936075e+00, 5.88659576e+00, ...,\n       9.96604969e+03, 9.96610705e+03, 9.96612409e+03])\n array([3.96365618e+00, 4.05348981e+00, 4.11128999e+00, ...,\n       9.96594555e+03, 9.96614892e+03, 9.96616719e+03])\n array([  84.8559523 ,   84.90565246,   84.94821927, ..., 9965.17328301,\n       9965.91581876, 9966.10251937])\n array([5.33949398e+00, 7.10009970e+00, 8.83160533e+00, ...,\n       9.96577552e+03, 9.96606102e+03, 9.96618269e+03])\n array([  10.10877614,   11.39441365,   11.44718049, ..., 9958.75322882,\n       9959.72299864, 9961.68183834])\n array([6.58739804e+00, 6.61279812e+00, 6.74616522e+00, ...,\n       9.96563408e+03, 9.96572572e+03, 9.96581232e+03])\n array([5.57906143e+00, 6.66506496e+00, 7.29666701e+00, ...,\n       9.96600029e+03, 9.96609472e+03, 9.96614989e+03])\n array([7.14509985e+00, 3.50516572e+01, 6.98015034e+01, ...,\n       9.96161297e+03, 9.96182957e+03, 9.96258494e+03])\n array([5.98232941e+00, 3.50185571e+01, 3.50853239e+01, ...,\n       9.96473635e+03, 9.96496772e+03, 9.96522515e+03])\n array([  13.78145474,   38.41803478,   69.88753701, ..., 9965.53275085,\n       9965.74205153, 9966.19798634])\n array([  14.54342388,   14.74779121,   20.2139423 , ..., 9965.74768488,\n       9965.88411866, 9966.1026527 ])\n array([3.82885574e+00, 3.89692263e+00, 5.55059467e+00, ...,\n       9.96290444e+03, 9.96375841e+03, 9.96406111e+03])\n array([6.56193129e+00, 6.65299825e+00, 6.66886497e+00, ...,\n       9.96561958e+03, 9.96572938e+03, 9.96578132e+03])\n array([7.27490027e+00, 9.96194233e+00, 2.84353357e+01, ...,\n       9.96539542e+03, 9.96546978e+03, 9.96556242e+03])\n array([  17.85243463,   61.38447605,   64.94065427, ..., 9951.8608731 ,\n       9955.00171664, 9962.03827283])\n array([4.10558997e+00, 6.40286410e+00, 7.25066686e+00, ...,\n       9.96193117e+03, 9.96548205e+03, 9.96580135e+03])\n array([7.27230026e+00, 7.28850031e+00, 7.68453493e+00, ...,\n       9.95433488e+03, 9.95845999e+03, 9.95855559e+03])\n array([6.91956578e+00, 8.71523828e+00, 9.72837491e+00, ...,\n       9.94408095e+03, 9.94410935e+03, 9.96577542e+03])\n array([  11.40528036,   11.6957813 ,   12.57198415, ..., 9956.35162102,\n       9957.55069158, 9962.49340764])\n array([3.98505625e+00, 4.04662312e+00, 4.09535661e+00, ...,\n       9.96614679e+03, 9.96615745e+03, 9.96618302e+03])\n array([5.74492863e+00, 7.10006637e+00, 7.14103317e+00, ...,\n       9.95840296e+03, 9.95841356e+03, 9.95909883e+03])\n array([  52.25074638,   52.34101334,  102.42640938, ..., 9963.43257736,\n       9964.46931406, 9964.8002818 ])\n array([3.90078931e+00, 4.01578968e+00, 8.81263860e+00, ...,\n       9.96550048e+03, 9.96562425e+03, 9.96608699e+03])\n array([  84.84898561,   84.87395236,   84.95605263, ..., 9965.67088463,\n       9965.68068466, 9965.79911838])\n array([8.82597198e+00, 8.61258231e+01, 1.23441344e+02, ...,\n       9.96251641e+03, 9.96281918e+03, 9.96555262e+03])\n array([  11.41334705,   11.46454721,   11.48348061, ..., 9943.90091391,\n       9962.08407298, 9964.9320489 ])\n array([8.88697217e+00, 1.15174474e+01, 1.15721142e+01, ...,\n       9.96454865e+03, 9.96533305e+03, 9.96533585e+03])\n array([5.06142641e+00, 1.16231811e+01, 1.19538155e+01, ...,\n       9.95736616e+03, 9.96272131e+03, 9.96448588e+03])\n array([3.93245608e+00, 4.14522344e+00, 4.18292356e+00, ...,\n       9.96575832e+03, 9.96596519e+03, 9.96601325e+03])\n array([  11.42738043,   11.45271384,   11.51964739, ..., 9959.43969772,\n       9965.54871757, 9965.56498429])\n array([  11.36598023,   11.38904697,   11.41228038, ..., 9965.6317845 ,\n       9965.92328545, 9966.1130194 ])\n array([3.80752234e+00, 3.82155572e+00, 3.83795577e+00, ...,\n       9.96609555e+03, 9.96610332e+03, 9.96619489e+03])\n array([5.35299403e+00, 5.76349536e+00, 6.11826318e+00, ...,\n       9.96577015e+03, 9.96581452e+03, 9.96592109e+03])\n array([8.82523864e+00, 8.91767227e+00, 8.96917244e+00, ...,\n       9.96608732e+03, 9.96611332e+03, 9.96612975e+03])\n array([3.98605625e+00, 4.03638975e+00, 5.07429312e+00, ...,\n       9.96568115e+03, 9.96591009e+03, 9.96594425e+03])\n array([3.87088921e+00, 3.91165601e+00, 4.08472324e+00, ...,\n       9.96575442e+03, 9.96587342e+03, 9.96588175e+03])\n array([3.79655564e+00, 3.85398916e+00, 3.86062251e+00, ...,\n       9.96595879e+03, 9.96602239e+03, 9.96609329e+03])\n array([  76.83512625,   87.84366201,   87.85029536, ..., 9965.07218269,\n       9965.7030514 , 9965.84511853])\n array([3.85942251e+00, 3.92368938e+00, 3.97058954e+00, ...,\n       9.96570462e+03, 9.96575475e+03, 9.96602002e+03])\n array([3.81098902e+00, 3.86045585e+00, 3.95105614e+00, ...,\n       9.96596179e+03, 9.96603359e+03, 9.96616749e+03])\n array([  87.429994  ,   99.6505337 ,  109.56559924, ..., 9941.01927121,\n       9949.5831657 , 9962.35287385])\n array([4.00748966e+00, 5.35219402e+00, 6.57123132e+00, ...,\n       9.96599415e+03, 9.96605859e+03, 9.96615922e+03])\n array([4.05319336e+00, 4.60326177e+00, 4.85712923e+00, ...,\n       9.96620808e+03, 9.96620955e+03, 9.96621388e+03])\n array([4.81309576e+00, 4.83552917e+00, 5.53949806e+00, ...,\n       9.96529805e+03, 9.96546041e+03, 9.96547755e+03])\n array([5.96879941e+00, 5.97343276e+00, 6.21620019e+00, ...,\n       9.96616485e+03, 9.96618182e+03, 9.96626288e+03])\n array([9.02384239e+00, 1.30799552e+01, 2.40929233e+01, ...,\n       9.92070587e+03, 9.92074271e+03, 9.96116093e+03])\n array([6.36743400e+00, 6.37100068e+00, 6.38820074e+00, ...,\n       9.96011156e+03, 9.96011696e+03, 9.96012106e+03])\n array([3.87612614e+00, 3.93499299e+00, 4.06786008e+00, ...,\n       9.96619105e+03, 9.96621965e+03, 9.96624545e+03])\n array([3.80502591e+00, 4.79809571e+00, 5.27009720e+00, ...,\n       9.96622758e+03, 9.96623425e+03, 9.96624118e+03])\n array([3.88245949e+00, 3.89099285e+00, 3.89519286e+00, ...,\n       9.96553948e+03, 9.96564355e+03, 9.96567268e+03])\n array([4.30129415e+00, 4.60882845e+00, 4.67082865e+00, ...,\n       9.96622525e+03, 9.96624582e+03, 9.96625658e+03])\n array([3.90479289e+00, 3.93515966e+00, 3.95642639e+00, ...,\n       9.96542305e+03, 9.96567338e+03, 9.96598671e+03])\n array([3.78069250e+00, 4.07299342e+00, 4.60969512e+00, ...,\n       9.96606655e+03, 9.96622225e+03, 9.96624008e+03])\n array([3.78012583e+00, 3.91915961e+00, 3.97369311e+00, ...,\n       9.96581105e+03, 9.96582658e+03, 9.96615988e+03])\n array([4.06529340e+00, 4.07282676e+00, 4.55689495e+00, ...,\n       9.96460574e+03, 9.96466274e+03, 9.96582621e+03])\n array([4.21289387e+00, 5.83646566e+00, 5.93423264e+00, ...,\n       9.96573451e+03, 9.96574295e+03, 9.96581225e+03])\n array([3.98769316e+00, 4.08196012e+00, 4.55719495e+00, ...,\n       9.95634035e+03, 9.96550388e+03, 9.96580891e+03])\n array([3.80239257e+00, 3.89995955e+00, 3.94759303e+00, ...,\n       9.96614052e+03, 9.96614882e+03, 9.96618895e+03])\n array([4.07322676e+00, 4.94269617e+00, 5.61966498e+00, ...,\n       9.96614352e+03, 9.96622332e+03, 9.96625202e+03])\n array([3.84992605e+00, 4.33959427e+00, 4.35626099e+00, ...,\n       9.96606645e+03, 9.96607048e+03, 9.96624375e+03])\n array([5.74996539e+00, 6.69230170e+00, 1.02186128e+01, ...,\n       9.96118607e+03, 9.96474608e+03, 9.96529315e+03])\n array([4.04976002e+00, 4.08286012e+00, 4.55462828e+00, ...,\n       9.96547491e+03, 9.96547795e+03, 9.96553941e+03])\n array([6.48013436e+00, 7.46873748e+00, 8.20867315e+00, ...,\n       9.95735409e+03, 9.95813222e+03, 9.95837566e+03])\n array([4.02655994e+00, 6.77196861e+00, 7.04520281e+00, ...,\n       9.96592518e+03, 9.96593135e+03, 9.96598118e+03])\n array([8.47567399e+00, 1.10722822e+01, 1.15123836e+01, ...,\n       9.94158434e+03, 9.95522231e+03, 9.95962016e+03])\n array([3.99599318e+00, 5.80509889e+00, 5.80843224e+00, ...,\n       9.96065420e+03, 9.96172530e+03, 9.96594508e+03])\n array([5.23126375e+00, 5.34776412e+00, 5.34963079e+00, ...,\n       9.96608302e+03, 9.96616898e+03, 9.96626025e+03])\n array([3.81735928e+00, 3.86609277e+00, 3.93029297e+00, ...,\n       9.96616458e+03, 9.96619212e+03, 9.96624278e+03])\n array([3.97872646e+00, 4.22629391e+00, 4.25636067e+00, ...,\n       9.96617705e+03, 9.96622922e+03, 9.96625528e+03])\n array([4.20206050e+00, 4.52932820e+00, 4.74959556e+00, ...,\n       9.96574375e+03, 9.96586458e+03, 9.96624882e+03])\n array([3.78792586e+00, 3.90589290e+00, 3.98649315e+00, ...,\n       9.96610532e+03, 9.96618865e+03, 9.96623615e+03])\n array([5.22393039e+00, 5.34869745e+00, 1.14386167e+01, ...,\n       9.96618312e+03, 9.96618812e+03, 9.96625168e+03])\n array([3.90809290e+00, 4.04102666e+00, 4.05439337e+00, ...,\n       9.96619145e+03, 9.96622945e+03, 9.96626002e+03])\n array([7.57180447e+00, 7.87270542e+00, 1.93718417e+01, ...,\n       9.96418664e+03, 9.96463808e+03, 9.96501288e+03])\n array([4.38972776e+00, 4.95332954e+00, 5.66793179e+00, ...,\n       9.96473648e+03, 9.96522671e+03, 9.96535038e+03])\n array([9.77551143e+00, 1.05819473e+01, 1.08712482e+01, ...,\n       9.96556315e+03, 9.96600145e+03, 9.96611475e+03])\n array([7.18333658e+00, 7.58257117e+00, 8.93697545e+00, ...,\n       9.95026993e+03, 9.95060327e+03, 9.95489448e+03])\n array([6.72690180e+00, 7.00056934e+00, 1.13616164e+01, ...,\n       9.96618052e+03, 9.96618852e+03, 9.96620832e+03])\n array([3.85465940e+00, 5.77166546e+00, 1.10260154e+01, ...,\n       9.96619292e+03, 9.96621945e+03, 9.96626308e+03])\n array([  11.34818306,   11.36354978,   11.37578315, ..., 9965.94368153,\n       9966.12698211, 9966.23401578])\n array([  11.63835065,   11.85565133,   11.8997848 , ..., 9965.99458169,\n       9966.03651516, 9966.22788243])\n array([4.08022678e+00, 6.45220094e+00, 8.07810607e+00, ...,\n       9.96588888e+03, 9.96589765e+03, 9.96590235e+03])\n array([  11.35474975,   11.36451645,   11.3695498 , ..., 9966.20204901,\n       9966.22158241, 9966.25151583])\n array([3.78685919e+00, 4.75389557e+00, 6.36360066e+00, ...,\n       9.96624902e+03, 9.96625362e+03, 9.96626112e+03])\n array([  11.38214984,   11.38738319,   11.47135012, ..., 9965.5321469 ,\n       9965.55024695, 9966.1470155 ])\n array([3.79605922e+00, 4.08529346e+00, 4.18932713e+00, ...,\n       9.96015413e+03, 9.96057246e+03, 9.96207124e+03])\n array([3.78382585e+00, 3.94405968e+00, 4.13322695e+00, ...,\n       9.96623635e+03, 9.96624965e+03, 9.96626165e+03])\n array([3.78012583e+00, 3.94859303e+00, 4.57366167e+00, ...,\n       9.96599158e+03, 9.96602242e+03, 9.96605018e+03])\n array([3.91735960e+00, 4.01202657e+00, 4.11102688e+00, ...,\n       9.96610272e+03, 9.96615485e+03, 9.96624282e+03])\n array([8.66937460e+00, 8.67684129e+00, 1.32606558e+01, ...,\n       9.96607385e+03, 9.96611498e+03, 9.96619625e+03])\n array([4.86872927e+00, 6.35310062e+00, 6.63863486e+00, ...,\n       9.96614202e+03, 9.96618355e+03, 9.96625412e+03])\n array([3.83325933e+00, 4.02132660e+00, 4.13346028e+00, ...,\n       9.96601532e+03, 9.96613458e+03, 9.96623115e+03])\n array([  15.65142998,   23.0977535 ,   27.30680012, ..., 9965.95358156,\n       9966.10721538, 9966.25278251])\n array([5.77546547e+00, 6.75756857e+00, 9.93271193e+00, ...,\n       9.96584835e+03, 9.96601902e+03, 9.96604908e+03])\n array([4.73782886e+00, 5.02719644e+00, 6.20480016e+00, ...,\n       9.96571831e+03, 9.96576245e+03, 9.96581165e+03])\n array([4.49999477e+00, 4.85609590e+00, 5.01669640e+00, ...,\n       9.96596945e+03, 9.96611648e+03, 9.96624588e+03])\n array([4.93799616e+00, 6.75886857e+00, 1.14340500e+01, ...,\n       9.96559661e+03, 9.96571171e+03, 9.96582851e+03])\n array([6.87630228e+00, 7.30043695e+00, 7.42810402e+00, ...,\n       9.96553571e+03, 9.96557878e+03, 9.96574721e+03])\n array([5.06786323e+00, 5.87083243e+00, 6.85930222e+00, ...,\n       9.96364127e+03, 9.96388284e+03, 9.96390524e+03])\n array([3.78402585e+00, 3.84545937e+00, 3.87862614e+00, ...,\n       9.96608045e+03, 9.96611122e+03, 9.96622452e+03])\n array([5.18049692e+00, 1.18419513e+01, 1.19253849e+01, ...,\n       9.96574345e+03, 9.96580565e+03, 9.96621335e+03])\n array([6.83630215e+00, 6.83803549e+00, 7.07093622e+00, ...,\n       9.96568055e+03, 9.96583431e+03, 9.96588268e+03])\n array([  32.73498393,   60.71447227,   68.01542866, ..., 9960.97416584,\n       9962.80350495, 9965.67334734])\n array([7.74130501e+00, 7.84263866e+00, 7.85243869e+00, ...,\n       9.96040316e+03, 9.96044426e+03, 9.96462051e+03])\n array([3.83372600e+00, 4.02175993e+00, 4.29746080e+00, ...,\n       9.96540018e+03, 9.96578528e+03, 9.96579591e+03])\n array([6.81850209e+00, 7.18340325e+00, 9.86384504e+00, ...,\n       9.96601705e+03, 9.96614785e+03, 9.96622252e+03])\n array([7.55117107e+00, 1.13965165e+01, 1.14091499e+01, ...,\n       9.96589371e+03, 9.96601565e+03, 9.96620685e+03])\n array([  11.9830184 ,   53.21588193,   68.67163073, ..., 9907.49829699,\n       9935.31485149, 9935.584019  ])\n array([3.97485978e+00, 4.38649441e+00, 4.57546168e+00, ...,\n       9.96572031e+03, 9.96577001e+03, 9.96603418e+03])\n array([9.03367575e+00, 9.90174516e+00, 1.00942124e+01, ...,\n       9.96442561e+03, 9.96445258e+03, 9.96580225e+03])\n array([8.89447532e+00, 1.13429497e+01, 1.14078833e+01, ...,\n       9.96577791e+03, 9.96584188e+03, 9.96589711e+03])\n array([  97.02438692,  110.17356177,  119.67492511, ..., 9958.05778996,\n       9960.87506553, 9960.88636556])\n array([  50.59310698,   60.84053934,   84.86218185, ..., 9955.34238139,\n       9959.76249535, 9960.47979761])\n array([  51.67387706,   82.41620746,  130.16245822, ..., 9962.74927144,\n       9965.33881295, 9966.23444911])\n array([6.34496727e+00, 6.36100065e+00, 6.41723416e+00, ...,\n       9.96560091e+03, 9.96561801e+03, 9.96563761e+03])\n array([3.99389318e+00, 3.99589318e+00, 3.99822652e+00, ...,\n       9.96456224e+03, 9.96558835e+03, 9.96559235e+03])\n array([6.79396868e+00, 1.14547501e+01, 5.12782091e+01, ...,\n       9.92394708e+03, 9.95629932e+03, 9.96100193e+03])\n array([6.63356818e+00, 6.64123487e+00, 6.80423538e+00, ...,\n       9.96580178e+03, 9.96586181e+03, 9.96616262e+03])\n array([6.66453494e+00, 1.15690171e+01, 4.11825773e+01, ...,\n       9.96556751e+03, 9.96559688e+03, 9.96576285e+03])\n array([4.25779401e+00, 5.02599643e+00, 5.03596313e+00, ...,\n       9.96024000e+03, 9.96048186e+03, 9.96134537e+03])\n array([  58.77743282,   60.84697269,   60.86327274, ..., 9962.69537127,\n       9962.80367161, 9962.95683877])\n array([  11.39501654,   11.48241682,   11.54491702, ..., 9966.09774868,\n       9966.12854878, 9966.16548223])\n array([5.27953057e+00, 6.43433421e+00, 6.68643501e+00, ...,\n       9.96585511e+03, 9.96590658e+03, 9.96600175e+03])\n array([6.36790067e+00, 6.63920153e+00, 6.68446834e+00, ...,\n       9.96594315e+03, 9.96597358e+03, 9.96601328e+03])\n array([4.78769568e+00, 9.34571007e+00, 9.36434347e+00, ...,\n       9.95723039e+03, 9.96069983e+03, 9.96217470e+03])\n array([ 218.20156954,  252.33764399,  291.82113533, ..., 9948.2825591 ,\n       9948.43565958, 9959.26526044])\n array([3.80532591e+00, 3.85142606e+00, 3.88169282e+00, ...,\n       9.96577598e+03, 9.96578718e+03, 9.96595538e+03])\n array([3.78992586e+00, 3.79822589e+00, 3.81692595e+00, ...,\n       9.96553438e+03, 9.96569311e+03, 9.96611602e+03])\n array([3.92132628e+00, 3.94965970e+00, 3.95265971e+00, ...,\n       9.96477301e+03, 9.96477891e+03, 9.96478341e+03])\n array([4.37326104e+00, 4.39946112e+00, 4.44372793e+00, ...,\n       9.96591425e+03, 9.96597635e+03, 9.96610338e+03])\n array([3.78229251e+00, 3.80542591e+00, 3.89705954e+00, ...,\n       9.96589961e+03, 9.96597198e+03, 9.96600392e+03])\n array([4.90649606e+00, 5.54309807e+00, 5.54903142e+00, ...,\n       9.96497871e+03, 9.96498498e+03, 9.96498898e+03])\n array([4.08446013e+00, 4.28436076e+00, 4.56916166e+00, ...,\n       9.95444255e+03, 9.95445288e+03, 9.96402908e+03])\n array([3.79239254e+00, 3.88719284e+00, 3.93562632e+00, ...,\n       9.96470121e+03, 9.96591868e+03, 9.96600628e+03])\n array([3.77915916e+00, 3.80575925e+00, 3.87589280e+00, ...,\n       9.96586888e+03, 9.96595741e+03, 9.96597745e+03])\n array([3.80662592e+00, 3.86799278e+00, 3.87102612e+00, ...,\n       9.96588798e+03, 9.96613138e+03, 9.96614025e+03])\n array([3.98132647e+00, 2.40069897e+01, 6.38586822e+01, ...,\n       9.96003060e+03, 9.96049936e+03, 9.96147940e+03])\n array([5.68739852e+00, 8.40987379e+00, 1.28550545e+01, ...,\n       9.96474548e+03, 9.96475364e+03, 9.96550901e+03])\n array([3.96652642e+00, 3.99929319e+00, 4.94252950e+00, ...,\n       9.96524451e+03, 9.96585645e+03, 9.96599372e+03])\n array([  27.19019975,   27.19753311,   33.8781542 , ..., 9962.83407171,\n       9962.88423854, 9964.2771096 ])\n array([3.90342622e+00, 3.91005958e+00, 3.94445969e+00, ...,\n       9.96147973e+03, 9.96290944e+03, 9.96291421e+03])\n array([3.79685922e+00, 3.80815926e+00, 3.82595931e+00, ...,\n       9.96282164e+03, 9.96283927e+03, 9.96472811e+03])\n array([3.80285924e+00, 3.80765925e+00, 3.81319260e+00, ...,\n       9.96475704e+03, 9.96477274e+03, 9.96598318e+03])\n array([ 116.64471554,  129.51535618,  130.46552584, ..., 9916.40269177,\n       9932.95681071, 9952.41500548])\n array([3.79039253e+00, 3.81729262e+00, 3.85929275e+00, ...,\n       9.96592385e+03, 9.96596628e+03, 9.96601182e+03])\n array([3.97992646e+00, 3.98702649e+00, 3.99619318e+00, ...,\n       9.96564318e+03, 9.96566138e+03, 9.96568781e+03])\n array([ 474.70277945,  527.83571388,  589.0285071 , ..., 9953.26227482,\n       9955.60358221, 9961.47800076])\n array([3.79049253e+00, 3.80292591e+00, 3.82585931e+00, ...,\n       9.96595108e+03, 9.96596481e+03, 9.96598441e+03])\n array([3.78015917e+00, 3.78459251e+00, 3.79539255e+00, ...,\n       9.95043983e+03, 9.95046277e+03, 9.96499545e+03])\n array([4.32316088e+00, 4.71712879e+00, 4.99282966e+00, ...,\n       9.96614098e+03, 9.96617778e+03, 9.96619895e+03])\n array([4.39549444e+00, 6.35643397e+00, 6.83430214e+00, ...,\n       9.96565685e+03, 9.96569961e+03, 9.96608802e+03])\n array([4.25819401e+00, 1.01508459e+01, 1.01540793e+01, ...,\n       9.96595031e+03, 9.96596545e+03, 9.96609185e+03])\n array([  38.71593614,   53.62304988,   71.81904067, ..., 9966.19158231,\n       9966.19634899, 9966.20464902])\n array([3.80172590e+00, 4.25359400e+00, 4.28259409e+00, ...,\n       9.96589788e+03, 9.96592321e+03, 9.96605692e+03])\n array([ 220.14687568,  303.1920379 ,  319.41065578, ..., 9965.00977858,\n       9965.18821248, 9965.59024708])\n array([3.95625972e+00, 8.73377481e+00, 9.89894515e+00, ...,\n       9.96053383e+03, 9.96150987e+03, 9.96229630e+03])\n array([3.78069250e+00, 3.79109253e+00, 4.18502711e+00, ...,\n       9.95409618e+03, 9.95994503e+03, 9.96493855e+03])\n array([3.79512588e+00, 3.80505925e+00, 3.97329311e+00, ...,\n       9.95954503e+03, 9.96165487e+03, 9.96265660e+03])\n array([3.81399261e+00, 3.86432610e+00, 3.93079298e+00, ...,\n       9.96386031e+03, 9.96422381e+03, 9.96591608e+03])\n array([7.19110327e+00, 7.98439327e+01, 7.98494327e+01, ...,\n       9.96123863e+03, 9.96148720e+03, 9.96149113e+03])\n array([7.46080412e+00, 1.35013232e+01, 2.17861827e+01, ...,\n       9.95140414e+03, 9.95595832e+03, 9.96102350e+03])\n array([3.79612588e+00, 3.94075967e+00, 4.20039383e+00, ...,\n       9.96336224e+03, 9.96382531e+03, 9.96383051e+03])\n array([3.81692595e+00, 3.89835954e+00, 3.95965973e+00, ...,\n       9.92681666e+03, 9.96476928e+03, 9.96477938e+03])\n array([3.97005977e+00, 4.01802658e+00, 4.55486161e+00, ...,\n       9.96536741e+03, 9.96575625e+03, 9.96602502e+03])\n array([3.79725922e+00, 3.80372591e+00, 3.92089294e+00, ...,\n       9.96470534e+03, 9.96471168e+03, 9.96620768e+03])\n array([3.79215920e+00, 4.05796004e+00, 4.07899344e+00, ...,\n       9.96616478e+03, 9.96618545e+03, 9.96619888e+03])\n array([4.82946248e+00, 8.73220814e+00, 1.84917390e+01, ...,\n       9.96528988e+03, 9.96529548e+03, 9.96595485e+03])\n array([3.87162612e+00, 3.90869291e+00, 3.95305971e+00, ...,\n       9.96599888e+03, 9.96602212e+03, 9.96616668e+03])\n array([4.38916109e+00, 4.41572784e+00, 4.49076141e+00, ...,\n       9.95999216e+03, 9.96254160e+03, 9.96276917e+03])\n array([  94.92631363,   94.93004697,   94.93468032, ..., 9964.9519784 ,\n       9965.03464533, 9966.20471569])\n array([  12.82508773,   13.94345792,   15.26402876, ..., 9963.65767431,\n       9965.14927902, 9965.90064806])\n array([4.26396069e+00, 4.28809410e+00, 4.51659483e+00, ...,\n       9.96461538e+03, 9.96470771e+03, 9.96473921e+03])\n array([3.78862586e+00, 3.82445931e+00, 4.03799331e+00, ...,\n       9.96184317e+03, 9.96192824e+03, 9.96601538e+03])\n array([  43.46691781,   43.47091782,  129.41832254, ..., 9965.7853477 ,\n       9965.95768157, 9966.16944891])\n array([3.86672611e+00, 3.87129279e+00, 5.45233111e+00, ...,\n       9.96598455e+03, 9.96599365e+03, 9.96599905e+03])\n array([6.83726882e+00, 6.84200217e+00, 8.71440808e+00, ...,\n       9.96616632e+03, 9.96617962e+03, 9.96620192e+03])\n array([6.82950213e+00, 6.83330214e+00, 2.16985157e+01, ...,\n       9.96599425e+03, 9.96599752e+03, 9.96617348e+03])\n array([3.83815935e+00, 4.07776011e+00, 4.29679413e+00, ...,\n       9.96387884e+03, 9.96424771e+03, 9.96427468e+03])\n array([4.82966248e+00, 4.96619625e+00, 5.09062997e+00, ...,\n       9.96436908e+03, 9.96451228e+03, 9.96595481e+03])\n array([5.36276416e+00, 5.36813085e+00, 5.37189753e+00, ...,\n       9.96478268e+03, 9.96514381e+03, 9.96546475e+03])\n array([4.01465991e+00, 4.42189453e+00, 5.37543087e+00, ...,\n       9.96584168e+03, 9.96590601e+03, 9.96595201e+03])\n array([3.87299279e+00, 4.15892703e+00, 4.54092824e+00, ...,\n       9.96556255e+03, 9.96570058e+03, 9.96581225e+03])\n array([3.96759309e+00, 4.10039351e+00, 4.28829410e+00, ...,\n       9.96528478e+03, 9.96542661e+03, 9.96562611e+03])\n array([3.97325978e+00, 4.44472793e+00, 4.86339592e+00, ...,\n       9.96275727e+03, 9.96278580e+03, 9.96514318e+03])\n array([3.85702608e+00, 4.06849341e+00, 4.38462774e+00, ...,\n       9.96189600e+03, 9.96190300e+03, 9.96296467e+03])\n array([3.87522613e+00, 3.90102622e+00, 3.95759306e+00, ...,\n       9.96604362e+03, 9.96606975e+03, 9.96610078e+03])\n array([ 500.16225983,  505.32937615,  510.39865882, ..., 9965.01014525,\n       9965.31047953, 9966.14724884])\n array([5.20793034e+00, 6.06263304e+00, 6.38186738e+00, ...,\n       9.96560908e+03, 9.96570901e+03, 9.96598145e+03])\n array([4.29089411e+00, 4.59886175e+00, 4.86269592e+00, ...,\n       9.96573001e+03, 9.96588265e+03, 9.96617315e+03])\n array([3.98422648e+00, 4.35872766e+00, 4.53746156e+00, ...,\n       9.96508735e+03, 9.96527408e+03, 9.96535578e+03])\n array([3.78842586e+00, 3.84695938e+00, 4.20959386e+00, ...,\n       9.96566825e+03, 9.96582928e+03, 9.96597831e+03])\n array([3.78145917e+00, 3.94239301e+00, 3.99162650e+00, ...,\n       9.96573628e+03, 9.96609822e+03, 9.96617785e+03])\n array([ 185.57729986,  323.54536883,  338.56908294, ..., 9954.88577995,\n       9955.08078056, 9966.15838221])\n array([9.68654448e+00, 1.15021169e+01, 1.77297365e+01, ...,\n       9.96597895e+03, 9.96610738e+03, 9.96617095e+03])\n array([3.91535959e+00, 4.19492714e+00, 4.35499432e+00, ...,\n       9.96479568e+03, 9.96491488e+03, 9.96537425e+03])\n array([6.30653381e+00, 6.40203411e+00, 6.53126785e+00, ...,\n       9.96600888e+03, 9.96607928e+03, 9.96615915e+03])\n array([3.96265974e+00, 4.45389463e+00, 4.64332856e+00, ...,\n       9.96349807e+03, 9.96593001e+03, 9.96620188e+03])\n array([  11.38438318,   11.40088323,   11.41431661, ..., 9964.97771181,\n       9965.12177893, 9965.28831279])\n array([7.22283670e+00, 1.13640831e+01, 1.13684165e+01, ...,\n       9.96231634e+03, 9.96289407e+03, 9.96295284e+03])\n array([  11.35508308,   11.37741649,  583.71309031, ..., 9962.39123698,\n       9962.68940459, 9962.9457054 ])\n array([  11.44648337,   21.28431444,   53.31501557, ..., 9965.56688034,\n       9965.71804748, 9965.8090811 ])\n array([4.90639606e+00, 5.08969664e+00, 6.42286751e+00, ...,\n       9.96591761e+03, 9.96592768e+03, 9.96594221e+03])\n array([4.29116078e+00, 1.13034163e+01, 1.14490500e+01, ...,\n       9.87363626e+03, 9.87556486e+03, 9.87560150e+03])\n array([5.24129711e+00, 5.72546531e+00, 6.34736727e+00, ...,\n       9.96587241e+03, 9.96605808e+03, 9.96608352e+03])\n array([  69.81010099,  114.85620989,  119.71882525, ..., 9965.33871295,\n       9965.39951314, 9966.17658226])\n array([3.79639255e+00, 3.80675925e+00, 3.85489274e+00, ...,\n       9.96615775e+03, 9.96616228e+03, 9.96619638e+03])\n array([8.93160877e+00, 1.13779498e+01, 1.13903499e+01, ...,\n       9.96593505e+03, 9.96609775e+03, 9.96621312e+03])\n array([3.78452585e+00, 3.79919256e+00, 3.81859262e+00, ...,\n       9.96603472e+03, 9.96611758e+03, 9.96617082e+03])\n array([3.78805919e+00, 3.82932599e+00, 3.86099276e+00, ...,\n       9.96572711e+03, 9.96584178e+03, 9.96607275e+03])\n array([3.93532632e+00, 4.02675995e+00, 4.25099399e+00, ...,\n       9.96615565e+03, 9.96619335e+03, 9.96621222e+03])\n array([3.80342591e+00, 3.91352625e+00, 4.00219320e+00, ...,\n       9.96575598e+03, 9.96585748e+03, 9.96588531e+03])\n array([3.91329292e+00, 3.99422651e+00, 4.03822665e+00, ...,\n       9.96608462e+03, 9.96614052e+03, 9.96621378e+03])\n array([7.06143619e+00, 7.17326988e+00, 2.81634695e+01, ...,\n       9.96575125e+03, 9.96589601e+03, 9.96590218e+03])\n array([3.85389273e+00, 3.92485962e+00, 3.95672639e+00, ...,\n       9.96607378e+03, 9.96612068e+03, 9.96613725e+03])\n array([3.79779256e+00, 3.94332635e+00, 4.08292679e+00, ...,\n       9.96585888e+03, 9.96608328e+03, 9.96614712e+03])\n array([  86.08605238,   86.19271939,  109.68996025, ..., 9965.97148162,\n       9966.12004875, 9966.19298232])\n array([3.82102596e+00, 4.34649429e+00, 5.69103187e+00, ...,\n       9.96329417e+03, 9.96336521e+03, 9.96348751e+03])\n array([  29.72604109,   85.80568483,   88.57956026, ..., 9965.12841229,\n       9965.2178459 , 9965.39091312])\n array([4.26019402e+00, 4.84446253e+00, 5.04906317e+00, ...,\n       9.96561585e+03, 9.96564705e+03, 9.96574681e+03])\n array([3.87565947e+00, 3.95202638e+00, 3.98745982e+00, ...,\n       9.96594961e+03, 9.96598348e+03, 9.96600632e+03])\n array([7.10436448e+00, 7.39789797e+00, 8.57829858e+00, ...,\n       9.94993896e+03, 9.94998592e+03, 9.95000582e+03])\n array([6.96316440e+00, 1.84782371e+01, 3.10699104e+01, ...,\n       9.94966219e+03, 9.94970512e+03, 9.94992786e+03])\n array([  86.28567262,   95.85264429,  265.64599989, ..., 9931.69584799,\n       9934.73388281, 9944.01638734])\n array([5.61683037e+00, 6.33173074e+00, 6.33189741e+00, ...,\n       9.93963469e+03, 9.94281559e+03, 9.94389962e+03])\n array([7.62129808e+00, 7.83353153e+00, 8.07423165e+00, ...,\n       9.94946836e+03, 9.94962912e+03, 9.94998649e+03])\n array([5.60506369e+00, 7.29999791e+00, 8.37323181e+00, ...,\n       9.94961752e+03, 9.94982009e+03, 9.94990072e+03])\n array([4.33739636e+00, 5.85633049e+00, 6.16916399e+00, ...,\n       9.94962682e+03, 9.94984776e+03, 9.94997599e+03])\n array([6.35133075e+00, 6.47663082e+00, 6.51453084e+00, ...,\n       9.94986949e+03, 9.94993736e+03, 9.94995636e+03])\n array([6.08156394e+00, 6.08439728e+00, 6.08809728e+00, ...,\n       9.94969029e+03, 9.94974042e+03, 9.94992412e+03])\n array([5.70323041e+00, 5.70576375e+00, 5.70973042e+00, ...,\n       9.94984969e+03, 9.94991226e+03, 9.94999732e+03])\n array([5.70659708e+00, 6.57053087e+00, 6.73279762e+00, ...,\n       9.94950242e+03, 9.94958032e+03, 9.94963606e+03])\n array([  39.42294807,   50.52682055,   50.56272057, ..., 9947.82665587,\n       9949.02575646, 9949.03602313])\n array([3.96319617e+00, 4.03266287e+00, 5.70076374e+00, ...,\n       9.94965349e+03, 9.94969992e+03, 9.94989576e+03])\n array([4.01846286e+00, 4.09622957e+00, 4.82962995e+00, ...,\n       9.94994926e+03, 9.94999132e+03, 9.95002159e+03])\n array([3.79516275e+00, 4.01916286e+00, 4.09066290e+00, ...,\n       9.94989832e+03, 9.94994862e+03, 9.94999899e+03])\n array([3.80712942e+00, 6.87099769e+00, 1.40855681e+01, ...,\n       9.94828662e+03, 9.94949616e+03, 9.94951489e+03])\n array([3.78926274e+00, 3.86982945e+00, 3.87806279e+00, ...,\n       9.94984826e+03, 9.94985189e+03, 9.94985842e+03])\n array([3.95512950e+00, 3.99842952e+00, 4.03819621e+00, ...,\n       9.94988822e+03, 9.94993332e+03, 9.94999682e+03])\n array([3.84222944e+00, 3.86932945e+00, 3.87332945e+00, ...,\n       9.94999019e+03, 9.94999932e+03, 9.95001892e+03])\n array([  44.58008411,  113.95062044,  122.24902478, ..., 9949.71669013,\n       9949.8677902 , 9949.95889025])\n array([3.79666275e+00, 3.81192942e+00, 4.02872953e+00, ...,\n       9.94992749e+03, 9.94995866e+03, 9.95001232e+03])\n array([7.64739810e+00, 1.41594015e+01, 1.41714682e+01, ...,\n       9.94906119e+03, 9.94930382e+03, 9.94973016e+03])\n array([4.03182954e+00, 4.46816310e+00, 5.67066373e+00, ...,\n       9.94985376e+03, 9.94987352e+03, 9.95000086e+03])\n array([6.67923092e+00, 6.71046427e+00, 7.57753139e+00, ...,\n       9.94988549e+03, 9.94998709e+03, 9.95002529e+03])\n array([3.84532944e+00, 4.05172955e+00, 4.07389623e+00, ...,\n       9.95000562e+03, 9.95001112e+03, 9.95002749e+03])\n array([4.66609654e+00, 5.71006375e+00, 6.18116400e+00, ...,\n       9.94985252e+03, 9.94992719e+03, 9.94995289e+03])\n array([5.30193020e+00, 5.87503050e+00, 6.33339741e+00, ...,\n       9.94987132e+03, 9.94996759e+03, 9.95000026e+03])\n array([3.86142945e+00, 4.00179619e+00, 4.01242953e+00, ...,\n       9.94990839e+03, 9.94998249e+03, 9.95001329e+03])\n array([4.13716292e+00, 6.33299741e+00, 9.69186583e+00, ...,\n       9.94952362e+03, 9.94952789e+03, 9.94989706e+03])\n array([4.49166311e+00, 7.86589821e+00, 7.93156491e+00, ...,\n       9.94952619e+03, 9.94953792e+03, 9.94999669e+03])\n array([3.79226274e+00, 3.85399611e+00, 3.89436280e+00, ...,\n       9.94996306e+03, 9.95001052e+03, 9.95001766e+03])\n array([3.96442950e+00, 6.33183074e+00, 6.33286407e+00, ...,\n       9.94989292e+03, 9.94989852e+03, 9.94992436e+03])\n array([3.89512946e+00, 4.25199632e+00, 4.40346306e+00, ...,\n       9.94999536e+03, 9.95000096e+03, 9.95000759e+03])\n array([4.42642974e+00, 4.62996318e+00, 4.64766319e+00, ...,\n       9.94985596e+03, 9.94990672e+03, 9.94997426e+03])\n array([4.67436321e+00, 6.84586434e+00, 8.99506547e+00, ...,\n       9.95001289e+03, 9.95002709e+03, 9.95002932e+03])\n array([3.80319608e+00, 3.81082942e+00, 3.82412943e+00, ...,\n       9.94986096e+03, 9.94991966e+03, 9.94992699e+03])\n array([4.12822959e+00, 4.78029660e+00, 4.78322993e+00, ...,\n       9.94977609e+03, 9.94983516e+03, 9.94996259e+03])\n array([3.85096277e+00, 4.42519641e+00, 5.37733024e+00, ...,\n       9.94990776e+03, 9.94991639e+03, 9.95001872e+03])\n array([3.79376275e+00, 3.94809616e+00, 4.17412961e+00, ...,\n       9.95001689e+03, 9.95001929e+03, 9.95002972e+03])\n array([4.05599622e+00, 5.43686361e+00, 6.48793082e+00, ...,\n       9.94967669e+03, 9.94978919e+03, 9.94990376e+03])\n array([3.79392941e+00, 4.15556293e+00, 4.16589627e+00, ...,\n       9.94997282e+03, 9.94998416e+03, 9.95000662e+03])\n array([4.11142958e+00, 4.47829644e+00, 4.66566320e+00, ...,\n       9.94992192e+03, 9.94994769e+03, 9.95000212e+03])\n array([4.13426292e+00, 4.29869634e+00, 4.31222968e+00, ...,\n       9.94463179e+03, 9.94613249e+03, 9.94618869e+03])\n array([7.32226459e+00, 7.46759800e+00, 7.97546494e+00, ...,\n       9.94942722e+03, 9.94952172e+03, 9.94982526e+03])\n array([3.85189611e+00, 4.06426289e+00, 4.25369632e+00, ...,\n       9.94984146e+03, 9.94990426e+03, 9.94997666e+03])\n array([5.62449704e+00, 5.89156384e+00, 6.30296406e+00, ...,\n       9.94965429e+03, 9.94968029e+03, 9.94990099e+03])\n array([6.36609743e+00, 8.77074067e+01, 1.11637519e+02, ...,\n       9.94521032e+03, 9.94747746e+03, 9.94777992e+03])\n array([ 271.78556977,  283.98144282,  297.9369168 , ..., 9949.52422337,\n       9949.61985675, 9949.96352358])\n array([5.03696340e+00, 7.06766446e+00, 7.12529782e+00, ...,\n       9.94983186e+03, 9.94994556e+03, 9.95002019e+03])\n array([4.98546337e+00, 6.33303074e+00, 6.39883078e+00, ...,\n       9.94982659e+03, 9.94990356e+03, 9.94994289e+03])\n array([3.91239614e+00, 3.91572948e+00, 3.91932948e+00, ...,\n       9.94994199e+03, 9.94997476e+03, 9.95000926e+03])\n array([6.01583058e+00, 6.33266407e+00, 6.33489741e+00, ...,\n       9.94976229e+03, 9.94991856e+03, 9.95002602e+03])\n array([3.85996278e+00, 4.12686292e+00, 4.18589628e+00, ...,\n       9.94987406e+03, 9.94994746e+03, 9.95001896e+03])\n array([5.82993048e+00, 6.14479731e+00, 6.15493065e+00, ...,\n       9.94981516e+03, 9.94987799e+03, 9.94994996e+03])\n array([8.11396501e+00, 8.20406505e+00, 1.34791345e+01, ...,\n       9.94995696e+03, 9.95000222e+03, 9.95002496e+03])\n array([  10.18816609,   21.10950515,   21.39303863, ..., 9949.83635685,\n       9949.90659022, 9950.02149028])\n array([  12.91703419,   13.90680137,   14.00113476, ..., 9949.88165688,\n       9949.90529022, 9949.97902359])\n array([7.16376451e+00, 1.60680358e+01, 1.76509033e+01, ...,\n       9.94938296e+03, 9.94994099e+03, 9.94996132e+03])\n array([8.41089850e+00, 1.06554997e+01, 1.07594331e+01, ...,\n       9.94956929e+03, 9.94960256e+03, 9.94961172e+03])\n array([3.81102942e+00, 3.89542946e+00, 3.94142949e+00, ...,\n       9.95000766e+03, 9.95001326e+03, 9.95002309e+03])\n array([4.02232953e+00, 6.44136413e+00, 8.80969871e+00, ...,\n       9.94957712e+03, 9.94962289e+03, 9.94995966e+03])\n array([ 112.81931985,  265.22536633,  444.75762703, ..., 9950.00395694,\n       9950.01242361, 9950.01559028])\n array([4.05552955e+00, 5.90353052e+00, 6.09216395e+00, ...,\n       9.94894526e+03, 9.94895746e+03, 9.94935659e+03])\n array([3.82649610e+00, 3.92326281e+00, 3.95926283e+00, ...,\n       9.94986806e+03, 9.94988032e+03, 9.94997816e+03])\n array([4.17779628e+00, 4.86452997e+00, 5.61416370e+00, ...,\n       9.95001006e+03, 9.95001859e+03, 9.95002272e+03])\n array([3.83019610e+00, 3.96822950e+00, 4.31206302e+00, ...,\n       9.94962759e+03, 9.94980899e+03, 9.94992642e+03])\n array([3.85276278e+00, 4.70082989e+00, 5.14773012e+00, ...,\n       9.94961456e+03, 9.94978439e+03, 9.94991849e+03])\n array([  13.01843424,   13.03850092,   14.38746829, ..., 9949.92442356,\n       9949.92912357, 9949.96645692])\n array([  13.85880135,   15.53116889,   23.69157317, ..., 9949.92842357,\n       9949.93682357, 9949.94719024])\n array([4.03986287e+00, 4.20076296e+00, 4.22589630e+00, ...,\n       9.94994632e+03, 9.94996739e+03, 9.94997252e+03])\n array([3.82442943e+00, 3.89806280e+00, 3.93802949e+00, ...,\n       9.94989522e+03, 9.94991452e+03, 9.94994282e+03])\n array([8.56596524e+00, 1.13342667e+01, 1.14372667e+01, ...,\n       9.94998842e+03, 9.94999142e+03, 9.95002832e+03])\n array([3.91699614e+00, 3.98499618e+00, 4.00792952e+00, ...,\n       9.90489497e+03, 9.90501270e+03, 9.90506470e+03])\n array([3.80049608e+00, 3.81972943e+00, 3.87566279e+00, ...,\n       9.94963036e+03, 9.94973299e+03, 9.94989716e+03])\n array([3.81869609e+00, 3.96446283e+00, 4.14869626e+00, ...,\n       9.94977802e+03, 9.94990329e+03, 9.95002162e+03])\n array([6.50939750e+00, 8.07856499e+00, 1.13854334e+01, ...,\n       9.94992446e+03, 9.94998736e+03, 9.95001562e+03])\n array([3.82819610e+00, 4.06136289e+00, 4.14679626e+00, ...,\n       9.94978649e+03, 9.94981422e+03, 9.94990486e+03])\n array([  13.07956761,   13.17543433,   14.43883499, ..., 9949.93569024,\n       9949.97935692, 9950.01169027])\n array([3.93659615e+00, 4.29889634e+00, 4.53652980e+00, ...,\n       9.94956726e+03, 9.94965322e+03, 9.95000716e+03])\n array([6.00433057e+00, 9.36396566e+00, 1.19276337e+01, ...,\n       9.94882969e+03, 9.94929912e+03, 9.94985929e+03])\n array([3.78109607e+00, 3.84009610e+00, 3.91189614e+00, ...,\n       9.94986682e+03, 9.94992252e+03, 9.94998572e+03])\n array([6.75453096e+00, 1.13449667e+01, 1.46555018e+01, ...,\n       9.94867152e+03, 9.94872306e+03, 9.94932346e+03])\n array([4.06106289e+00, 4.16909627e+00, 5.79476379e+00, ...,\n       9.94985256e+03, 9.94994886e+03, 9.94998326e+03])\n array([4.91909667e+00, 5.03213006e+00, 5.30366354e+00, ...,\n       9.94937832e+03, 9.94938846e+03, 9.94952606e+03])\n array([4.10249624e+00, 4.15762960e+00, 4.21882963e+00, ...,\n       9.94991789e+03, 9.94993349e+03, 9.94997336e+03])\n array([3.98126284e+00, 4.00849619e+00, 4.25212965e+00, ...,\n       9.94993846e+03, 9.95000892e+03, 9.95002239e+03])\n array([5.53469699e+00, 5.69723041e+00, 5.69953041e+00, ...,\n       9.94973602e+03, 9.94994572e+03, 9.95000872e+03])\n array([3.79286274e+00, 3.86596278e+00, 4.10962958e+00, ...,\n       9.94986462e+03, 9.94999622e+03, 9.95002519e+03])\n array([  12.79486746,   14.7183018 ,   15.74713567, ..., 9918.78290834,\n       9924.58751118, 9937.68998425])\n array([4.12532959e+00, 4.70182989e+00, 4.70639656e+00, ...,\n       9.94983236e+03, 9.94987232e+03, 9.94996172e+03])\n array([  25.00460719,   57.42309083,   63.14892716, ..., 9914.32097283,\n       9922.91361036, 9942.21538646])\n array([4.10226291e+00, 4.26049632e+00, 4.26429632e+00, ...,\n       9.94979182e+03, 9.94986952e+03, 9.94988746e+03])\n array([3.80822942e+00, 3.84112944e+00, 4.01549619e+00, ...,\n       9.94985882e+03, 9.94991042e+03, 9.95002072e+03])\n array([4.21999630e+00, 5.29986353e+00, 5.66503039e+00, ...,\n       9.94809479e+03, 9.94855616e+03, 9.94973512e+03])\n array([  22.79290603,   32.84004462,   41.49168249, ..., 9949.93392357,\n       9949.95655691, 9949.97752359])\n array([3.78462941e+00, 4.56572982e+00, 5.73926376e+00, ...,\n       9.94982949e+03, 9.94994826e+03, 9.95002049e+03])\n array([3.80762942e+00, 3.84446277e+00, 3.85009611e+00, ...,\n       9.95000132e+03, 9.95001162e+03, 9.95002836e+03])\n array([5.19486348e+00, 5.64496371e+00, 8.50119854e+00, ...,\n       9.94955629e+03, 9.94980802e+03, 9.94994346e+03])\n array([3.78472941e+00, 3.87456279e+00, 3.96812950e+00, ...,\n       9.94973556e+03, 9.95000059e+03, 9.95001976e+03])\n array([4.48916311e+00, 5.59916369e+00, 5.60176369e+00, ...,\n       9.94987349e+03, 9.94990716e+03, 9.94998782e+03])\n array([3.79869608e+00, 3.80416275e+00, 3.84539611e+00, ...,\n       9.94928109e+03, 9.94947129e+03, 9.94993302e+03])\n array([  29.31717611,   30.81861023,   30.92277695, ..., 9948.76125633,\n       9949.35715662, 9949.74069014])\n array([4.07382956e+00, 4.10496291e+00, 4.18589628e+00, ...,\n       9.94972626e+03, 9.94977432e+03, 9.94990499e+03])\n array([4.77842993e+00, 6.73233095e+00, 7.10776448e+00, ...,\n       9.94931079e+03, 9.94966826e+03, 9.94990799e+03])\n array([  15.80286903,  102.11888091,  106.95361677, ..., 9924.5681445 ,\n       9936.72851711, 9942.2964865 ])\n array([3.93386282e+00, 5.70026374e+00, 5.70293041e+00, ...,\n       9.94980632e+03, 9.94985249e+03, 9.94999112e+03])\n array([4.36602971e+00, 4.72856323e+00, 5.63736371e+00, ...,\n       9.94676012e+03, 9.94845582e+03, 9.94881369e+03])\n array([3.82059609e+00, 6.45626414e+00, 6.59173088e+00, ...,\n       9.94988892e+03, 9.94996012e+03, 9.95000339e+03])\n array([4.12102958e+00, 4.13296292e+00, 4.58652983e+00, ...,\n       9.94982456e+03, 9.94994609e+03, 9.94999759e+03])\n array([  15.94890244,   19.26303751,   21.6490721 , ..., 9949.75919015,\n       9949.79865684, 9950.01389027])\n array([5.88709717e+00, 6.71999761e+00, 1.02759661e+01, ...,\n       9.94949482e+03, 9.94953402e+03, 9.94970959e+03])\n array([3.77856274e+00, 3.85026277e+00, 3.95189616e+00, ...,\n       9.94994549e+03, 9.94996429e+03, 9.94997229e+03])\n array([5.58999702e+00, 5.88403051e+00, 7.01923110e+00, ...,\n       9.94993426e+03, 9.94995032e+03, 9.94998146e+03])\n array([3.85639611e+00, 4.07066289e+00, 4.64166319e+00, ...,\n       9.94721422e+03, 9.94864376e+03, 9.94928652e+03])\n array([4.50759645e+00, 4.85616330e+00, 5.47729696e+00, ...,\n       9.92827655e+03, 9.93227631e+03, 9.94684329e+03])\n array([5.95709721e+00, 7.02499777e+00, 9.15599889e+00, ...,\n       9.94944172e+03, 9.94950839e+03, 9.94997669e+03])\n array([ 322.8923632 ,  322.8984632 ,  379.38049279, ..., 9941.33241936,\n       9945.4301547 , 9948.85902304])\n array([9.70656584e+00, 1.10820999e+01, 1.10863999e+01, ...,\n       9.94961459e+03, 9.94980109e+03, 9.94982179e+03])\n array([3.79546275e+00, 3.82112943e+00, 3.84589611e+00, ...,\n       9.94978136e+03, 9.94985286e+03, 9.94988739e+03])\n array([4.14752960e+00, 4.16086294e+00, 4.17059628e+00, ...,\n       9.94990126e+03, 9.94996156e+03, 9.95000716e+03])\n array([5.12053011e+00, 6.78786431e+00, 7.44553132e+00, ...,\n       9.94893542e+03, 9.94902842e+03, 9.94908052e+03])\n array([3.81476276e+00, 3.84216277e+00, 3.90842947e+00, ...,\n       9.94995282e+03, 9.95000502e+03, 9.95002929e+03])\n array([3.87556279e+00, 3.95919617e+00, 3.98986285e+00, ...,\n       9.94978792e+03, 9.94983312e+03, 9.94986379e+03])\n array([3.79642941e+00, 3.93266282e+00, 3.94539616e+00, ...,\n       9.94569265e+03, 9.94602409e+03, 9.94618309e+03])\n array([8.68546531e+00, 8.70269865e+00, 7.68926677e+01, ...,\n       9.94972069e+03, 9.94983536e+03, 9.94984559e+03])\n array([4.65472986e+00, 8.73186533e+00, 9.40106568e+00, ...,\n       9.94927412e+03, 9.94946429e+03, 9.94946842e+03])\n array([3.78002940e+00, 3.78582941e+00, 3.84332944e+00, ...,\n       9.94929492e+03, 9.94950326e+03, 9.94950739e+03])\n array([8.74423200e+00, 9.70439917e+00, 1.12658333e+01, ...,\n       9.94736542e+03, 9.94819642e+03, 9.94898262e+03])\n array([  44.14955055,   45.17268442,   74.48989977, ..., 9950.00749027,\n       9950.01282361, 9950.02579028])\n array([3.84719611e+00, 4.20786296e+00, 4.24372965e+00, ...,\n       9.94757656e+03, 9.94786776e+03, 9.94787936e+03])\n array([8.69013198e+00, 1.78199701e+01, 3.30413447e+01, ...,\n       9.94999706e+03, 9.95000306e+03, 9.95002732e+03])\n array([4.15992960e+00, 4.71162989e+00, 5.08843009e+00, ...,\n       9.94942822e+03, 9.94959572e+03, 9.94996842e+03])\n array([3.87892946e+00, 3.88276279e+00, 3.88856279e+00, ...,\n       9.94964956e+03, 9.94965452e+03, 9.94987609e+03])\n array([3.82752943e+00, 3.90676280e+00, 3.96096283e+00, ...,\n       9.94955956e+03, 9.94967922e+03, 9.94969182e+03])\n array([3.82069609e+00, 3.82539609e+00, 3.85326278e+00, ...,\n       9.94994662e+03, 9.94995029e+03, 9.94995809e+03])\n array([3.95502950e+00, 4.28766300e+00, 4.29252967e+00, ...,\n       9.94949606e+03, 9.94961286e+03, 9.94984386e+03])\n array([ 270.35840235,  270.36606903,  270.41640238, ..., 9949.61312341,\n       9949.93965691, 9949.94529024])\n array([  14.30110158,   72.35189865,   80.9104698 , ..., 9949.85342353,\n       9949.86042353, 9949.87285687])\n array([4.41206307e+00, 5.08739676e+00, 5.09326343e+00, ...,\n       9.94958949e+03, 9.94963022e+03, 9.94986756e+03])\n array([3.82749610e+00, 4.91983000e+00, 5.12956344e+00, ...,\n       9.94964416e+03, 9.94966696e+03, 9.94987832e+03])\n array([3.91796281e+00, 4.22492964e+00, 4.41276307e+00, ...,\n       9.94986619e+03, 9.94997676e+03, 9.95001042e+03])\n array([3.81882942e+00, 3.85009611e+00, 4.01729620e+00, ...,\n       9.94992269e+03, 9.94993272e+03, 9.94996689e+03])\n array([  85.40800549,  240.07058649,  434.85928851, ..., 9949.34558995,\n       9949.39458997, 9949.52732337])\n array([  57.79892436,   58.40945802,  122.59799163, ..., 9948.90738973,\n       9948.92595641, 9948.96145643])\n array([6.84729768e+00, 9.25166560e+00, 9.64673248e+00, ...,\n       9.94787412e+03, 9.94816852e+03, 9.94862176e+03])\n array([6.46929748e+00, 1.14884334e+01, 1.16413669e+01, ...,\n       9.94984859e+03, 9.94986272e+03, 9.94999089e+03])\n array([3.78112941e+00, 3.88579613e+00, 3.95949617e+00, ...,\n       9.94969556e+03, 9.94993889e+03, 9.95002136e+03])\n array([3.97849618e+00, 4.03912954e+00, 4.29016301e+00, ...,\n       9.94980459e+03, 9.95001502e+03, 9.95002879e+03])\n array([  11.68503354,   11.73143357,   11.74566691, ..., 9949.34382328,\n       9949.36912329, 9949.54799005])\n array([  11.5333668 ,   21.83993886,   22.34447246, ..., 9948.30705611,\n       9948.58638958, 9949.05325647])\n array([  28.40190897,   37.04791349,   37.07321351, ..., 9949.69239012,\n       9949.82052351, 9949.8558902 ])\n array([4.12452958e+00, 4.19792962e+00, 4.27602966e+00, ...,\n       9.94924762e+03, 9.94941809e+03, 9.94967992e+03])\n array([6.48269749e+00, 6.59476421e+00, 6.85513102e+00, ...,\n       9.94951919e+03, 9.94958229e+03, 9.94978866e+03])\n array([  28.38284229,   28.44957566,   28.51044236, ..., 9947.38698899,\n       9947.56995575, 9947.6706558 ])\n array([4.48399644e+00, 4.89456332e+00, 5.92093053e+00, ...,\n       9.95000506e+03, 9.95001569e+03, 9.95002509e+03])\n array([6.60179755e+00, 6.61796422e+00, 6.63743090e+00, ...,\n       9.94948416e+03, 9.94966806e+03, 9.94978482e+03])\n array([4.22099630e+00, 4.25162965e+00, 4.32272969e+00, ...,\n       9.93659328e+03, 9.93702202e+03, 9.94412835e+03])\n array([6.41013078e+00, 1.14678001e+01, 1.15088668e+01, ...,\n       9.94960926e+03, 9.94967499e+03, 9.94996172e+03])\n array([  12.72590076,   28.42177564,   28.48437568, ..., 9926.81117893,\n       9929.86121376, 9930.09501387])\n array([4.16372961e+00, 4.16609627e+00, 4.30836301e+00, ...,\n       9.94793819e+03, 9.94857376e+03, 9.94935536e+03])\n array([  92.35940913,  355.77641376,  355.77894709, ..., 9944.06678737,\n       9944.11775406, 9946.1154217 ])\n array([  11.54703347,   11.61793351,   12.22653383, ..., 9940.99735253,\n       9942.17728644, 9943.12605357])\n array([3.97759617e+00, 4.09256290e+00, 4.18846295e+00, ...,\n       9.74174792e+03, 9.81201059e+03, 9.94889002e+03])\n array([  48.23925269,   84.65907176,   84.81833851, ..., 9949.28672325,\n       9949.3211566 , 9949.94885691])\n array([5.33369688e+00, 5.99539723e+00, 6.15803065e+00, ...,\n       9.94993522e+03, 9.94999542e+03, 9.95000739e+03])\n array([3.80529608e+00, 3.85939611e+00, 3.91692948e+00, ...,\n       9.94986166e+03, 9.94993716e+03, 9.95000062e+03])\n array([4.25716299e+00, 9.92509929e+00, 1.13748334e+01, ...,\n       9.94985349e+03, 9.94992606e+03, 9.95002656e+03])\n array([4.16286294e+00, 4.21989630e+00, 4.22729631e+00, ...,\n       9.94998492e+03, 9.94999372e+03, 9.95000526e+03])\n array([  11.40036673,   11.43073341,   11.43826675, ..., 9949.94872358,\n       9950.0056236 , 9950.01492361])\n array([3.86146278e+00, 3.90662947e+00, 3.97152950e+00, ...,\n       9.94976342e+03, 9.94986449e+03, 9.94996762e+03])\n array([3.80586275e+00, 3.92149615e+00, 4.05399621e+00, ...,\n       9.94949892e+03, 9.94967062e+03, 9.94996399e+03])\n array([3.95772950e+00, 4.38542972e+00, 4.52246313e+00, ...,\n       9.94951209e+03, 9.94976566e+03, 9.94997486e+03])\n array([3.83646277e+00, 3.93652949e+00, 4.04132954e+00, ...,\n       9.94961076e+03, 9.94972256e+03, 9.94979982e+03])\n array([4.37959639e+00, 5.54186366e+00, 6.38346410e+00, ...,\n       9.94991916e+03, 9.94995242e+03, 9.95001886e+03])\n array([9.82763257e+00, 4.96525201e+01, 6.30982938e+01, ...,\n       9.94862892e+03, 9.94869782e+03, 9.94965686e+03])\n array([3.82042943e+00, 3.88022946e+00, 3.90786280e+00, ...,\n       9.94999319e+03, 9.95001299e+03, 9.95002609e+03])\n array([3.94592949e+00, 4.08172956e+00, 5.35876356e+00, ...,\n       9.94987106e+03, 9.94998492e+03, 9.95001446e+03])\n array([4.52572980e+00, 4.53656313e+00, 5.52046365e+00, ...,\n       9.94838769e+03, 9.94875926e+03, 9.94878622e+03])\n array([3.83902944e+00, 3.92632948e+00, 4.10186291e+00, ...,\n       9.94807756e+03, 9.94824142e+03, 9.95002686e+03])\n array([4.27566300e+00, 6.76333097e+00, 6.83563100e+00, ...,\n       9.94981616e+03, 9.95001229e+03, 9.95002729e+03])\n array([4.48399644e+00, 5.56879701e+00, 6.53996418e+00, ...,\n       9.94843829e+03, 9.94851769e+03, 9.94869609e+03])\n array([  27.90357537,   31.37911053,   48.14778597, ..., 9948.39398948,\n       9948.41702283, 9948.61612292])\n array([9.74019919e+00, 1.47304685e+01, 1.60745025e+01, ...,\n       9.94934862e+03, 9.94941846e+03, 9.95002382e+03])\n array([  11.44983342,   33.47121162,   34.43504546, ..., 9949.68365678,\n       9949.76815682, 9950.02949028])\n array([  11.58103349,   18.91047066,   40.08548175, ..., 9949.40458998,\n       9949.57529006, 9949.77072349])\n array([ 202.52940016,  224.93487856,  250.70289206, ..., 9949.78239016,\n       9949.82859018, 9949.9254569 ])\n array([7.32786460e+00, 6.83396632e+01, 8.48498719e+01, ...,\n       9.94435012e+03, 9.94453365e+03, 9.94879852e+03])\n array([  48.29035272,   85.72310565,   90.29810805, ..., 9947.02488881,\n       9947.22922225, 9948.42072283])\n array([  28.33984227,   76.04700059,   85.31773878, ..., 9937.58595087,\n       9938.52988466, 9948.75858966])\n array([  11.38473339,   11.45443342,   31.75914406, ..., 9947.10148885,\n       9949.07698982, 9949.35452329])\n array([  48.34268608,   84.5940384 ,   84.60610507, ..., 9948.99238978,\n       9949.72762347, 9949.83002352])\n array([  11.44840009,   11.76886692,   34.14531197, ..., 9944.40698753,\n       9948.74888966, 9948.76888967])\n array([  28.32467559,   28.34244227,   28.39064229, ..., 9937.7979843 ,\n       9937.87651767, 9937.94215104])\n array([3.80781359e+00, 3.96244680e+00, 3.97091347e+00, ...,\n       9.96608104e+03, 9.96619138e+03, 9.96620341e+03])\n array([4.99211268e+00, 5.57417890e+00, 5.57541223e+00, ...,\n       9.91092139e+03, 9.93558007e+03, 9.93606793e+03])\n array([4.16407998e+00, 4.21191328e+00, 4.24884658e+00, ...,\n       9.96606594e+03, 9.96607631e+03, 9.96619928e+03])\n array([  11.61207425,   68.62569702,  175.45138143, ..., 9940.2298961 ,\n       9940.62792913, 9950.46722155])\n array([4.30647987e+00, 4.99084601e+00, 5.57484556e+00, ...,\n       9.96590828e+03, 9.96594224e+03, 9.96609708e+03])\n array([4.01368010e+00, 5.60177888e+00, 5.63574552e+00, ...,\n       9.96604761e+03, 9.96605408e+03, 9.96608551e+03])\n array([3.96071347e+00, 3.97108013e+00, 3.99641345e+00, ...,\n       9.96616434e+03, 9.96619894e+03, 9.96623114e+03])\n array([3.80711359e+00, 3.84338023e+00, 3.84788023e+00, ...,\n       9.96590458e+03, 9.96608711e+03, 9.96620451e+03])\n array([5.57097890e+00, 5.58724555e+00, 6.62344476e+00, ...,\n       9.96618928e+03, 9.96619704e+03, 9.96620364e+03])\n array([4.01918009e+00, 4.84194613e+00, 4.97367936e+00, ...,\n       9.96568001e+03, 9.96581421e+03, 9.96619328e+03])\n array([4.25024658e+00, 4.26127991e+00, 4.27037990e+00, ...,\n       9.96584534e+03, 9.96608644e+03, 9.96619998e+03])\n array([5.14311256e+00, 5.15234589e+00, 5.15981255e+00, ...,\n       9.96405324e+03, 9.96409481e+03, 9.96472224e+03])\n array([5.09837926e+00, 8.67187651e+00, 9.69707572e+00, ...,\n       9.96609028e+03, 9.96609351e+03, 9.96616194e+03])\n array([6.21411174e+00, 1.18784740e+01, 1.18818074e+01, ...,\n       9.96448664e+03, 9.96478221e+03, 9.96511184e+03])\n array([8.65754319e+00, 8.66360985e+00, 8.67414318e+00, ...,\n       9.96471948e+03, 9.96583168e+03, 9.96622094e+03])\n array([5.94197861e+00, 9.17154279e+00, 9.27597605e+00, ...,\n       9.96288181e+03, 9.96570781e+03, 9.96610638e+03])\n array([3.81068026e+00, 3.82464691e+00, 3.82814691e+00, ...,\n       9.96583764e+03, 9.96585611e+03, 9.96615498e+03])\n array([8.89267634e+00, 1.13450411e+01, 1.13498745e+01, ...,\n       9.96605231e+03, 9.96613474e+03, 9.96617294e+03])\n array([6.05744519e+00, 6.83124460e+00, 8.82350973e+00, ...,\n       9.96591804e+03, 9.96594241e+03, 9.96605591e+03])\n array([  15.77040438,   17.00680343,   21.74756644, ..., 9966.1975761 ,\n       9966.21297609, 9966.22464275])\n array([  11.35167445,   11.35584111,   11.53500764, ..., 9966.09344285,\n       9966.10307618, 9966.13244282])\n array([  13.02153983,   19.68676803,   26.12736307, ..., 9965.83557638,\n       9965.8561097 , 9966.19854277])\n array([  14.40010543,   14.4055721 ,   14.41130543, ..., 9962.22274583,\n       9965.72060981, 9965.75194311])\n array([  14.02650572,   14.03963905,   14.0536057 , ..., 9964.62327732,\n       9964.66604395, 9965.54914327])\n array([4.06724672e+00, 4.23931326e+00, 4.51114638e+00, ...,\n       9.96559928e+03, 9.96571064e+03, 9.96578454e+03])\n array([3.86538021e+00, 3.95164681e+00, 4.00754677e+00, ...,\n       9.96593144e+03, 9.96610071e+03, 9.96618744e+03])\n array([4.40477980e+00, 4.53507970e+00, 4.61931297e+00, ...,\n       9.96616331e+03, 9.96617661e+03, 9.96619658e+03])\n array([4.11274669e+00, 4.21517994e+00, 4.39701314e+00, ...,\n       9.96606054e+03, 9.96616168e+03, 9.96620478e+03])\n array([4.18654663e+00, 4.71391289e+00, 5.13871257e+00, ...,\n       9.96601124e+03, 9.96611451e+03, 9.96619884e+03])\n array([4.35547984e+00, 4.65514627e+00, 4.95471271e+00, ...,\n       9.96598118e+03, 9.96607548e+03, 9.96620374e+03])\n array([6.64251141e+00, 9.13010949e+00, 1.14171744e+01, ...,\n       9.96599774e+03, 9.96608791e+03, 9.96617534e+03])\n array([4.11034669e+00, 4.20434662e+00, 4.47564641e+00, ...,\n       9.96540481e+03, 9.96584178e+03, 9.96591404e+03])\n array([4.21717994e+00, 4.22541327e+00, 4.40007980e+00, ...,\n       9.96540551e+03, 9.96554648e+03, 9.96583481e+03])\n array([4.11918002e+00, 5.68527881e+00, 1.13776078e+01, ...,\n       9.96023801e+03, 9.96347038e+03, 9.96450034e+03])\n array([4.62784629e+00, 4.88977942e+00, 5.05671263e+00, ...,\n       9.96581458e+03, 9.96603778e+03, 9.96617634e+03])\n array([5.08511261e+00, 6.34481164e+00, 6.41097825e+00, ...,\n       9.96601814e+03, 9.96614621e+03, 9.96617888e+03])\n array([4.51334638e+00, 1.11541079e+01, 1.12035746e+01, ...,\n       9.96566621e+03, 9.96568674e+03, 9.96571161e+03])\n array([4.16401332e+00, 5.00237934e+00, 6.08414517e+00, ...,\n       9.96619608e+03, 9.96620691e+03, 9.96621541e+03])\n array([  11.50887433,   11.69150752,   11.72344083, ..., 9965.97477628,\n       9966.10974284, 9966.12147616])]\n</pre> In\u00a0[24]: Copied! <pre>l_n_ids\n</pre> l_n_ids Out[24]: <pre>array([951814884, 951814876, 951815032, 951815275, 951815314, 951815335,\n       951815517, 951815642, 951815712, 951815812, 951815886, 951815948,\n       951815938, 951815929, 951815967, 951816201, 951816190, 951816180,\n       951816222, 951816328, 951816336, 951818175, 951816365, 951816480,\n       951816471, 951816452, 951816607, 951816565, 951816539, 951816416,\n       951816826, 951816691, 951816638, 951818326, 951816775, 951816951,\n       951816936, 951816988, 951817042, 951817026, 951817018, 951817177,\n       951817159, 951817153, 951817227, 951817219, 951817212, 951817185,\n       951817233, 951817257, 951817303, 951817350, 951817341, 951818214,\n       951817332, 951817324, 951817376, 951817367, 951817489, 951817431,\n       951817422, 951817396, 951817447, 951817440, 951817643, 951817514,\n       951817506, 951817482, 951818241, 951817532, 951817473, 951817589,\n       951817568, 951817559, 951817551, 951817634, 951817614, 951817605,\n       951817597, 951817693, 951817677, 951817651, 951817748, 951817712,\n       951817798, 951817823, 951817813, 951818248, 951817731, 951818268,\n       951818261, 951817867, 951817785, 951817927, 951817918, 951818276,\n       951817909, 951817953, 951817981, 951818350, 951818336, 951818307,\n       951818031, 951818068, 951818058, 951818049, 951818083, 951818441,\n       951818431, 951818460, 951818450, 951818497, 951818470, 951818505,\n       951818583, 951818566, 951818655, 951818629, 951818641, 951818732,\n       951818739, 951818779, 951818764, 951818803, 951818837, 951818810,\n       951818845, 951818886, 951818878, 951818998, 951819013, 951819005,\n       951819041, 951819076, 951819089, 951819118, 951819109, 951819140,\n       951819126, 951819191, 951819283, 951819262, 951819255, 951819314,\n       951819431, 951819393, 951819471, 951819496, 951819524, 951819578,\n       951819551, 951819651, 951819699, 951821897, 951819777, 951821903,\n       951820003, 951819958, 951819948, 951820035, 951820020, 951820012,\n       951821916, 951820046, 951820135, 951820085, 951820074, 951820179,\n       951820171, 951820364, 951820151, 951820142, 951820127, 951819967,\n       951820236, 951820295, 951820286, 951820356, 951820413, 951820405,\n       951820455, 951820485, 951820502, 951820510, 951820547, 951820541,\n       951820551, 951820565, 951820595, 951821627, 951820580, 951820574,\n       951820631, 951820623, 951820670, 951821635, 951820713, 951820699,\n       951820732, 951820745, 951820707, 951821642, 951820761, 951821656,\n       951820795, 951820754, 951820788, 951821663, 951820851, 951820844,\n       951821923, 951820816, 951820809, 951820884, 951820877, 951820864,\n       951820857, 951820837, 951820984, 951820902, 951820896, 951820890,\n       951820977, 951820969, 951820956, 951820938, 951821022, 951821065,\n       951821009, 951821000, 951820992, 951821841, 951821060, 951821054,\n       951821043, 951821037, 951821676, 951821114, 951821689, 951821081,\n       951821070, 951821087, 951821103, 951821122, 951821172, 951821165,\n       951821127, 951821711, 951821705, 951821156, 951821734, 951821230,\n       951821193, 951821208, 951821201, 951821292, 951821284, 951821274,\n       951821223, 951821726, 951821260, 951821252, 951821237, 951821315,\n       951821307, 951821351, 951821345, 951821339, 951821322, 951821430,\n       951821408, 951821385, 951821446, 951821489, 951809088, 951809153,\n       951809193, 951812064, 951812048, 951809254, 951809243, 951809334,\n       951809378, 951809496, 951809485, 951809540, 951809528, 951809507,\n       951809599, 951809586, 951809610, 951809640, 951812103, 951809648,\n       951812482, 951809714, 951809704, 951809767, 951809833, 951809888,\n       951809879, 951809932, 951809956, 951810140, 951810191, 951810314,\n       951810369, 951810338, 951810392, 951810425, 951812218, 951810459,\n       951810548, 951810517, 951810495, 951810564, 951810681, 951810724,\n       951810714, 951810747, 951810810, 951810800, 951810780, 951810862,\n       951810906, 951810821, 951811003, 951810960, 951810949, 951811011,\n       951812284, 951811082, 951811061, 951811155, 951811093, 951811269,\n       951811227, 951811217, 951811321, 951811306, 951811295, 951811440,\n       951811426, 951811399, 951812296, 951811514, 951811504, 951811494,\n       951811546, 951811535, 951811578, 951811558, 951812326, 951811646,\n       951811789, 951811778, 951803373, 951803302, 951798448, 951798461,\n       951798529, 951798623, 951798678, 951798836, 951798824, 951798812,\n       951798803, 951798792, 951798892, 951798882, 951798872, 951798849,\n       951798902, 951799024, 951799198, 951799233, 951803410, 951799311,\n       951799336, 951799405, 951799477, 951799419, 951803443, 951799532,\n       951799800, 951799976, 951800040, 951800083, 951800313, 951800330,\n       951800295, 951800362, 951800642, 951800597, 951800680, 951800893,\n       951800908, 951801041, 951800977, 951801069, 951801200, 951801187,\n       951801175, 951801153, 951801140, 951801127, 951801304, 951801290,\n       951801276, 951801248, 951801225, 951801414, 951801384, 951801330,\n       951801449, 951801437, 951801487, 951801475, 951801462, 951801585,\n       951801571, 951801545, 951801653, 951801785, 951801773, 951801760,\n       951801848, 951801836, 951801797, 951801901, 951801891, 951801859,\n       951801869, 951802013, 951802025, 951802068, 951802055, 951802089,\n       951802184, 951802098, 951802200, 951802233, 951802223, 951802334,\n       951802323, 951802310, 951802288, 951802346, 951802409, 951802420,\n       951802501, 951802492, 951803658, 951803611, 951808573, 951808581,\n       951803793, 951803783, 951803772, 951803750, 951803739, 951803728,\n       951803649, 951803924, 951803804, 951803717, 951803705, 951803696,\n       951803838, 951803826, 951803969, 951803949, 951803849, 951803882,\n       951803871, 951803979, 951803960, 951804045, 951804025, 951804015,\n       951804004, 951803995, 951804093, 951804067, 951804123, 951804152,\n       951804103, 951804356, 951804326, 951804171, 951804386, 951804443,\n       951804399, 951808624, 951804421, 951804411, 951804434, 951804478,\n       951808913, 951804602, 951804531, 951804520, 951804508, 951808643,\n       951804496, 951804625, 951804678, 951808652, 951804669, 951804652,\n       951804707, 951804792, 951804759, 951804838, 951804824, 951804877,\n       951804960, 951805029, 951805002, 951805042, 951805078, 951805053,\n       951808659, 951805114, 951805101, 951805256, 951805166, 951805233,\n       951805222, 951805201, 951805333, 951805290, 951805279, 951805267,\n       951805355, 951805340, 951805310, 951805387, 951805365, 951805427,\n       951808669, 951805507, 951805472, 951805458, 951805442, 951805582,\n       951805570, 951805592, 951805561, 951805659, 951805784, 951808686,\n       951808677, 951805943, 951805813, 951805774, 951805761, 951805750,\n       951805726, 951808696, 951805826, 951805931, 951805919, 951805875,\n       951805978, 951806082, 951806215, 951806266, 951806325, 951806358,\n       951806368, 951806377, 951806401, 951806712, 951806780, 951806770,\n       951806814, 951806801, 951806828, 951806876, 951806911, 951806899,\n       951806887, 951807116, 951807008, 951806958, 951806942, 951807087,\n       951807055, 951807270, 951807302, 951807374, 951807358, 951807399,\n       951807423, 951807434, 951807487, 951807445, 951807536, 951807495,\n       951807552, 951807608, 951807596, 951807630, 951807699, 951807680,\n       951807668, 951807659, 951807649, 951807639, 951807707, 951807733,\n       951807808, 951807822, 951807907, 951807880, 951808857, 951808026,\n       951808007, 951807987, 951807848, 951807997, 951807971, 951807962,\n       951807953, 951807935, 951808033, 951808059, 951808890, 951808100,\n       951808091, 951808147, 951808884, 951808875, 951808135, 951808122,\n       951808112, 951808193, 951808163, 951808898, 951808379, 951808326,\n       951808393, 951808498, 951808490, 951812742, 951814469, 951812764,\n       951812715, 951812753, 951812795, 951812879, 951812961, 951812995,\n       951813038, 951813178, 951813339, 951813441, 951813525, 951813598,\n       951813670, 951813756, 951813766, 951813786, 951813775, 951813797,\n       951813846, 951813836, 951813826, 951813941, 951813960, 951814704,\n       951814002, 951813991, 951813982, 951813971, 951814060, 951814108,\n       951814096, 951814089, 951814212, 951814199, 951814190, 951814312])</pre> In\u00a0[25]: Copied! <pre># Example of `t_start` and `t_stop` for a window length equal to 0.250sec\nt_start = 0.0\nt_stop  = 0.250\n</pre> # Example of `t_start` and `t_stop` for a window length equal to 0.250sec t_start = 0.0 t_stop  = 0.250 In\u00a0[26]: Copied! <pre># filtering by stilumus:\n\nn_stimulus = 20 # Replace 10 by l_stim_start_time.shape[0] (all the trials)\nn_neurons  = l_n_ids.shape[0]\n    \nspike_times = np.array([])\nii_spike_times = np.zeros([n_stimulus,n_neurons,2], dtype=np.uint32)\n\n\nfor i in range(n_stimulus):\n    print (\"Processing epoch #%s\" % (i+1))\n    tmp_start_time_i = l_stim_start_time[i] + t_start\n    tmp_stop_time_i  = l_stim_start_time[i] + t_stop\n    \n    for j in range(n_neurons):\n        tmp_spike_time  = session.spike_times[neurons.index[j]]\n        \n        tmp_spike_time  = tmp_spike_time[\n            (tmp_spike_time&gt;=tmp_start_time_i) &amp; (tmp_spike_time&lt;tmp_stop_time_i)\n        ]\n        spike_times = np.append(spike_times,tmp_spike_time - tmp_start_time_i)\n        ii_spike_times[i,j,0] = int(np.max(ii_spike_times))\n        ii_spike_times[i,j,1] = int(ii_spike_times[i,j,0] + len(tmp_spike_time))\n</pre> # filtering by stilumus:  n_stimulus = 20 # Replace 10 by l_stim_start_time.shape[0] (all the trials) n_neurons  = l_n_ids.shape[0]      spike_times = np.array([]) ii_spike_times = np.zeros([n_stimulus,n_neurons,2], dtype=np.uint32)   for i in range(n_stimulus):     print (\"Processing epoch #%s\" % (i+1))     tmp_start_time_i = l_stim_start_time[i] + t_start     tmp_stop_time_i  = l_stim_start_time[i] + t_stop          for j in range(n_neurons):         tmp_spike_time  = session.spike_times[neurons.index[j]]                  tmp_spike_time  = tmp_spike_time[             (tmp_spike_time&gt;=tmp_start_time_i) &amp; (tmp_spike_time <pre>Processing epoch #1\nProcessing epoch #2\nProcessing epoch #3\nProcessing epoch #4\nProcessing epoch #5\nProcessing epoch #6\nProcessing epoch #7\nProcessing epoch #8\nProcessing epoch #9\nProcessing epoch #10\nProcessing epoch #11\nProcessing epoch #12\nProcessing epoch #13\nProcessing epoch #14\nProcessing epoch #15\nProcessing epoch #16\nProcessing epoch #17\nProcessing epoch #18\nProcessing epoch #19\nProcessing epoch #20\n</pre> In\u00a0[27]: Copied! <pre>print (\"# Epochs: %i # Neurons: %i\" % (ii_spike_times.shape[0], ii_spike_times.shape[1]))\n</pre> print (\"# Epochs: %i # Neurons: %i\" % (ii_spike_times.shape[0], ii_spike_times.shape[1])) <pre># Epochs: 20 # Neurons: 684\n</pre> <p>Visualization by trial</p> In\u00a0[28]: Copied! <pre>def raster(spike_times, ii_spike_times, epoch_id, figsize=(14,4), xrange=()):\n    plt.figure(figsize=figsize)\n    for n in range(ii_spike_times.shape[1]): # num neurons\n        tmp_st = spike_times[ ii_spike_times[epoch_id,n,0]:ii_spike_times[epoch_id,n,1] ]\n        plt.plot(tmp_st, np.ones(tmp_st.shape[0])*n, marker='|', color='black', linestyle='')\n    plt.xlabel('Time [s]'); plt.ylabel('Neuron ID');\n    if xrange!=():\n        plt.xlim(xrange)\n</pre> def raster(spike_times, ii_spike_times, epoch_id, figsize=(14,4), xrange=()):     plt.figure(figsize=figsize)     for n in range(ii_spike_times.shape[1]): # num neurons         tmp_st = spike_times[ ii_spike_times[epoch_id,n,0]:ii_spike_times[epoch_id,n,1] ]         plt.plot(tmp_st, np.ones(tmp_st.shape[0])*n, marker='|', color='black', linestyle='')     plt.xlabel('Time [s]'); plt.ylabel('Neuron ID');     if xrange!=():         plt.xlim(xrange) In\u00a0[29]: Copied! <pre>raster(spike_times, ii_spike_times, epoch_id = 0, xrange=(t_stop, t_start))\n</pre> raster(spike_times, ii_spike_times, epoch_id = 0, xrange=(t_stop, t_start)) In\u00a0[\u00a0]: Copied! <pre>\n</pre> <p>Spike Count (SC)</p> In\u00a0[30]: Copied! <pre>def get_spike_count_per_epoch(spike_times, ii_spike_times, normalized=''):\n'''\n    Spike Count per trial (Raw SC). \n    If `normalized` is equal to 'zscore', it return the z-scored spike counts.\n    '''\n    spike_count_per_epoch = np.zeros((ii_spike_times.shape[0], ii_spike_times.shape[1]), dtype=np.float32)\n    for i_e in range(ii_spike_times.shape[0]):\n        for i_n in range(ii_spike_times.shape[1]):#n_selected_neurons):\n            tmp_spks = spike_times[ii_spike_times[i_e,i_n,0]:ii_spike_times[i_e,i_n,1]]\n            spike_count_per_epoch[i_e, i_n] = len(tmp_spks)\n        \n    if normalized=='zscore':\n        for i_n in range(ii_spike_times.shape[1]):\n            if np.std(spike_count_per_epoch[:, i_n])&gt;0:\n                spike_count_per_epoch[:, i_n] = (spike_count_per_epoch[:, i_n] - np.mean(spike_count_per_epoch[:, i_n])) / np.std(spike_count_per_epoch[:, i_n])\n            \n    return spike_count_per_epoch\n</pre> def get_spike_count_per_epoch(spike_times, ii_spike_times, normalized=''):     '''     Spike Count per trial (Raw SC).      If `normalized` is equal to 'zscore', it return the z-scored spike counts.     '''     spike_count_per_epoch = np.zeros((ii_spike_times.shape[0], ii_spike_times.shape[1]), dtype=np.float32)     for i_e in range(ii_spike_times.shape[0]):         for i_n in range(ii_spike_times.shape[1]):#n_selected_neurons):             tmp_spks = spike_times[ii_spike_times[i_e,i_n,0]:ii_spike_times[i_e,i_n,1]]             spike_count_per_epoch[i_e, i_n] = len(tmp_spks)              if normalized=='zscore':         for i_n in range(ii_spike_times.shape[1]):             if np.std(spike_count_per_epoch[:, i_n])&gt;0:                 spike_count_per_epoch[:, i_n] = (spike_count_per_epoch[:, i_n] - np.mean(spike_count_per_epoch[:, i_n])) / np.std(spike_count_per_epoch[:, i_n])                  return spike_count_per_epoch In\u00a0[31]: Copied! <pre>def euclidean_dist(st1, st2):\n'''\n    Euclidean distance between two spike trains `st1` and `st2`.\n    '''\n    ret = 0.\n    for ii in range(len(st1)):\n        ret += (st1[ii]-st2[ii])**2 # sum\n    \n    return np.sqrt(ret)\n\ndef diss_spike_counts(SC):\n'''\n    Dissimilarity Matrix between spike count vectors via Euclidean distance.\n    '''\n    diss_spike_count = np.zeros((SC.shape[0], SC.shape[0]))\n    for i_e1 in range(SC.shape[0]):\n        for i_e2 in range(i_e1, SC.shape[0]):\n            diss_spike_count[i_e1, i_e2] = euclidean_dist(SC[i_e1], SC[i_e2])\n            diss_spike_count[i_e2, i_e1] = diss_spike_count[i_e1, i_e2]\n    return diss_spike_count\n</pre> def euclidean_dist(st1, st2):     '''     Euclidean distance between two spike trains `st1` and `st2`.     '''     ret = 0.     for ii in range(len(st1)):         ret += (st1[ii]-st2[ii])**2 # sum          return np.sqrt(ret)  def diss_spike_counts(SC):     '''     Dissimilarity Matrix between spike count vectors via Euclidean distance.     '''     diss_spike_count = np.zeros((SC.shape[0], SC.shape[0]))     for i_e1 in range(SC.shape[0]):         for i_e2 in range(i_e1, SC.shape[0]):             diss_spike_count[i_e1, i_e2] = euclidean_dist(SC[i_e1], SC[i_e2])             diss_spike_count[i_e2, i_e1] = diss_spike_count[i_e1, i_e2]     return diss_spike_count In\u00a0[32]: Copied! <pre># let's compute spike count per trial\nSC = get_spike_count_per_epoch(spike_times, ii_spike_times)\n</pre> # let's compute spike count per trial SC = get_spike_count_per_epoch(spike_times, ii_spike_times) In\u00a0[34]: Copied! <pre># Computing dissimilarity matrix (Euclidean distance of Spike count vectors)\ndissimilarities = diss_spike_counts(SC)\n</pre> # Computing dissimilarity matrix (Euclidean distance of Spike count vectors) dissimilarities = diss_spike_counts(SC) In\u00a0[35]: Copied! <pre>fs = 14 # fontsize\nplt.figure(figsize=(7,6))\nplt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs)\n_ = plt.colorbar(label='Euclidean distance')\n</pre> fs = 14 # fontsize plt.figure(figsize=(7,6)) plt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs) _ = plt.colorbar(label='Euclidean distance') In\u00a0[36]: Copied! <pre>fs = 14 # fontsize\nplt.figure(figsize=(7,6))\nplt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs)\n_ = plt.colorbar(label='Euclidean distance')\n</pre> fs = 14 # fontsize plt.figure(figsize=(7,6)) plt.imshow(dissimilarities, cmap='PuBu'); plt.xlabel('Trials',fontsize=fs); plt.ylabel('Trials',fontsize=fs) _ = plt.colorbar(label='Euclidean distance') In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/NWB_data_exploration/#neural-activity-and-stimuli-from-allen-datasets-extraction-computation-and-vis","title":"Neural activity and Stimuli from Allen datasets (Extraction, Computation, and Vis)\u00b6","text":"In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied! In\u00a0[\u00a0]: Copied!"},{"location":"notebooks/NWB_data_exploration/#libraries-and-data-loading","title":"Libraries and Data loading\u00b6","text":""},{"location":"notebooks/NWB_data_exploration/#stimulus-presentation","title":"Stimulus presentation\u00b6","text":""},{"location":"notebooks/NWB_data_exploration/#accessing-neurons-and-spiketimes","title":"Accessing neurons and spiketimes\u00b6","text":""},{"location":"notebooks/NWB_data_exploration/#todo","title":"TODO:\u00b6","text":""},{"location":"notebooks/NeuralEnsembles_distances/","title":"NeuralEnsembles distances","text":"<p>Importing necessary libs.</p> In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.manifold import TSNE\n</pre> import numpy as np import matplotlib.pyplot as plt from sklearn.manifold import TSNE <p>Importing SPIKE, VP, and SpikeShip measures</p> In\u00a0[2]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[3]: Copied! <pre>from spyketools.proc.distances.ISI.ISI_distance import isi_distance_python\nfrom spyketools.proc.distances.SPIKE.SPIKE_distance import SPIKE_distance_cython\nfrom spyketools.proc.distances.RISPIKE.RISPIKE_distance import spike_distance_rf\nfrom spyketools.proc.distances.victor_purpura.victor_purpura_distance import victor_purpura_distance\nfrom spikeship import spikeship\n</pre> from spyketools.proc.distances.ISI.ISI_distance import isi_distance_python from spyketools.proc.distances.SPIKE.SPIKE_distance import SPIKE_distance_cython from spyketools.proc.distances.RISPIKE.RISPIKE_distance import spike_distance_rf from spyketools.proc.distances.victor_purpura.victor_purpura_distance import victor_purpura_distance from spikeship import spikeship <p><code>TODO:</code> Move to SpikeShip src</p> In\u00a0[4]: Copied! <pre># ADD IN SPIKESHIP SRC\ndef spikeship_single_neuron(st1, st2, return_global_shift=False):\n    len_st1 = len(st1)\n    len_st2 = len(st2)\n    if len(st1) != len(st2):\n        if len_st1 &gt; len_st2:\n            c_temp = spikeship.signature_emd_ss2(st1, st2)\n            C = c_temp[0]\n            W = c_temp[1] / (len_st1 * len_st2)\n        else:\n            c_temp = spikeship.signature_emd_ss2(st2, st1)\n            C = -c_temp[0] \n            W =  c_temp[1] / (len_st1 * len_st2)\n    else:\n        c_temp = spikeship.signature_emd_ss2(st2, st1)\n        C = c_temp[0]\n        W = 1.0/c_temp[1]\n        \n    # computation of D\n    if np.sum(W)==len(W): # single spike patterns\n        g = np.median(C)\n    else:\n        if np.sum(W)&gt;0:     # multi-spike patterns\n            g = tools.weighted_median(x=C,w=W)\n        else: # it ocurrs when two epochs do not have flow because one of the is spikeless\n            g = np.nan #0.\n    \n    f = np.sum(np.abs((C-g)*W))\n    \n    if return_global_shift:\n        return f, g\n    else:\n        return f\n</pre> # ADD IN SPIKESHIP SRC def spikeship_single_neuron(st1, st2, return_global_shift=False):     len_st1 = len(st1)     len_st2 = len(st2)     if len(st1) != len(st2):         if len_st1 &gt; len_st2:             c_temp = spikeship.signature_emd_ss2(st1, st2)             C = c_temp[0]             W = c_temp[1] / (len_st1 * len_st2)         else:             c_temp = spikeship.signature_emd_ss2(st2, st1)             C = -c_temp[0]              W =  c_temp[1] / (len_st1 * len_st2)     else:         c_temp = spikeship.signature_emd_ss2(st2, st1)         C = c_temp[0]         W = 1.0/c_temp[1]              # computation of D     if np.sum(W)==len(W): # single spike patterns         g = np.median(C)     else:         if np.sum(W)&gt;0:     # multi-spike patterns             g = tools.weighted_median(x=C,w=W)         else: # it ocurrs when two epochs do not have flow because one of the is spikeless             g = np.nan #0.          f = np.sum(np.abs((C-g)*W))          if return_global_shift:         return f, g     else:         return f <p><code>TODO:</code> Move to main lib</p> In\u00a0[5]: Copied! <pre>from spikeship import spikeship, tools\n</pre> from spikeship import spikeship, tools In\u00a0[6]: Copied! <pre>#MOVE TO H:\\git\\spyke-tools-dev\\spyketools\\proc\\distances\\spike_metrics\ndef spike_train_distance(st1, st2, metric, attrs={}):\n    metric = metric.lower()\n    ret = None\n    # attrs management\n    # firing rate related\n    if (not 'window_length' in attrs) or (attrs['window_length'] is None):\n        window_length = np.max(np.concatenate([st1, st2]))\n    else:\n        window_length = attrs['window_length']\n    # vp-related\n    if (not 'cost' in attrs) or (attrs['cost'] is None):\n        cost = (len(st1)+len(st2))/2.\n    else:\n        cost = attrs['cost']\n\n    dist = None\n    if metric == \"firing_rates\" or metric == 'firing_rates_z':\n        dist = len(st1)-len(st2)\n\n    elif metric == \"spikeship\":\n            return_global_shift = (\"return_global_shift\" in attrs) and (attrs['return_global_shift'])\n            dist = spikeship_single_neuron(st1, st2, return_global_shift=return_global_shift)\n    else:\n                  \n        if metric == \"victor_purpura\":\n            dist = victor_purpura_distance(st1, st2, cost)\n\n        elif metric == \"isi\":\n            dist = np.abs(isi_distance_python(st1, st2, t_start=0, t_end=window_length))\n\n        elif metric == \"spike\":\n            dist = np.abs(SPIKE_distance_cython(st1, st2, t_start=0, t_end=window_length)) #SPIKE_distance_pw(spike_times, ii_spike_times, epoch_index_pairs, window_length)\n\n        elif metric == \"ri-spike\":\n            dist = np.abs(spike_distance_rf(st1, st2, t_start=0, t_end=window_length)) #RISPIKE_distance_pw(spike_times, ii_spike_times, epoch_index_pairs, window_length)\n        else:\n            raise NotImplementedError(\"metric '%s' is not implemented.\" % metric)\n    return dist\n</pre> #MOVE TO H:\\git\\spyke-tools-dev\\spyketools\\proc\\distances\\spike_metrics def spike_train_distance(st1, st2, metric, attrs={}):     metric = metric.lower()     ret = None     # attrs management     # firing rate related     if (not 'window_length' in attrs) or (attrs['window_length'] is None):         window_length = np.max(np.concatenate([st1, st2]))     else:         window_length = attrs['window_length']     # vp-related     if (not 'cost' in attrs) or (attrs['cost'] is None):         cost = (len(st1)+len(st2))/2.     else:         cost = attrs['cost']      dist = None     if metric == \"firing_rates\" or metric == 'firing_rates_z':         dist = len(st1)-len(st2)      elif metric == \"spikeship\":             return_global_shift = (\"return_global_shift\" in attrs) and (attrs['return_global_shift'])             dist = spikeship_single_neuron(st1, st2, return_global_shift=return_global_shift)     else:                            if metric == \"victor_purpura\":             dist = victor_purpura_distance(st1, st2, cost)          elif metric == \"isi\":             dist = np.abs(isi_distance_python(st1, st2, t_start=0, t_end=window_length))          elif metric == \"spike\":             dist = np.abs(SPIKE_distance_cython(st1, st2, t_start=0, t_end=window_length)) #SPIKE_distance_pw(spike_times, ii_spike_times, epoch_index_pairs, window_length)          elif metric == \"ri-spike\":             dist = np.abs(spike_distance_rf(st1, st2, t_start=0, t_end=window_length)) #RISPIKE_distance_pw(spike_times, ii_spike_times, epoch_index_pairs, window_length)         else:             raise NotImplementedError(\"metric '%s' is not implemented.\" % metric)     return dist <p>Data simulation</p> <p>In this tutorial, we will generate three spike trains from random uniform distribution (NumPy's random module)</p> In\u00a0[7]: Copied! <pre>window_length    = 1\nrandom_rate_st1  = 20\nrandom_rate_st2  = 10\nrandom_rate_st3  = 30\n</pre> window_length    = 1 random_rate_st1  = 20 random_rate_st2  = 10 random_rate_st3  = 30 In\u00a0[8]: Copied! <pre>st1 = np.random.uniform(0, window_length, int(np.rint(window_length * random_rate_st1)))\nst1\n</pre> st1 = np.random.uniform(0, window_length, int(np.rint(window_length * random_rate_st1))) st1 Out[8]: <pre>array([0.54520052, 0.05090904, 0.63161995, 0.40325893, 0.10522219,\n       0.43758888, 0.9247742 , 0.28893735, 0.07625928, 0.30474875,\n       0.002221  , 0.59727108, 0.25256447, 0.94319305, 0.6687706 ,\n       0.03243689, 0.75669847, 0.92521665, 0.31816833, 0.22055844])</pre> In\u00a0[9]: Copied! <pre>st2 = np.random.uniform(0, window_length, int(np.rint(window_length * random_rate_st2)))\nst2\n</pre> st2 = np.random.uniform(0, window_length, int(np.rint(window_length * random_rate_st2))) st2 Out[9]: <pre>array([0.40965511, 0.3069141 , 0.04365799, 0.88525141, 0.32718722,\n       0.84087039, 0.08741324, 0.52789228, 0.82462147, 0.37480393])</pre> In\u00a0[10]: Copied! <pre>st3 = np.random.uniform(0, window_length, int(np.rint(window_length * random_rate_st3)))\nst3\n</pre> st3 = np.random.uniform(0, window_length, int(np.rint(window_length * random_rate_st3))) st3 Out[10]: <pre>array([0.61477569, 0.4908755 , 0.69913879, 0.79592393, 0.73106154,\n       0.01061136, 0.37456041, 0.1509597 , 0.78696273, 0.34206565,\n       0.87216871, 0.77895042, 0.89375029, 0.87955936, 0.58840796,\n       0.64753096, 0.27331953, 0.22555311, 0.34791837, 0.91308568,\n       0.14778284, 0.88721528, 0.82287604, 0.59402447, 0.37987385,\n       0.5182529 , 0.44262754, 0.99591286, 0.87712421, 0.04410692])</pre> In\u00a0[11]: Copied! <pre># visualization options:\nms = 15 # marker size\n</pre> # visualization options: ms = 15 # marker size In\u00a0[12]: Copied! <pre>plt.plot(st1, np.ones(random_rate_st1)*0, color='k', ls='', marker='|', ms=ms)\nplt.plot(st2, np.ones(random_rate_st2)*1, color='k', ls='', marker='|', ms=ms)\nplt.plot(st3, np.ones(random_rate_st3)*2, color='k', ls='', marker='|', ms=ms)\nplt.ylim([-0.5, 2.5])\nplt.xlabel(\"Time (a.u.)\")\nplt.ylabel(\"Spike trains\")\nplt.yticks([0,1,2], [\"st1\", \"st2\", \"st3\"])\n</pre> plt.plot(st1, np.ones(random_rate_st1)*0, color='k', ls='', marker='|', ms=ms) plt.plot(st2, np.ones(random_rate_st2)*1, color='k', ls='', marker='|', ms=ms) plt.plot(st3, np.ones(random_rate_st3)*2, color='k', ls='', marker='|', ms=ms) plt.ylim([-0.5, 2.5]) plt.xlabel(\"Time (a.u.)\") plt.ylabel(\"Spike trains\") plt.yticks([0,1,2], [\"st1\", \"st2\", \"st3\"]) Out[12]: <pre>([&lt;matplotlib.axis.YTick at 0x7fdd404b6e80&gt;,\n  &lt;matplotlib.axis.YTick at 0x7fdd404b67b8&gt;,\n  &lt;matplotlib.axis.YTick at 0x7fddb04de198&gt;],\n &lt;a list of 3 Text yticklabel objects&gt;)</pre> <p>SpikeShip</p> <p>Extraction of global shift $G$ or alignment (optional)</p> In\u00a0[13]: Copied! <pre>spike_train_distance(st1, st3, metric='SpikeShip')\n</pre> spike_train_distance(st1, st3, metric='SpikeShip') Out[13]: <pre>0.3730175305995934</pre> In\u00a0[14]: Copied! <pre>f, G = spikeship_single_neuron(st1, st2, return_global_shift=True)\nprint (\"Neuron-specific flow:\", f)\nprint (\"Global shift:\", G)\n</pre> f, G = spikeship_single_neuron(st1, st2, return_global_shift=True) print (\"Neuron-specific flow:\", f) print (\"Global shift:\", G) <pre>Neuron-specific flow: 0.2699476620590623\nGlobal shift: -0.022438472329331716\n</pre> In\u00a0[15]: Copied! <pre>spike_train_distance(st1, st2, metric='SpikeShip')\n</pre> spike_train_distance(st1, st2, metric='SpikeShip') Out[15]: <pre>0.2699476620590623</pre> In\u00a0[16]: Copied! <pre>spike_train_distance(st1, st2, metric='SpikeShip', attrs={'return_global_shift' : True})\n</pre> spike_train_distance(st1, st2, metric='SpikeShip', attrs={'return_global_shift' : True}) Out[16]: <pre>(0.2699476620590623, -0.022438472329331716)</pre> In\u00a0[17]: Copied! <pre>spike_train_distance(st1, st2, metric='ISI', attrs={'window_length' : 1})\n</pre> spike_train_distance(st1, st2, metric='ISI', attrs={'window_length' : 1}) Out[17]: <pre>9.741799938542744</pre> In\u00a0[18]: Copied! <pre>spike_train_distance(st1, st2, metric='SPIKE', attrs={'window_length' : 1})\n</pre> spike_train_distance(st1, st2, metric='SPIKE', attrs={'window_length' : 1}) Out[18]: <pre>571.313769105488</pre> In\u00a0[19]: Copied! <pre>spike_train_distance(st1, st2, metric='RI-SPIKE', attrs={'window_length' : 1})\n</pre> spike_train_distance(st1, st2, metric='RI-SPIKE', attrs={'window_length' : 1}) Out[19]: <pre>17.159171399618273</pre> In\u00a0[20]: Copied! <pre>spike_train_distance(st1, st2, metric='victor_purpura', attrs={'cost' : 0})\n</pre> spike_train_distance(st1, st2, metric='victor_purpura', attrs={'cost' : 0}) Out[20]: <pre>10.0</pre> In\u00a0[21]: Copied! <pre>spike_train_distance(st1, st2, metric='victor_purpura', attrs={'cost' : 1})\n</pre> spike_train_distance(st1, st2, metric='victor_purpura', attrs={'cost' : 1}) Out[21]: <pre>10.29507830802713</pre> In\u00a0[22]: Copied! <pre>spike_train_distance(st1, st2, metric='victor_purpura')\n</pre> spike_train_distance(st1, st2, metric='victor_purpura') Out[22]: <pre>14.42617462040693</pre> In\u00a0[23]: Copied! <pre>spike_train_distance(st1, st2, metric='ISI', attrs={'window_length' : 1}), spike_train_distance(st2, st1, metric='ISI', attrs={'window_length' : 1})\n</pre> spike_train_distance(st1, st2, metric='ISI', attrs={'window_length' : 1}), spike_train_distance(st2, st1, metric='ISI', attrs={'window_length' : 1}) Out[23]: <pre>(0.568530882002483, 0.568530882002483)</pre> In\u00a0[24]: Copied! <pre>spike_train_distance(st1, st2, metric='SPIKE', attrs={'window_length' : 1}), spike_train_distance(st2, st1, metric='SPIKE', attrs={'window_length' : 1})\n</pre> spike_train_distance(st1, st2, metric='SPIKE', attrs={'window_length' : 1}), spike_train_distance(st2, st1, metric='SPIKE', attrs={'window_length' : 1}) Out[24]: <pre>(0.3324823396088743, 0.3324823396088743)</pre> In\u00a0[25]: Copied! <pre>plt.plot(st1, np.ones(random_rate_st1)*0, color='k', ls='', marker='|', ms=ms)\nplt.plot(st2, np.ones(random_rate_st2)*1, color='k', ls='', marker='|', ms=ms)\nplt.plot(st3, np.ones(random_rate_st3)*2, color='k', ls='', marker='|', ms=ms)\nplt.ylim([-0.5, 2.5])\nplt.xlabel(\"Time (a.u.)\")\nplt.ylabel(\"Spike trains\")\nplt.yticks([0,1,2], [\"st1\", \"st2\", \"st3\"])\n</pre> plt.plot(st1, np.ones(random_rate_st1)*0, color='k', ls='', marker='|', ms=ms) plt.plot(st2, np.ones(random_rate_st2)*1, color='k', ls='', marker='|', ms=ms) plt.plot(st3, np.ones(random_rate_st3)*2, color='k', ls='', marker='|', ms=ms) plt.ylim([-0.5, 2.5]) plt.xlabel(\"Time (a.u.)\") plt.ylabel(\"Spike trains\") plt.yticks([0,1,2], [\"st1\", \"st2\", \"st3\"]) Out[25]: <pre>([&lt;matplotlib.axis.YTick at 0x7fdd3f6529b0&gt;,\n  &lt;matplotlib.axis.YTick at 0x7fdd3f6670f0&gt;,\n  &lt;matplotlib.axis.YTick at 0x7fdd3f23b198&gt;],\n &lt;a list of 3 Text yticklabel objects&gt;)</pre> In\u00a0[26]: Copied! <pre>st3\n</pre> st3 Out[26]: <pre>array([0.61477569, 0.4908755 , 0.69913879, 0.79592393, 0.73106154,\n       0.01061136, 0.37456041, 0.1509597 , 0.78696273, 0.34206565,\n       0.87216871, 0.77895042, 0.89375029, 0.87955936, 0.58840796,\n       0.64753096, 0.27331953, 0.22555311, 0.34791837, 0.91308568,\n       0.14778284, 0.88721528, 0.82287604, 0.59402447, 0.37987385,\n       0.5182529 , 0.44262754, 0.99591286, 0.87712421, 0.04410692])</pre> In\u00a0[27]: Copied! <pre>spikeship_st12 = spike_train_distance(st1, st2, metric='SpikeShip')\nspikeship_st13 = spike_train_distance(st1, st3, metric='SpikeShip')\nspikeship_st23 = spike_train_distance(st2, st3, metric='SpikeShip')\n</pre> spikeship_st12 = spike_train_distance(st1, st2, metric='SpikeShip') spikeship_st13 = spike_train_distance(st1, st3, metric='SpikeShip') spikeship_st23 = spike_train_distance(st2, st3, metric='SpikeShip') In\u00a0[28]: Copied! <pre>shift_costs = [1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6]\n</pre> shift_costs = [1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6] In\u00a0[29]: Copied! <pre>VP_costs = [] # VP distances for different values of q\nfor q in shift_costs:\n    temp_distance = spike_train_distance(st1, st2, metric='victor_purpura', attrs={'cost' : q})\n    VP_costs.append(temp_distance)\n</pre> VP_costs = [] # VP distances for different values of q for q in shift_costs:     temp_distance = spike_train_distance(st1, st2, metric='victor_purpura', attrs={'cost' : q})     VP_costs.append(temp_distance) In\u00a0[30]: Copied! <pre>plt.plot(VP_costs)\nplt.xlabel(\"q\")\nplt.ylabel(\"distance\")\n</pre> plt.plot(VP_costs) plt.xlabel(\"q\") plt.ylabel(\"distance\") Out[30]: <pre>Text(0, 0.5, 'distance')</pre>"},{"location":"notebooks/NeuralEnsembles_distances/#tutorial-distance-between-spike-trains","title":"Tutorial. Distance between spike trains\u00b6","text":""},{"location":"notebooks/NeuralEnsembles_distances/#computation-of-spike-train-distances","title":"Computation of spike train distances\u00b6","text":""},{"location":"notebooks/NeuralEnsembles_distances/#comparison-between-three-spike-trains","title":"Comparison between three spike trains\u00b6","text":""},{"location":"notebooks/NeuralEnsembles_pairwise_distances/","title":"Parallel computing of pairwise distances","text":"<p>Importing necessary libs.</p> In\u00a0[25]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nimport sys\nfrom sklearn.manifold import TSNE\n</pre> import numpy as np import matplotlib.pyplot as plt import sys from sklearn.manifold import TSNE In\u00a0[8]: Copied! <pre>sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.proc.distances.spike_metrics import pairwise_spike_distance\n</pre> sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.proc.distances.spike_metrics import pairwise_spike_distance <p>Data loading</p> <p>Data extracted and preprocessed from the Allen Brain Institute.</p> In\u00a0[9]: Copied! <pre>stim_label     = np.load(\"demo_dataset_allen/stim_label.npy\")\nspike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n</pre> stim_label     = np.load(\"demo_dataset_allen/stim_label.npy\") spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\") ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\") In\u00a0[10]: Copied! <pre>ii_spike_times.shape\n</pre> ii_spike_times.shape Out[10]: <pre>(200, 1000, 2)</pre> <p>Euclidean distance of firing rate vectors</p> In\u00a0[11]: Copied! <pre>%%time\nFRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='firing_rates_z')\n</pre> %%time FRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='firing_rates_z') <pre>CPU times: user 1.18 s, sys: 16.8 ms, total: 1.2 s\nWall time: 1.2 s\n</pre> <p>Victor-Purpura distance</p> In\u00a0[12]: Copied! <pre>%%time\nVP = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={\"cost\" : None})\n</pre> %%time VP = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={\"cost\" : None}) <pre>CPU times: user 11.5 s, sys: 30.1 ms, total: 11.5 s\nWall time: 11.5 s\n</pre> <p>SpikeShip distance</p> In\u00a0[27]: Copied! <pre>%%time\nSS = pairwise_spike_distance(spike_times, ii_spike_times, metric='spikeship')\n# delete the following:\nSS = SS[0]\n</pre> %%time SS = pairwise_spike_distance(spike_times, ii_spike_times, metric='spikeship') # delete the following: SS = SS[0] <pre>CPU times: user 55 s, sys: 134 ms, total: 55.2 s\nWall time: 4 s\n</pre> <p>Dissimilarity matrices</p> In\u00a0[28]: Copied! <pre>plt.imshow(FRz, cmap='PuBu')\n</pre> plt.imshow(FRz, cmap='PuBu') Out[28]: <pre>&lt;matplotlib.image.AxesImage at 0x7f95a84237f0&gt;</pre> In\u00a0[29]: Copied! <pre>plt.imshow(VP, cmap='PuBu')\n</pre> plt.imshow(VP, cmap='PuBu') Out[29]: <pre>&lt;matplotlib.image.AxesImage at 0x7f95e32c2080&gt;</pre> In\u00a0[30]: Copied! <pre>plt.imshow(SS, cmap='PuBu')\n</pre> plt.imshow(SS, cmap='PuBu') Out[30]: <pre>&lt;matplotlib.image.AxesImage at 0x7f95e3081e48&gt;</pre> <p>2D t-SNE projection (Manifold learning algorithm)</p> In\u00a0[31]: Copied! <pre>perplexity = 70.\n</pre> perplexity = 70. In\u00a0[32]: Copied! <pre>emb_FRz    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(FRz)\nemb_VP     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP)\nemb_SS     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(SS)\n</pre> emb_FRz    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(FRz) emb_VP     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP) emb_SS     = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(SS) In\u00a0[33]: Copied! <pre>def tsne_visualization(emb, stim_ids, fs_label=14, fn_legend=14, show_legend=False, title=\"\"):\n    fig, axs = plt.subplots(figsize=(5,5), facecolor='w')\n    unique_stim_ids = np.unique(stim_ids)\n    for stim_id in unique_stim_ids:\n        mask = (stim_ids==stim_id)\n        axs.scatter(emb[mask,0], emb[mask,1], label=stim_id)\n    if show_legend:\n        axs.legend(frameon=False, fontsize=fn_legend)\n    if title!=\"\":\n        axs.set_title(title, fontsize=fs_label)\n    axs.set_xlabel(\"1st component\", fontsize=fs_label)\n    axs.set_ylabel(\"2nd component\", fontsize=fs_label)\n</pre> def tsne_visualization(emb, stim_ids, fs_label=14, fn_legend=14, show_legend=False, title=\"\"):     fig, axs = plt.subplots(figsize=(5,5), facecolor='w')     unique_stim_ids = np.unique(stim_ids)     for stim_id in unique_stim_ids:         mask = (stim_ids==stim_id)         axs.scatter(emb[mask,0], emb[mask,1], label=stim_id)     if show_legend:         axs.legend(frameon=False, fontsize=fn_legend)     if title!=\"\":         axs.set_title(title, fontsize=fs_label)     axs.set_xlabel(\"1st component\", fontsize=fs_label)     axs.set_ylabel(\"2nd component\", fontsize=fs_label) In\u00a0[34]: Copied! <pre>tsne_visualization(emb=emb_FRz, stim_ids=stim_label, fs_label=14, show_legend=True, title=\"Firing rate (z-scored)\")\n</pre> tsne_visualization(emb=emb_FRz, stim_ids=stim_label, fs_label=14, show_legend=True, title=\"Firing rate (z-scored)\") In\u00a0[35]: Copied! <pre>tsne_visualization(emb=emb_VP, stim_ids=stim_label, fs_label=14, title=\"Victor-Purpura (q=n)\")\n</pre> tsne_visualization(emb=emb_VP, stim_ids=stim_label, fs_label=14, title=\"Victor-Purpura (q=n)\") In\u00a0[36]: Copied! <pre>tsne_visualization(emb=emb_SS, stim_ids=stim_label, fs_label=14, title=\"SpikeShip\")\n</pre> tsne_visualization(emb=emb_SS, stim_ids=stim_label, fs_label=14, title=\"SpikeShip\")"},{"location":"notebooks/NeuralEnsembles_pairwise_distances/#tutorial-neural-ensembles-pairwise-distances-of-multi-neuron-recordings","title":"Tutorial. Neural Ensembles. Pairwise distances of multi-neuron recordings\u00b6","text":""},{"location":"notebooks/NeuralEnsembles_pairwise_distances/#computation-of-pairwise-distances","title":"Computation of pairwise distances\u00b6","text":""},{"location":"notebooks/NeuralEnsembles_pairwise_distances/#visualization","title":"Visualization\u00b6","text":""},{"location":"notebooks/TCA_test/","title":"TCA test","text":"In\u00a0[1]: Copied! <pre># first we need a bit of import boilerplate\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os \nimport random \nimport scipy \nimport sklearn\n\nfrom sklearn.manifold import MDS\nfrom sklearn.manifold import TSNE\nfrom sklearn.manifold import Isomap\nfrom sklearn.neural_network import BernoulliRBM\nfrom sklearn import metrics\nfrom scipy.spatial import distance as dist \nfrom scipy.stats import spearmanr\nfrom scipy.stats import pearsonr\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\nfrom sklearn.preprocessing import normalize\nfrom sklearn.cluster import KMeans\nfrom tensorly.decomposition import parafac, non_negative_parafac, non_negative_tucker\n\nfrom allensdk.brain_observatory.ecephys.ecephys_project_cache import EcephysProjectCache\nfrom allensdk.brain_observatory.ecephys.ecephys_session import (\n    EcephysSession, \n    removed_unused_stimulus_presentation_columns\n)\nfrom allensdk.brain_observatory.ecephys.visualization import plot_mean_waveforms, plot_spike_counts, raster_plot\nfrom allensdk.brain_observatory.visualization import plot_running_speed\n\n# tell pandas to show all columns when we display a DataFrame\npd.set_option(\"display.max_columns\", None)\n</pre> # first we need a bit of import boilerplate import numpy as np import pandas as pd %matplotlib inline import matplotlib.pyplot as plt import seaborn as sns import os  import random  import scipy  import sklearn  from sklearn.manifold import MDS from sklearn.manifold import TSNE from sklearn.manifold import Isomap from sklearn.neural_network import BernoulliRBM from sklearn import metrics from scipy.spatial import distance as dist  from scipy.stats import spearmanr from scipy.stats import pearsonr from sklearn.decomposition import PCA from sklearn.preprocessing import StandardScaler from sklearn.preprocessing import Normalizer from sklearn.preprocessing import normalize from sklearn.cluster import KMeans from tensorly.decomposition import parafac, non_negative_parafac, non_negative_tucker  from allensdk.brain_observatory.ecephys.ecephys_project_cache import EcephysProjectCache from allensdk.brain_observatory.ecephys.ecephys_session import (     EcephysSession,      removed_unused_stimulus_presentation_columns ) from allensdk.brain_observatory.ecephys.visualization import plot_mean_waveforms, plot_spike_counts, raster_plot from allensdk.brain_observatory.visualization import plot_running_speed  # tell pandas to show all columns when we display a DataFrame pd.set_option(\"display.max_columns\", None) <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\n&lt;ipython-input-1-6ce5c31afcf4&gt; in &lt;module&gt;\n     23 from sklearn.preprocessing import normalize\n     24 from sklearn.cluster import KMeans\n---&gt; 25 from tensorly.decomposition import parafac, non_negative_parafac, non_negative_tucker\n     26 \n     27 from allensdk.brain_observatory.ecephys.ecephys_project_cache import EcephysProjectCache\n\nModuleNotFoundError: No module named 'tensorly'</pre> In\u00a0[3]: Copied! <pre>def pca_triplot(X,y,theta=0.9,zscore=True,show_plot=True):\n'''\n    Input: X: n_sample by n_feature matrix \n           y: label vector for samples \n           theta: float between 0 and 1, percentage of variance  \n           zscore: bool, whether the data is centered \n           show_plot: bool, whether the plots are made\n    Output:triplot( PC1-PC2 plot; Eigenspectrum; Cumulative explained variance)\n           X_new: projected dataset\n           pca_threshold_idx: the number of PCs that explain more than *theta* percent \n                              of the total variance (i.e. linear dimensionality)\n           dim: float between 1 and min(n_sample, n_feature), dimensionality of the dataset \n    '''\n    if zscore:\n        X = StandardScaler().fit_transform(X) \n        \n    pca = PCA(n_components=min(X.shape)) \n    pca.fit(X)\n    X_new = pca.transform(X)\n    pca_cumulative_var = pca.explained_variance_ratio_.cumsum()\n    pca_threshold_idx = np.where(pca_cumulative_var&gt;theta)[0][0]\n    dim = 1/np.sum(np.square(pca.explained_variance_ratio_))\n    \n    fitted_x = range(min(X.shape)//100,min(X.shape)//2) #fit the segment between #10PC and #100PC\n    fitted_y = pca.explained_variance_ratio_[fitted_x]\n    fitted_x = np.log(fitted_x)\n    fitted_y = np.log(fitted_y)\n    idx = np.isfinite(fitted_x) &amp; np.isfinite(fitted_y)\n    alpha, beta = np.polyfit(fitted_x[idx], fitted_y[idx], 1)\n    fitted_line = np.poly1d([alpha, beta])\n\n    if show_plot:\n        fig, axa = plt.subplots(1,3, figsize=(12,4))\n        im = axa[0].scatter(X_new[:, 0], X_new[:, 1], c=y ,marker='o',s = 6) \n        cbar = plt.colorbar(im,ax=axa[0]); cbar.set_ticks([]); cbar.set_label('label')\n        axa[0].set_title('pca visualization')\n        axa[0].set_xlabel('PC1');axa[0].set_ylabel('PC2');\n\n        axa[1].plot(pca.explained_variance_ratio_,label='eigenspectrum');\n        axa[1].plot(np.exp(fitted_line(np.log(range(1,len(pca.explained_variance_ratio_)+1)))),'--',label='fitted line');\n        axa[1].plot([], [], ' ', label='dimensionality {0:.2f}'.format(dim))\n        axa[1].plot([], [], ' ', label='alpha {0:.2f}'.format(alpha))\n        axa[1].set_xscale('log');axa[1].set_yscale('log');axa[1].set_title('Eigenspectrum')\n        axa[1].set_xlabel('log PC');axa[1].set_ylabel('log explained variance ratio');axa[1].legend()\n\n        axa[2].plot(pca_cumulative_var);axa[2].set_title('Explained Variance')\n        axa[2].plot(pca_threshold_idx,pca_cumulative_var[pca_threshold_idx],'.r',markersize = 12)\n        axa[2].text(pca_threshold_idx,theta-0.1,'#PC {}'.format(pca_threshold_idx),color='r')\n        axa[2].set_xlabel('PC');axa[2].set_ylabel('cumulative explained variance ratio');\n        fig.tight_layout(); \n        plt.show()\n\n    return X_new, pca_threshold_idx, dim\n</pre> def pca_triplot(X,y,theta=0.9,zscore=True,show_plot=True):     '''     Input: X: n_sample by n_feature matrix             y: label vector for samples             theta: float between 0 and 1, percentage of variance              zscore: bool, whether the data is centered             show_plot: bool, whether the plots are made     Output:triplot( PC1-PC2 plot; Eigenspectrum; Cumulative explained variance)            X_new: projected dataset            pca_threshold_idx: the number of PCs that explain more than *theta* percent                                of the total variance (i.e. linear dimensionality)            dim: float between 1 and min(n_sample, n_feature), dimensionality of the dataset      '''     if zscore:         X = StandardScaler().fit_transform(X)               pca = PCA(n_components=min(X.shape))      pca.fit(X)     X_new = pca.transform(X)     pca_cumulative_var = pca.explained_variance_ratio_.cumsum()     pca_threshold_idx = np.where(pca_cumulative_var&gt;theta)[0][0]     dim = 1/np.sum(np.square(pca.explained_variance_ratio_))          fitted_x = range(min(X.shape)//100,min(X.shape)//2) #fit the segment between #10PC and #100PC     fitted_y = pca.explained_variance_ratio_[fitted_x]     fitted_x = np.log(fitted_x)     fitted_y = np.log(fitted_y)     idx = np.isfinite(fitted_x) &amp; np.isfinite(fitted_y)     alpha, beta = np.polyfit(fitted_x[idx], fitted_y[idx], 1)     fitted_line = np.poly1d([alpha, beta])      if show_plot:         fig, axa = plt.subplots(1,3, figsize=(12,4))         im = axa[0].scatter(X_new[:, 0], X_new[:, 1], c=y ,marker='o',s = 6)          cbar = plt.colorbar(im,ax=axa[0]); cbar.set_ticks([]); cbar.set_label('label')         axa[0].set_title('pca visualization')         axa[0].set_xlabel('PC1');axa[0].set_ylabel('PC2');          axa[1].plot(pca.explained_variance_ratio_,label='eigenspectrum');         axa[1].plot(np.exp(fitted_line(np.log(range(1,len(pca.explained_variance_ratio_)+1)))),'--',label='fitted line');         axa[1].plot([], [], ' ', label='dimensionality {0:.2f}'.format(dim))         axa[1].plot([], [], ' ', label='alpha {0:.2f}'.format(alpha))         axa[1].set_xscale('log');axa[1].set_yscale('log');axa[1].set_title('Eigenspectrum')         axa[1].set_xlabel('log PC');axa[1].set_ylabel('log explained variance ratio');axa[1].legend()          axa[2].plot(pca_cumulative_var);axa[2].set_title('Explained Variance')         axa[2].plot(pca_threshold_idx,pca_cumulative_var[pca_threshold_idx],'.r',markersize = 12)         axa[2].text(pca_threshold_idx,theta-0.1,'#PC {}'.format(pca_threshold_idx),color='r')         axa[2].set_xlabel('PC');axa[2].set_ylabel('cumulative explained variance ratio');         fig.tight_layout();          plt.show()      return X_new, pca_threshold_idx, dim In\u00a0[5]: Copied! <pre>def smooth(x,window_len=11,window='hanning'):\n\"\"\"\n    smooth the data using a window with requested size.\n    This method is based on the convolution of a scaled window with the signal.\n    The signal is prepared by introducing reflected copies of the signal \n    (with the window size) in both ends so that transient parts are minimized\n    in the begining and end part of the output signal.\n    input:\n        x: the input signal \n        window_len: the dimension of the smoothing window; should be an odd integer\n        window: the type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'\n            flat window will produce a moving average smoothing.\n\n    output:\n        the smoothed signal\n    example:\n\n    t=linspace(-2,2,0.1)\n    x=sin(t)+randn(len(t))*0.1\n    y=smooth(x)\n    see also: \n    np.hanning, np.hamming, np.bartlett, np.blackman, np.convolve\n    scipy.signal.lfilter\n    TODO: the window parameter could be the window itself if an array instead of a string\n    NOTE: length(output) != length(input), to correct this: return y[(window_len/2-1):-(window_len/2)] instead of just y.\n    \"\"\"\n    s=np.r_[x[window_len-1:0:-1],x,x[-2:-window_len-1:-1]]\n    #print(len(s))\n    if window == 'flat': #moving average\n        w=np.ones(window_len,'d')\n    else:\n        w=eval('np.'+window+'(window_len)')\n    y=np.convolve(w/w.sum(),s,mode='valid')\n    return y\n</pre> def smooth(x,window_len=11,window='hanning'):     \"\"\"     smooth the data using a window with requested size.          This method is based on the convolution of a scaled window with the signal.     The signal is prepared by introducing reflected copies of the signal      (with the window size) in both ends so that transient parts are minimized     in the begining and end part of the output signal.          input:         x: the input signal          window_len: the dimension of the smoothing window; should be an odd integer         window: the type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'             flat window will produce a moving average smoothing.      output:         the smoothed signal              example:      t=linspace(-2,2,0.1)     x=sin(t)+randn(len(t))*0.1     y=smooth(x)          see also:           np.hanning, np.hamming, np.bartlett, np.blackman, np.convolve     scipy.signal.lfilter       TODO: the window parameter could be the window itself if an array instead of a string     NOTE: length(output) != length(input), to correct this: return y[(window_len/2-1):-(window_len/2)] instead of just y.     \"\"\"     s=np.r_[x[window_len-1:0:-1],x,x[-2:-window_len-1:-1]]     #print(len(s))     if window == 'flat': #moving average         w=np.ones(window_len,'d')     else:         w=eval('np.'+window+'(window_len)')     y=np.convolve(w/w.sum(),s,mode='valid')     return y In\u00a0[7]: Copied! <pre># select the session\ndata_directory = '/mnt/cs/departmentN4/Jinke/data_jinke' \nsession_id = 754829445         \nsession = EcephysSession.from_nwb_path(os.path.join(data_directory, 'session_' + str(session_id) + '.nwb'))\n</pre> # select the session data_directory = '/mnt/cs/departmentN4/Jinke/data_jinke'  session_id = 754829445          session = EcephysSession.from_nwb_path(os.path.join(data_directory, 'session_' + str(session_id) + '.nwb')) In\u00a0[8]: Copied! <pre># all the recorded units \nareas, counts = np.unique(session.units.ecephys_structure_acronym, return_counts=True)\npd.DataFrame({'areas':areas,'number_neuron':counts})\n# session.structurewise_unit_counts\n</pre> # all the recorded units  areas, counts = np.unique(session.units.ecephys_structure_acronym, return_counts=True) pd.DataFrame({'areas':areas,'number_neuron':counts}) # session.structurewise_unit_counts Out[8]: areas number_neuron 0 APN 45 1 CA1 123 2 CA2 2 3 CA3 12 4 DG 23 5 Eth 64 6 LGd 90 7 LP 170 8 PO 20 9 POL 5 10 PoT 6 11 TH 1 12 VISam 47 13 VISp 92 14 VISpm 21 15 VISrl 32 16 VPM 79 In\u00a0[9]: Copied! <pre># select the neurons\n\nneuron_types = ['VISp','VISl','VISal','VISpm','VISrl','VISam'] # visual cortical\narea = 'Visual'\n\n# neuron_types = ['CA1','CA2','CA3','DG'] # hippocampus-related\n# area = 'Hippocampal'\n\n# neuron_types = ['LGd','Eth','SGN','LP','POL','VPM'] # thalamus-related\n# area = 'Thalamic'\n\n# neuron_types = areas\n# area = 'All'\n\nneurons = session.units[session.units.ecephys_structure_acronym.isin(neuron_types)]\nhigh_snr_units = neurons[neurons['snr'] &gt; 0.5] \nhigh_snr_units = high_snr_units.iloc[np.argsort(high_snr_units.ecephys_structure_acronym.values)] # sort units by area\n</pre> # select the neurons  neuron_types = ['VISp','VISl','VISal','VISpm','VISrl','VISam'] # visual cortical area = 'Visual'  # neuron_types = ['CA1','CA2','CA3','DG'] # hippocampus-related # area = 'Hippocampal'  # neuron_types = ['LGd','Eth','SGN','LP','POL','VPM'] # thalamus-related # area = 'Thalamic'  # neuron_types = areas # area = 'All'  neurons = session.units[session.units.ecephys_structure_acronym.isin(neuron_types)] high_snr_units = neurons[neurons['snr'] &gt; 0.5]  high_snr_units = high_snr_units.iloc[np.argsort(high_snr_units.ecephys_structure_acronym.values)] # sort units by area In\u00a0[10]: Copied! <pre>session.stimulus_presentations.stimulus_name.unique()\n</pre> session.stimulus_presentations.stimulus_name.unique() Out[10]: <pre>array(['spontaneous', 'gabors', 'flashes', 'drifting_gratings',\n       'natural_movie_three', 'natural_movie_one', 'static_gratings',\n       'natural_scenes'], dtype=object)</pre> In\u00a0[11]: Copied! <pre># select the stimulus presentations\nstimulus_type = 'gabors'\n# stimulus_type = 'static_gratings'\n# stimulus_type = 'drifting_gratings'\n# stimulus_type = 'natural_scenes'\n# stimulus_type = 'natural_movie_three'\npresentations = session.stimulus_presentations[session.stimulus_presentations.stimulus_name==stimulus_type]\nprint('The average duration of {} stimulus is: {}'.format(stimulus_type,presentations.duration.values.mean()))\n</pre> # select the stimulus presentations stimulus_type = 'gabors' # stimulus_type = 'static_gratings' # stimulus_type = 'drifting_gratings' # stimulus_type = 'natural_scenes' # stimulus_type = 'natural_movie_three' presentations = session.stimulus_presentations[session.stimulus_presentations.stimulus_name==stimulus_type] print('The average duration of {} stimulus is: {}'.format(stimulus_type,presentations.duration.values.mean())) <pre>The average duration of gabors stimulus is: 0.25020441436253155\n</pre> In\u00a0[12]: Copied! <pre># spike counts of a group of selected neurons and presentations in a given time interval\nstart_time = 0.03;stop_time = 0.23;number_bin = 201\nspike_counts = session.presentationwise_spike_counts(\n    bin_edges=np.linspace(start_time,stop_time,number_bin),\n    stimulus_presentation_ids=presentations.index.values,\n    unit_ids=high_snr_units.index.values\n)\nn_stim, n_timepoint, n_neuron = spike_counts.shape\nprint(\"The number of stimulus is {}\".format(n_stim))\nprint(\"The number of time point is {}\".format(n_timepoint))\nprint(\"The number of neurons is {}\".format(n_neuron))\n</pre> # spike counts of a group of selected neurons and presentations in a given time interval start_time = 0.03;stop_time = 0.23;number_bin = 201 spike_counts = session.presentationwise_spike_counts(     bin_edges=np.linspace(start_time,stop_time,number_bin),     stimulus_presentation_ids=presentations.index.values,     unit_ids=high_snr_units.index.values ) n_stim, n_timepoint, n_neuron = spike_counts.shape print(\"The number of stimulus is {}\".format(n_stim)) print(\"The number of time point is {}\".format(n_timepoint)) print(\"The number of neurons is {}\".format(n_neuron)) <pre>The number of stimulus is 3645\nThe number of time point is 200\nThe number of neurons is 184\n</pre> In\u00a0[14]: Copied! <pre># label for stimulus: time \ntarget_time = presentations.start_time.values\nplt.scatter(range(n_stim),target_time,c=target_time)\nplt.title('Start Time of Stimulus Presentation');plt.show()\n\n# label for stimulus: orientation\ntarget_orientation = presentations['orientation'].values\ntarget_orientation = [i if i!='null' else 180 for i in target_orientation] # 180 stands for missing data! \ntarget_orientation = np.array(target_orientation)\nplt.plot(target_orientation[:50]);plt.title('First 50 stimulus orientations');plt.show()\nprint('The following orientations were shown: {}'.format(pd.unique(target_orientation)))\n\n# label for stimulus: historical orientation over the past 10 time bins \n# RATIONAL: neurons are memory units, it remebers its history \ntarget_history_orientation = [target_orientation[i] if i &lt; 10 \n                              else np.mean(np.array(target_orientation[i-10:i])) \n                              for i in range(n_stim)]\nplt.plot(target_history_orientation);plt.title('mean history orientation');plt.legend(['time bin = 10']);plt.show()\n\n# label for stimulus: position (only gabor stimulus is not all-field)\nif stimulus_type == 'gabors':\n    target_position = presentations[['x_position','y_position']]\n    _ , target_position_color = np.unique(target_position.values.astype('int'),axis=0,return_inverse=True)\n    plt.scatter(target_position.values[:,0],target_position.values[:,1],marker = '+',c=target_position_color,cmap='jet')\n    plt.show()\n\n# label for stimulus: running speed of the mouse \ntarget_running_speed = list()\nfor i in presentations.index:\n    start_time_i = presentations.loc[i,'start_time']\n    end_time_i = start_time_i + (stop_time - start_time) # only the chosen period of stimulus presentation\n    speed = session.running_speed.query(\"start_time &gt;=  @start_time_i &amp; end_time&lt;=@end_time_i\")\n    duration = speed['end_time'] - speed['start_time']\n    target_running_speed.append(np.dot(duration, speed['velocity'])/duration.sum())\ntarget_running_speed = np.array(target_running_speed)\ntarget_running_speed -= np.min(target_running_speed)\nplt.hist(target_running_speed);plt.title('Running speed distribution of mouse (stim)');plt.show()\n\n# label for stimulus: pupil diameter\npupil = session.get_pupil_data()\ntarget_pupil_width = list()\nfor i in presentations.index:\n    start_time_i = presentations.loc[i,'start_time']\n    end_time_i = start_time_i + (stop_time - start_time) # only the chosen period of stimulus presentation\n    target_pupil_width.append(pupil.query(\"index &gt;= @start_time_i &amp; index &lt;= @end_time_i\").pupil_width.mean())\ntarget_pupil_width = np.array(target_pupil_width)\nplt.hist(target_pupil_width);plt.title('Pupil Width distribution of mouse (stim)');plt.show()\n\n# label for spontaneous activity: which block it comes from\ndf_spont_block = pd.DataFrame(np.unique(target_spont_block,return_counts=True)).T\ndf_spont_block.columns = ['block id','count'] \ndf_spont_block.plot.bar(x='block id',y='count');plt.show()\n\n# label for spontaneous activity: running speed of the mouse\ntarget_spont_running_speed = list()\nfor i in spont_presentations.index:\n    duration = spont_presentations[spont_presentations.index == i].duration.values[0]\n    poles = np.linspace(0,duration,duration//(stop_time-start_time))+spont_presentations.loc[i,'start_time']\n    for j in range(len(poles)-1):\n        start_time_i = poles[j]\n        end_time_i = poles[j+1] \n        speed = session.running_speed.query(\"start_time &gt;=  @start_time_i &amp; end_time&lt;=@end_time_i\")\n        duration_i = speed['end_time'] - speed['start_time']\n        target_spont_running_speed.append(np.dot(duration_i, speed['velocity'])/duration_i.sum())\ntarget_spont_running_speed = np.array(target_spont_running_speed)\ntarget_spont_running_speed -= np.min(target_spont_running_speed)\nplt.hist(target_spont_running_speed);plt.title('Running speed distribution of mouse (spont)');plt.show()\n\n# label for neuron: structure area  \ntarget_area = high_snr_units.ecephys_structure_acronym.values\ntarget_area_color = np.array([np.where(pd.unique(target_area)==x)[0][0] for x in target_area])\nlut = dict(zip(set(target_area), sns.hls_palette(len(set(target_area)), l=0.5, s=0.8)))\nfor i in range(n_neuron): # grouped by the visual cortical areas\n    plt.fill_between(x=np.linspace(i-1,i,2),y1=np.zeros(2),y2=np.ones(2),facecolor=lut[target_area[i]],alpha =0.1)\nplt.show()\nprint('The following neurons were recorded: {}'.format(pd.unique(target_area)))\n\n# label for neuron: layer (vertical position of the probe)\ntarget_layer = high_snr_units.probe_vertical_position\nplt.hist(session.units.probe_vertical_position,label='all')\nplt.hist(target_layer,label=area)\nplt.title('Distribution of Probe Depth (Layer)');plt.legend();plt.show()\n</pre> # label for stimulus: time  target_time = presentations.start_time.values plt.scatter(range(n_stim),target_time,c=target_time) plt.title('Start Time of Stimulus Presentation');plt.show()  # label for stimulus: orientation target_orientation = presentations['orientation'].values target_orientation = [i if i!='null' else 180 for i in target_orientation] # 180 stands for missing data!  target_orientation = np.array(target_orientation) plt.plot(target_orientation[:50]);plt.title('First 50 stimulus orientations');plt.show() print('The following orientations were shown: {}'.format(pd.unique(target_orientation)))  # label for stimulus: historical orientation over the past 10 time bins  # RATIONAL: neurons are memory units, it remebers its history  target_history_orientation = [target_orientation[i] if i &lt; 10                                else np.mean(np.array(target_orientation[i-10:i]))                                for i in range(n_stim)] plt.plot(target_history_orientation);plt.title('mean history orientation');plt.legend(['time bin = 10']);plt.show()  # label for stimulus: position (only gabor stimulus is not all-field) if stimulus_type == 'gabors':     target_position = presentations[['x_position','y_position']]     _ , target_position_color = np.unique(target_position.values.astype('int'),axis=0,return_inverse=True)     plt.scatter(target_position.values[:,0],target_position.values[:,1],marker = '+',c=target_position_color,cmap='jet')     plt.show()  # label for stimulus: running speed of the mouse  target_running_speed = list() for i in presentations.index:     start_time_i = presentations.loc[i,'start_time']     end_time_i = start_time_i + (stop_time - start_time) # only the chosen period of stimulus presentation     speed = session.running_speed.query(\"start_time &gt;=  @start_time_i &amp; end_time&lt;=@end_time_i\")     duration = speed['end_time'] - speed['start_time']     target_running_speed.append(np.dot(duration, speed['velocity'])/duration.sum()) target_running_speed = np.array(target_running_speed) target_running_speed -= np.min(target_running_speed) plt.hist(target_running_speed);plt.title('Running speed distribution of mouse (stim)');plt.show()  # label for stimulus: pupil diameter pupil = session.get_pupil_data() target_pupil_width = list() for i in presentations.index:     start_time_i = presentations.loc[i,'start_time']     end_time_i = start_time_i + (stop_time - start_time) # only the chosen period of stimulus presentation     target_pupil_width.append(pupil.query(\"index &gt;= @start_time_i &amp; index &lt;= @end_time_i\").pupil_width.mean()) target_pupil_width = np.array(target_pupil_width) plt.hist(target_pupil_width);plt.title('Pupil Width distribution of mouse (stim)');plt.show()  # label for spontaneous activity: which block it comes from df_spont_block = pd.DataFrame(np.unique(target_spont_block,return_counts=True)).T df_spont_block.columns = ['block id','count']  df_spont_block.plot.bar(x='block id',y='count');plt.show()  # label for spontaneous activity: running speed of the mouse target_spont_running_speed = list() for i in spont_presentations.index:     duration = spont_presentations[spont_presentations.index == i].duration.values[0]     poles = np.linspace(0,duration,duration//(stop_time-start_time))+spont_presentations.loc[i,'start_time']     for j in range(len(poles)-1):         start_time_i = poles[j]         end_time_i = poles[j+1]          speed = session.running_speed.query(\"start_time &gt;=  @start_time_i &amp; end_time&lt;=@end_time_i\")         duration_i = speed['end_time'] - speed['start_time']         target_spont_running_speed.append(np.dot(duration_i, speed['velocity'])/duration_i.sum()) target_spont_running_speed = np.array(target_spont_running_speed) target_spont_running_speed -= np.min(target_spont_running_speed) plt.hist(target_spont_running_speed);plt.title('Running speed distribution of mouse (spont)');plt.show()  # label for neuron: structure area   target_area = high_snr_units.ecephys_structure_acronym.values target_area_color = np.array([np.where(pd.unique(target_area)==x)[0][0] for x in target_area]) lut = dict(zip(set(target_area), sns.hls_palette(len(set(target_area)), l=0.5, s=0.8))) for i in range(n_neuron): # grouped by the visual cortical areas     plt.fill_between(x=np.linspace(i-1,i,2),y1=np.zeros(2),y2=np.ones(2),facecolor=lut[target_area[i]],alpha =0.1) plt.show() print('The following neurons were recorded: {}'.format(pd.unique(target_area)))  # label for neuron: layer (vertical position of the probe) target_layer = high_snr_units.probe_vertical_position plt.hist(session.units.probe_vertical_position,label='all') plt.hist(target_layer,label=area) plt.title('Distribution of Probe Depth (Layer)');plt.legend();plt.show() <pre>The following orientations were shown: [90.  0. 45.]\n</pre> <pre>The following neurons were recorded: ['VISam' 'VISp' 'VISpm' 'VISrl']\n</pre> In\u00a0[15]: Copied! <pre># trial_R: n_sample, n_neuron, n_stim(position), n_timepoint\ntrial_R = list()\nfor i in range(81):\n    trial_R.append(np.array(spike_counts[target_position_color==i,:,:]))\ntrial_R = np.array(trial_R)\ntrial_R = np.transpose(trial_R, (1, 3, 0, 2))\n# trial-average data (mean_R): n_neuron, n_stim, n_timepoint\nmean_R = np.mean(trial_R,0)\nmean_R -= np.mean(mean_R.reshape((n_neuron,-1)),1)[:,None,None]\n\n# # trial_R: n_sample, n_neuron, n_stim(orientation), n_timepoint\n# trial_R = list()\n# for i in pd.unique(target_orientation):\n#     trial_R.append(np.array(spike_counts[target_orientation==i,:,:]))\n# trial_R = np.array(trial_R)\n# trial_R = np.transpose(trial_R, (1, 3, 0, 2))\n# # trial-average data (mean_R): n_neuron, n_stim, n_timepoint\n# mean_R = np.mean(trial_R,0)\n# mean_R -= np.mean(mean_R.reshape((n_neuron,-1)),1)[:,None,None]\n\n# # trial_R: n_sample, n_neuron, n_stim(arbitrary time block), n_timepoint\n# trial_R = list()\n# for i in range(27):\n#     trial_R.append(np.array(spike_counts[np.arange(n_stim)%27==i,:,:]))\n# trial_R = np.array(trial_R)\n# trial_R = np.transpose(trial_R, (1, 3, 0, 2))\n# # trial-average data (mean_R): n_neuron, n_stim, n_timepoint\n# mean_R = np.mean(trial_R,0)\n# mean_R -= np.mean(mean_R.reshape((n_neuron,-1)),1)[:,None,None]\n</pre> # trial_R: n_sample, n_neuron, n_stim(position), n_timepoint trial_R = list() for i in range(81):     trial_R.append(np.array(spike_counts[target_position_color==i,:,:])) trial_R = np.array(trial_R) trial_R = np.transpose(trial_R, (1, 3, 0, 2)) # trial-average data (mean_R): n_neuron, n_stim, n_timepoint mean_R = np.mean(trial_R,0) mean_R -= np.mean(mean_R.reshape((n_neuron,-1)),1)[:,None,None]  # # trial_R: n_sample, n_neuron, n_stim(orientation), n_timepoint # trial_R = list() # for i in pd.unique(target_orientation): #     trial_R.append(np.array(spike_counts[target_orientation==i,:,:])) # trial_R = np.array(trial_R) # trial_R = np.transpose(trial_R, (1, 3, 0, 2)) # # trial-average data (mean_R): n_neuron, n_stim, n_timepoint # mean_R = np.mean(trial_R,0) # mean_R -= np.mean(mean_R.reshape((n_neuron,-1)),1)[:,None,None]  # # trial_R: n_sample, n_neuron, n_stim(arbitrary time block), n_timepoint # trial_R = list() # for i in range(27): #     trial_R.append(np.array(spike_counts[np.arange(n_stim)%27==i,:,:])) # trial_R = np.array(trial_R) # trial_R = np.transpose(trial_R, (1, 3, 0, 2)) # # trial-average data (mean_R): n_neuron, n_stim, n_timepoint # mean_R = np.mean(trial_R,0) # mean_R -= np.mean(mean_R.reshape((n_neuron,-1)),1)[:,None,None] In\u00a0[16]: Copied! <pre>## Find the number of components by looking at the error plot \n# errors = list()\n# for n_components in np.arange(5,100,10):\n#     ## Tensor Component Analysis \n#     # n_components = 10\n#     # factors_tl = parafac(np.array(spike_counts).astype('d'), rank=n_components) # Parallel factor analysis\n#     factors_tl = non_negative_parafac(np.array(spike_counts).astype('d'), rank=n_components)\n#     # core, factors_tl = non_negative_tucker(np.array(spike_counts).astype('d'), rank=[n_components]*3)\n#     # normalized reconstruction error \n#     reconstruction = np.zeros(spike_counts.shape)\n#     for n in range(n_components):\n#         reconstruction += np.einsum('i,j,k-&gt;ijk',factors_tl[0][:,n],factors_tl[1][:,n],factors_tl[2][:,n])\n#     error = np.sum((spike_counts - reconstruction)**2)\n#     error = error/np.sum(spike_counts**2)\n#     errors.append(error)\n# plt.plot(errors)\n</pre> ## Find the number of components by looking at the error plot  # errors = list() # for n_components in np.arange(5,100,10): #     ## Tensor Component Analysis  #     # n_components = 10 #     # factors_tl = parafac(np.array(spike_counts).astype('d'), rank=n_components) # Parallel factor analysis #     factors_tl = non_negative_parafac(np.array(spike_counts).astype('d'), rank=n_components) #     # core, factors_tl = non_negative_tucker(np.array(spike_counts).astype('d'), rank=[n_components]*3) #     # normalized reconstruction error  #     reconstruction = np.zeros(spike_counts.shape) #     for n in range(n_components): #         reconstruction += np.einsum('i,j,k-&gt;ijk',factors_tl[0][:,n],factors_tl[1][:,n],factors_tl[2][:,n]) #     error = np.sum((spike_counts - reconstruction)**2) #     error = error/np.sum(spike_counts**2) #     errors.append(error) # plt.plot(errors) <p>We determine the number of components by looking at the normalized sum-of-squared reconstruction error $\\frac{||x-\\hat{x}||_F^2}{||x||^2_F}$. Or by similarity plot (how sensitive the factors are to the initialization). But we discover that by this metric, we can easily overfit (lots of factors that doesn't make sense).</p> In\u00a0[18]: Copied! <pre># Tensor Component Analysis \nn_components = 4\nfactors_tl = non_negative_parafac(np.array(spike_counts).astype('d'), rank=n_components)\n</pre> # Tensor Component Analysis  n_components = 4 factors_tl = non_negative_parafac(np.array(spike_counts).astype('d'), rank=n_components) <p>TCA decomposes the neural activity tensor into the sum of the outer product of three factors. rank indicates the number of components. A nice review from Williams, Kolda, 2018.</p> <ul> <li>neuronal factor: bar plot</li> <li>temporal factor: line plot</li> <li>trial factor: scatter plot</li> </ul> <p>TODO: try non-negative tucker decomposition</p> <p>http://mlg.postech.ac.kr/~seungjin/publications/cvpr07.pdf http://tensorly.org/stable/modules/generated/tensorly.decomposition.non_negative_tucker.html#tensorly.decomposition.non_negative_tucker</p> <p>and other methods in review</p> <p>Tensor Decompositions and Applications, Kolda 2009</p> In\u00a0[19]: Copied! <pre>stim_components = factors_tl[0]\ntime_components = factors_tl[1]\nneuron_components = factors_tl[2]\n\nfig, axa = plt.subplots(1,3,figsize=(15,5))\n\n# neuronal factor \nfor i in range(n_components):\n    axa[0].bar(range(neuron_components.shape[0]),neuron_components[:,i],label='factor {}'.format(i+1),alpha=0.5);\nfor i in range(n_neuron): # grouped by the visual cortical areas\n    axa[0].fill_between(x=np.linspace(i-1,i,2),\n                        y1=np.zeros(2)+np.min(neuron_components),\n                        y2=np.zeros(2)+np.max(neuron_components),\n                        facecolor=lut[target_area[i]],alpha =0.1);  \naxa[0].set_title('neuronal factor');axa[0].set_xlabel('neuron');axa[0].legend()\n\n# temporal factor\naxa[1].plot(np.linspace(0,stop_time-start_time,n_timepoint),time_components)\naxa[1].legend(['factor {}'.format(i+1) for i in range(n_components)])\naxa[1].set_xlabel('time point');axa[1].set_title('temporal factor')\n\n# trial factor \nif stimulus_type == 'gabors':\n    for i in range(n_components):\n        axa[2].scatter(target_position_color,stim_components[:,i],alpha=0.7,s=0.3,label='factor {}'.format(i+1))\n        axa[2].set_xlabel('stimulus (position)');axa[2].set_title('trial factor');axa[2].legend()\n    stim_components_df = pd.DataFrame(stim_components)\n    stim_components_df = stim_components_df.join(pd.DataFrame({'position':target_position_color}))\n    axa[2].plot(stim_components_df.groupby('position').mean(),Linewidth=2)\nelif stimulus_type in ['static_gratings','drifting_gratings']:\n    for i in range(n_components):\n        axa[2].scatter(target_orientation,stim_components[:,i],alpha=0.7,s=0.3,label='factor {}'.format(i+1))\n        axa[2].set_xlabel('stimulus (orientation)');axa[2].set_title('trial factor');axa[2].legend()\n    stim_components_df = pd.DataFrame(stim_components)\n    stim_components_df = stim_components_df.join(pd.DataFrame({'orientation':target_orientation}))\n    axa[2].plot(stim_components_df.groupby('orientation').mean(),Linewidth=2)    \nelse:\n    for i in range(n_components):\n        axa[2].scatter(target_time,stim_components[:,i],alpha=0.7,s=0.3,label='factor {}'.format(i+1))\n        axa[2].set_xlabel('stimulus (time)');axa[2].set_title('trial factor');axa[2].legend()\n\nplt.show()\n</pre> stim_components = factors_tl[0] time_components = factors_tl[1] neuron_components = factors_tl[2]  fig, axa = plt.subplots(1,3,figsize=(15,5))  # neuronal factor  for i in range(n_components):     axa[0].bar(range(neuron_components.shape[0]),neuron_components[:,i],label='factor {}'.format(i+1),alpha=0.5); for i in range(n_neuron): # grouped by the visual cortical areas     axa[0].fill_between(x=np.linspace(i-1,i,2),                         y1=np.zeros(2)+np.min(neuron_components),                         y2=np.zeros(2)+np.max(neuron_components),                         facecolor=lut[target_area[i]],alpha =0.1);   axa[0].set_title('neuronal factor');axa[0].set_xlabel('neuron');axa[0].legend()  # temporal factor axa[1].plot(np.linspace(0,stop_time-start_time,n_timepoint),time_components) axa[1].legend(['factor {}'.format(i+1) for i in range(n_components)]) axa[1].set_xlabel('time point');axa[1].set_title('temporal factor')  # trial factor  if stimulus_type == 'gabors':     for i in range(n_components):         axa[2].scatter(target_position_color,stim_components[:,i],alpha=0.7,s=0.3,label='factor {}'.format(i+1))         axa[2].set_xlabel('stimulus (position)');axa[2].set_title('trial factor');axa[2].legend()     stim_components_df = pd.DataFrame(stim_components)     stim_components_df = stim_components_df.join(pd.DataFrame({'position':target_position_color}))     axa[2].plot(stim_components_df.groupby('position').mean(),Linewidth=2) elif stimulus_type in ['static_gratings','drifting_gratings']:     for i in range(n_components):         axa[2].scatter(target_orientation,stim_components[:,i],alpha=0.7,s=0.3,label='factor {}'.format(i+1))         axa[2].set_xlabel('stimulus (orientation)');axa[2].set_title('trial factor');axa[2].legend()     stim_components_df = pd.DataFrame(stim_components)     stim_components_df = stim_components_df.join(pd.DataFrame({'orientation':target_orientation}))     axa[2].plot(stim_components_df.groupby('orientation').mean(),Linewidth=2)     else:     for i in range(n_components):         axa[2].scatter(target_time,stim_components[:,i],alpha=0.7,s=0.3,label='factor {}'.format(i+1))         axa[2].set_xlabel('stimulus (time)');axa[2].set_title('trial factor');axa[2].legend()  plt.show() <p>Smooth the temporal factor as template, time warp it, and try to reconstruct the original raster plot.</p> <p>Discovering precise temporal patterns in large-scale neural recordings through robust and interpretable time warping (2019)</p> In\u00a0[20]: Copied! <pre># another way to look at the neuronal factors \ndf1 = pd.DataFrame(neuron_components)\ndf2 = pd.DataFrame({'area':target_area})\ntmp =  pd.concat([df1, df2], axis=1, sort=False)\nfig = tmp.groupby('area').mean().plot(kind='bar',yerr = tmp.groupby('area').std()/10)\n</pre> # another way to look at the neuronal factors  df1 = pd.DataFrame(neuron_components) df2 = pd.DataFrame({'area':target_area}) tmp =  pd.concat([df1, df2], axis=1, sort=False) fig = tmp.groupby('area').mean().plot(kind='bar',yerr = tmp.groupby('area').std()/10) In\u00a0[21]: Copied! <pre># another way to look at the temporal factors by its frequency spectrum (smoothness)\ntime_components_maxEnergyDiff = list()\nfig, axes = plt.subplots(nrows=1, ncols=n_components, figsize=(15, 5))\nfor i in range(n_components):\n    spectrum = axes[i].magnitude_spectrum(time_components[:,i], Fs=n_timepoint/0.2,color='C1',label='dc',Linestyle = '-.')\n    axes[i].plot(spectrum[1][1:],spectrum[0][1:],label='other') # remove the dc \n    time_components_maxEnergyDiff.append(np.max(np.diff(np.sort(spectrum[0][1:]))[-1])) # largest - 2nd largest besides dc\n    axes[i].set_title('Magnitude Spectrum ({:.2f})'.format(time_components_maxEnergyDiff[i]))\n    axes[i].legend()\ntime_components_maxEnergyDiff = np.array(time_components_maxEnergyDiff)\nfig.tight_layout()\nplt.show()\n</pre> # another way to look at the temporal factors by its frequency spectrum (smoothness) time_components_maxEnergyDiff = list() fig, axes = plt.subplots(nrows=1, ncols=n_components, figsize=(15, 5)) for i in range(n_components):     spectrum = axes[i].magnitude_spectrum(time_components[:,i], Fs=n_timepoint/0.2,color='C1',label='dc',Linestyle = '-.')     axes[i].plot(spectrum[1][1:],spectrum[0][1:],label='other') # remove the dc      time_components_maxEnergyDiff.append(np.max(np.diff(np.sort(spectrum[0][1:]))[-1])) # largest - 2nd largest besides dc     axes[i].set_title('Magnitude Spectrum ({:.2f})'.format(time_components_maxEnergyDiff[i]))     axes[i].legend() time_components_maxEnergyDiff = np.array(time_components_maxEnergyDiff) fig.tight_layout() plt.show() In\u00a0[22]: Copied! <pre># calculate the amount of explained variance in tunning curves - RF likeliness  \nstim_components_total_var = stim_components.var(axis=0)\nstim_components_noise_var = stim_components_df.groupby('position').var().mean(axis=0).values\nstim_components_SNR = 100*(stim_components_total_var - stim_components_noise_var)/stim_components_total_var\n\n# another way to look at the mean trial factors as RFs\nfig, axa = plt.subplots(1,n_components,figsize=(15,5))\nmean_RFs = stim_components_df.groupby('position').mean().values\nfor i in range(n_components):\n    mean_RF = mean_RFs[:,i].reshape(9,9)\n    im = axa[i].imshow(mean_RF);axa[i].set_title('mean trial factor {} ({:.2f}%)'.format(i+1, stim_components_SNR[i]))\n    plt.colorbar(im,ax=axa[i],orientation='vertical', pad=0.05, fraction=0.0452)\nplt.tight_layout()\nplt.show()\n</pre> # calculate the amount of explained variance in tunning curves - RF likeliness   stim_components_total_var = stim_components.var(axis=0) stim_components_noise_var = stim_components_df.groupby('position').var().mean(axis=0).values stim_components_SNR = 100*(stim_components_total_var - stim_components_noise_var)/stim_components_total_var  # another way to look at the mean trial factors as RFs fig, axa = plt.subplots(1,n_components,figsize=(15,5)) mean_RFs = stim_components_df.groupby('position').mean().values for i in range(n_components):     mean_RF = mean_RFs[:,i].reshape(9,9)     im = axa[i].imshow(mean_RF);axa[i].set_title('mean trial factor {} ({:.2f}%)'.format(i+1, stim_components_SNR[i]))     plt.colorbar(im,ax=axa[i],orientation='vertical', pad=0.05, fraction=0.0452) plt.tight_layout() plt.show() In\u00a0[23]: Copied! <pre># correlation between trial factor and running speed \nsmooth_running_speed = smooth(target_running_speed,150)\nsmooth_mean_stim_component = smooth(np.mean(stim_components,axis=1),150)\nsmooth_mean_spike_counts = smooth(np.mean(spike_counts,axis=(1,2)),150)\n\nfig, ax1 = plt.subplots()\nax1.set_xlabel('trial')\nax1.set_ylabel('running',c='C0')\nlns1 = ax1.plot(smooth_running_speed,c='C0',label='Running')\n\nax2 = ax1.twinx() \nax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1\nlns2 = ax2.plot(smooth_mean_stim_component,c='C1',label='Trial Component')\n\nax3 = ax1.twinx()  \nlns3 = ax3.plot(smooth_mean_spike_counts,c='C2',label='Mean Response')\nax3.set_yticks([])\n\nrho = pearsonr(smooth_mean_stim_component,smooth_running_speed)[0]\nlns4 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho))\nlns = lns1+lns2+lns3+lns4\nlabs = [l.get_label() for l in lns]\nax1.legend(lns, labs, loc='upper right')\nfig.tight_layout();plt.show()\n# plt.savefig('run_corr_{}.png'.format(area))\n</pre> # correlation between trial factor and running speed  smooth_running_speed = smooth(target_running_speed,150) smooth_mean_stim_component = smooth(np.mean(stim_components,axis=1),150) smooth_mean_spike_counts = smooth(np.mean(spike_counts,axis=(1,2)),150)  fig, ax1 = plt.subplots() ax1.set_xlabel('trial') ax1.set_ylabel('running',c='C0') lns1 = ax1.plot(smooth_running_speed,c='C0',label='Running')  ax2 = ax1.twinx()  ax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1 lns2 = ax2.plot(smooth_mean_stim_component,c='C1',label='Trial Component')  ax3 = ax1.twinx()   lns3 = ax3.plot(smooth_mean_spike_counts,c='C2',label='Mean Response') ax3.set_yticks([])  rho = pearsonr(smooth_mean_stim_component,smooth_running_speed)[0] lns4 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho)) lns = lns1+lns2+lns3+lns4 labs = [l.get_label() for l in lns] ax1.legend(lns, labs, loc='upper right') fig.tight_layout();plt.show() # plt.savefig('run_corr_{}.png'.format(area)) <p>TCA on PSTHs (average over the trials) $X\\in \\mathbb{R}^{N\\times S \\times T}$. Semi-supervised, since we incoporate the stimulus information to group the trials with the same condition.</p> In\u00a0[24]: Copied! <pre>n_components = 10\nfactors_tl = non_negative_parafac(np.array(mean_R).astype('d'), rank=n_components)\nstim_components = factors_tl[1]\ntime_components = factors_tl[2]\nneuron_components = factors_tl[0]\n</pre> n_components = 10 factors_tl = non_negative_parafac(np.array(mean_R).astype('d'), rank=n_components) stim_components = factors_tl[1] time_components = factors_tl[2] neuron_components = factors_tl[0] In\u00a0[25]: Copied! <pre>fig, axa = plt.subplots(1,3,figsize=(15,5))\n# neuronal factor \nfor i in range(n_components):\n    axa[0].bar(range(neuron_components.shape[0]),neuron_components[:,i],label='factor {}'.format(i+1),alpha=0.5);\nfor i in range(n_neuron): # grouped by the visual cortical areas\n    axa[0].fill_between(x=np.linspace(i-1,i,2),\n                        y1=np.zeros(2)+np.min(neuron_components),\n                        y2=np.zeros(2)+np.max(neuron_components),\n                        facecolor=lut[target_area[i]],alpha =0.1);  \naxa[0].set_title('neuronal factor');axa[0].set_xlabel('neuron');axa[0].legend()\n\n# temporal factor\naxa[1].plot(np.linspace(0,stop_time-start_time,n_timepoint),time_components)\naxa[1].legend(['factor {}'.format(i+1) for i in range(n_components)])\naxa[1].set_xlabel('time point');axa[1].set_title('temporal factor')\n\n# trial factor \naxa[2].plot(stim_components)\naxa[2].set_xlabel('stimulus (position)');axa[2].set_title('stimulus factor')\n\nplt.show()\n</pre> fig, axa = plt.subplots(1,3,figsize=(15,5)) # neuronal factor  for i in range(n_components):     axa[0].bar(range(neuron_components.shape[0]),neuron_components[:,i],label='factor {}'.format(i+1),alpha=0.5); for i in range(n_neuron): # grouped by the visual cortical areas     axa[0].fill_between(x=np.linspace(i-1,i,2),                         y1=np.zeros(2)+np.min(neuron_components),                         y2=np.zeros(2)+np.max(neuron_components),                         facecolor=lut[target_area[i]],alpha =0.1);   axa[0].set_title('neuronal factor');axa[0].set_xlabel('neuron');axa[0].legend()  # temporal factor axa[1].plot(np.linspace(0,stop_time-start_time,n_timepoint),time_components) axa[1].legend(['factor {}'.format(i+1) for i in range(n_components)]) axa[1].set_xlabel('time point');axa[1].set_title('temporal factor')  # trial factor  axa[2].plot(stim_components) axa[2].set_xlabel('stimulus (position)');axa[2].set_title('stimulus factor')  plt.show() In\u00a0[26]: Copied! <pre># choose one neuronal factor to investigate\nk = 2\nplt.bar(np.arange(n_neuron),neuron_components[:,k]);plt.show()\n# order the factor\nidx = np.argsort(-neuron_components[:,k])\n# visualize first 3 neurons with the largest neuronal factor \nfor i in range(3):\n    fig, ax = plt.subplots(1,3,figsize=(15,3))\n    ax[0].imshow(np.mean(trial_R[:,idx[i],:,:], axis=0),aspect='auto');ax[0].set_xlabel('time');ax[0].set_ylabel('stim')\n    ax[1].imshow(np.mean(trial_R[:,idx[i],:,:], axis=1),aspect='auto');ax[1].set_xlabel('time');ax[1].set_ylabel('trial')\n    ax[2].imshow(np.mean(trial_R[:,idx[i],:,:], axis=2),aspect='auto');ax[2].set_xlabel('stim');ax[2].set_ylabel('trial')\n    plt.tight_layout();plt.show()\n</pre> # choose one neuronal factor to investigate k = 2 plt.bar(np.arange(n_neuron),neuron_components[:,k]);plt.show() # order the factor idx = np.argsort(-neuron_components[:,k]) # visualize first 3 neurons with the largest neuronal factor  for i in range(3):     fig, ax = plt.subplots(1,3,figsize=(15,3))     ax[0].imshow(np.mean(trial_R[:,idx[i],:,:], axis=0),aspect='auto');ax[0].set_xlabel('time');ax[0].set_ylabel('stim')     ax[1].imshow(np.mean(trial_R[:,idx[i],:,:], axis=1),aspect='auto');ax[1].set_xlabel('time');ax[1].set_ylabel('trial')     ax[2].imshow(np.mean(trial_R[:,idx[i],:,:], axis=2),aspect='auto');ax[2].set_xlabel('stim');ax[2].set_ylabel('trial')     plt.tight_layout();plt.show() In\u00a0[27]: Copied! <pre># another way to look at the neuronal factors \ndf1 = pd.DataFrame(neuron_components)\ndf2 = pd.DataFrame({'area':target_area})\ntmp =  pd.concat([df1, df2], axis=1, sort=False)\nfig = tmp.groupby('area').mean().plot(kind='bar',yerr = tmp.groupby('area').std()/10)\n</pre> # another way to look at the neuronal factors  df1 = pd.DataFrame(neuron_components) df2 = pd.DataFrame({'area':target_area}) tmp =  pd.concat([df1, df2], axis=1, sort=False) fig = tmp.groupby('area').mean().plot(kind='bar',yerr = tmp.groupby('area').std()/10) In\u00a0[28]: Copied! <pre># another way to look at the mean trial factors as RFs\nfig, axa = plt.subplots(1,n_components,figsize=(15,5))\nfor i in range(n_components):\n    mean_RF = stim_components[:,i].reshape(9,9)\n    im = axa[i].imshow(mean_RF);axa[i].set_title('stimulus factor {} '.format(i+1))\n    plt.colorbar(im,ax=axa[i],orientation='vertical', pad=0.05, fraction=0.0452)\nplt.tight_layout()\nplt.show()\n</pre> # another way to look at the mean trial factors as RFs fig, axa = plt.subplots(1,n_components,figsize=(15,5)) for i in range(n_components):     mean_RF = stim_components[:,i].reshape(9,9)     im = axa[i].imshow(mean_RF);axa[i].set_title('stimulus factor {} '.format(i+1))     plt.colorbar(im,ax=axa[i],orientation='vertical', pad=0.05, fraction=0.0452) plt.tight_layout() plt.show() <p>This also reminds us that we should be careful when averaging over the repetitions. The distribution of any other confounding latent variables over the trials should be the same across different conditions. Otherwise, the difference between conditions may come from latent variables that are not of interest. Showing the shuffled images randomly is better than sequentially presenting them.</p> <p>TCA on 4D tensors $X\\in \\mathbb{R}^{K\\times N\\times S \\times T}$</p> In\u00a0[29]: Copied! <pre># # centering the matrix \n# trial_R = trial_R.astype('float')\n# baseline = np.mean(trial_R)\n# trial_R -= baseline\n\n# TCA\nn_components = 10\nfactors_tl = non_negative_parafac(np.array(trial_R).astype('d'), rank=n_components)\nsample_components = factors_tl[0]\nstim_components = factors_tl[2]\ntime_components = factors_tl[3]\nneuron_components = factors_tl[1]\n</pre> # # centering the matrix  # trial_R = trial_R.astype('float') # baseline = np.mean(trial_R) # trial_R -= baseline  # TCA n_components = 10 factors_tl = non_negative_parafac(np.array(trial_R).astype('d'), rank=n_components) sample_components = factors_tl[0] stim_components = factors_tl[2] time_components = factors_tl[3] neuron_components = factors_tl[1] In\u00a0[30]: Copied! <pre># mean factor of original data\nfig,axe = plt.subplots(1,4,figsize=(16,4))\naxe[0].bar(np.arange(n_neuron),np.mean(trial_R,axis=(0,2,3)));axe[0].set_title('neuronal factor')\naxe[1].plot(np.mean(trial_R,axis=(0,1,2)));axe[1].set_title('temporal factor')\naxe[2].plot(np.mean(trial_R,axis=(0,1,3)));axe[2].set_title('stim factor')\naxe[3].plot(np.mean(trial_R,axis=(1,2,3)));axe[3].set_title('trial factor')\n\n# mean factor of reconstructed data \nreconstruction = np.zeros(trial_R.shape)\nfor n in range(n_components):\n    reconstruction += np.einsum('i,j,k,m-&gt;ijkm',factors_tl[0][:,n],factors_tl[1][:,n],factors_tl[2][:,n],factors_tl[3][:,n])\naxe[0].bar(np.arange(n_neuron),-np.mean(reconstruction,axis=(0,2,3)));axe[0].set_title('neuronal factor')\naxe[1].plot(np.mean(reconstruction,axis=(0,1,2)));axe[1].set_title('temporal factor')\naxe[2].plot(np.mean(reconstruction,axis=(0,1,3)));axe[2].set_title('stim factor')\naxe[3].plot(np.mean(reconstruction,axis=(1,2,3)));axe[3].set_title('trial factor')\nplt.tight_layout();plt.show()\n</pre> # mean factor of original data fig,axe = plt.subplots(1,4,figsize=(16,4)) axe[0].bar(np.arange(n_neuron),np.mean(trial_R,axis=(0,2,3)));axe[0].set_title('neuronal factor') axe[1].plot(np.mean(trial_R,axis=(0,1,2)));axe[1].set_title('temporal factor') axe[2].plot(np.mean(trial_R,axis=(0,1,3)));axe[2].set_title('stim factor') axe[3].plot(np.mean(trial_R,axis=(1,2,3)));axe[3].set_title('trial factor')  # mean factor of reconstructed data  reconstruction = np.zeros(trial_R.shape) for n in range(n_components):     reconstruction += np.einsum('i,j,k,m-&gt;ijkm',factors_tl[0][:,n],factors_tl[1][:,n],factors_tl[2][:,n],factors_tl[3][:,n]) axe[0].bar(np.arange(n_neuron),-np.mean(reconstruction,axis=(0,2,3)));axe[0].set_title('neuronal factor') axe[1].plot(np.mean(reconstruction,axis=(0,1,2)));axe[1].set_title('temporal factor') axe[2].plot(np.mean(reconstruction,axis=(0,1,3)));axe[2].set_title('stim factor') axe[3].plot(np.mean(reconstruction,axis=(1,2,3)));axe[3].set_title('trial factor') plt.tight_layout();plt.show() In\u00a0[31]: Copied! <pre>fig, axa = plt.subplots(1,4,figsize=(16,4))\n# neuronal factor \nfor i in range(n_components):\n    axa[0].bar(range(neuron_components.shape[0]),neuron_components[:,i],label='factor {}'.format(i+1),alpha=0.5);\nfor i in range(n_neuron): # grouped by the visual cortical areas\n    axa[0].fill_between(x=np.linspace(i-1,i,2),\n                        y1=np.zeros(2)+np.min(neuron_components),\n                        y2=np.zeros(2)+np.max(neuron_components),\n                        facecolor=lut[target_area[i]],alpha =0.1);  \naxa[0].set_title('neuronal factor');axa[0].set_xlabel('neuron');axa[0].legend()\n\n# temporal factor\naxa[1].plot(np.linspace(0,stop_time-start_time,n_timepoint),time_components)\naxa[1].legend(['factor {}'.format(i+1) for i in range(n_components)])\naxa[1].set_xlabel('time point');axa[1].set_title('temporal factor')\n\n# stimulus factor \naxa[2].plot(stim_components)\naxa[2].set_xlabel('stimulus (position)');axa[2].set_title('stimulus factor')\n\n# trial factor \naxa[3].plot(sample_components)\naxa[3].set_xlabel('trial');axa[3].set_title('trial factor')\n\nplt.savefig('tca4d_{}.png'.format(area))\n</pre> fig, axa = plt.subplots(1,4,figsize=(16,4)) # neuronal factor  for i in range(n_components):     axa[0].bar(range(neuron_components.shape[0]),neuron_components[:,i],label='factor {}'.format(i+1),alpha=0.5); for i in range(n_neuron): # grouped by the visual cortical areas     axa[0].fill_between(x=np.linspace(i-1,i,2),                         y1=np.zeros(2)+np.min(neuron_components),                         y2=np.zeros(2)+np.max(neuron_components),                         facecolor=lut[target_area[i]],alpha =0.1);   axa[0].set_title('neuronal factor');axa[0].set_xlabel('neuron');axa[0].legend()  # temporal factor axa[1].plot(np.linspace(0,stop_time-start_time,n_timepoint),time_components) axa[1].legend(['factor {}'.format(i+1) for i in range(n_components)]) axa[1].set_xlabel('time point');axa[1].set_title('temporal factor')  # stimulus factor  axa[2].plot(stim_components) axa[2].set_xlabel('stimulus (position)');axa[2].set_title('stimulus factor')  # trial factor  axa[3].plot(sample_components) axa[3].set_xlabel('trial');axa[3].set_title('trial factor')  plt.savefig('tca4d_{}.png'.format(area)) In\u00a0[32]: Copied! <pre># first component \nTC_idx = 0\nfig,axe = plt.subplots(1,4,figsize=(16,4))\naxe[0].bar(np.arange(n_neuron),neuron_components[:,TC_idx]);axe[0].set_title('neuronal factor')\naxe[1].plot(time_components[:,TC_idx]);axe[1].set_title('temporal factor')\naxe[2].plot(stim_components[:,TC_idx]);axe[2].set_title('stim factor')\naxe[3].plot(sample_components[:,TC_idx]);axe[3].set_title('trial factor')\nplt.tight_layout();plt.show()\n\n# mean components after removing the first one \nreduce_trial_R = trial_R - np.einsum('i,j,k,m-&gt;ijkm',sample_components[:,0],neuron_components[:,0],stim_components[:,0],time_components[:,0])\nfig,axe = plt.subplots(1,4,figsize=(16,4))\naxe[0].bar(np.arange(n_neuron),np.mean(reduce_trial_R,axis=(0,2,3)));axe[0].set_title('neuronal factor')\naxe[1].plot(np.mean(reduce_trial_R,axis=(0,1,2)));axe[1].set_title('temporal factor')\naxe[2].plot(np.mean(reduce_trial_R,axis=(0,1,3)));axe[2].set_title('stim factor')\naxe[3].plot(np.mean(reduce_trial_R,axis=(1,2,3)));axe[3].set_title('trial factor')\nplt.tight_layout();plt.show()\n</pre> # first component  TC_idx = 0 fig,axe = plt.subplots(1,4,figsize=(16,4)) axe[0].bar(np.arange(n_neuron),neuron_components[:,TC_idx]);axe[0].set_title('neuronal factor') axe[1].plot(time_components[:,TC_idx]);axe[1].set_title('temporal factor') axe[2].plot(stim_components[:,TC_idx]);axe[2].set_title('stim factor') axe[3].plot(sample_components[:,TC_idx]);axe[3].set_title('trial factor') plt.tight_layout();plt.show()  # mean components after removing the first one  reduce_trial_R = trial_R - np.einsum('i,j,k,m-&gt;ijkm',sample_components[:,0],neuron_components[:,0],stim_components[:,0],time_components[:,0]) fig,axe = plt.subplots(1,4,figsize=(16,4)) axe[0].bar(np.arange(n_neuron),np.mean(reduce_trial_R,axis=(0,2,3)));axe[0].set_title('neuronal factor') axe[1].plot(np.mean(reduce_trial_R,axis=(0,1,2)));axe[1].set_title('temporal factor') axe[2].plot(np.mean(reduce_trial_R,axis=(0,1,3)));axe[2].set_title('stim factor') axe[3].plot(np.mean(reduce_trial_R,axis=(1,2,3)));axe[3].set_title('trial factor') plt.tight_layout();plt.show() In\u00a0[33]: Copied! <pre># another way to look at the neuronal factors \ndf1 = pd.DataFrame(neuron_components)\ndf2 = pd.DataFrame({'area':target_area})\ntmp =  pd.concat([df1, df2], axis=1, sort=False)\nfig = tmp.groupby('area').mean().plot(kind='bar',yerr = tmp.groupby('area').std()/10)\nplt.savefig('tca4d_neuron_{}.png'.format(area))\n</pre> # another way to look at the neuronal factors  df1 = pd.DataFrame(neuron_components) df2 = pd.DataFrame({'area':target_area}) tmp =  pd.concat([df1, df2], axis=1, sort=False) fig = tmp.groupby('area').mean().plot(kind='bar',yerr = tmp.groupby('area').std()/10) plt.savefig('tca4d_neuron_{}.png'.format(area)) In\u00a0[34]: Copied! <pre># another way to look at the mean trial factors as RFs\nfig, axa = plt.subplots(1,n_components,figsize=(15,5))\nfor i in range(n_components):\n    mean_RF = stim_components[:,i].reshape(9,9)\n    im = axa[i].imshow(mean_RF);axa[i].set_title('stimulus factor {} '.format(i+1))\n    plt.colorbar(im,ax=axa[i],orientation='vertical', pad=0.05, fraction=0.0452)\nplt.tight_layout()\nplt.savefig('tca4d_stim_{}.png'.format(area))\n</pre> # another way to look at the mean trial factors as RFs fig, axa = plt.subplots(1,n_components,figsize=(15,5)) for i in range(n_components):     mean_RF = stim_components[:,i].reshape(9,9)     im = axa[i].imshow(mean_RF);axa[i].set_title('stimulus factor {} '.format(i+1))     plt.colorbar(im,ax=axa[i],orientation='vertical', pad=0.05, fraction=0.0452) plt.tight_layout() plt.savefig('tca4d_stim_{}.png'.format(area)) In\u00a0[35]: Copied! <pre># running speed dataset\nlocomotion = list()\nfor i in range(81):\n    locomotion.append(target_running_speed[target_position_color == i])\nlocomotion = np.array(locomotion)\nnew_locomotion,_,_ = pca_triplot(locomotion.T, range(45), zscore=True, show_plot=False) # PCA \nlocomotion_PC = new_locomotion[:,0] # projection onto 1st PC\n# locomotion_PC = np.nanmean(locomotion,axis=0) # projection onto 1st PC is approximately the same as empirical mean\n\nplt.imshow(locomotion);plt.colorbar()\nplt.title('Running Speed');\nplt.xlabel('trial');plt.ylabel('stimulus')\nplt.show()\n</pre> # running speed dataset locomotion = list() for i in range(81):     locomotion.append(target_running_speed[target_position_color == i]) locomotion = np.array(locomotion) new_locomotion,_,_ = pca_triplot(locomotion.T, range(45), zscore=True, show_plot=False) # PCA  locomotion_PC = new_locomotion[:,0] # projection onto 1st PC # locomotion_PC = np.nanmean(locomotion,axis=0) # projection onto 1st PC is approximately the same as empirical mean  plt.imshow(locomotion);plt.colorbar() plt.title('Running Speed'); plt.xlabel('trial');plt.ylabel('stimulus') plt.show() <pre>/home/jinkel/anaconda3/envs/allen/lib/python3.7/site-packages/ipykernel_launcher.py:26: RuntimeWarning: divide by zero encountered in log\n</pre> In\u00a0[36]: Copied! <pre># pupil diameter dataset\narousal = list()\nfor i in range(81):\n    arousal.append(target_pupil_width[target_position_color == i])\narousal = np.array(arousal)\n# new_arousal,_,_ = pca_triplot(arousal.T, range(45), zscore=True, show_plot=False) # PCA \n# arousal_PC = new_arousal[:,0] # projection onto 1st PC\narousal_PC = np.nanmean(arousal,axis=0) # projection onto 1st PC is approximately the same as empirical mean\n\nplt.imshow(arousal);plt.colorbar()\nplt.title('Pupil Diameter');\nplt.xlabel('trial');plt.ylabel('stimulus')\nplt.show()\n</pre> # pupil diameter dataset arousal = list() for i in range(81):     arousal.append(target_pupil_width[target_position_color == i]) arousal = np.array(arousal) # new_arousal,_,_ = pca_triplot(arousal.T, range(45), zscore=True, show_plot=False) # PCA  # arousal_PC = new_arousal[:,0] # projection onto 1st PC arousal_PC = np.nanmean(arousal,axis=0) # projection onto 1st PC is approximately the same as empirical mean  plt.imshow(arousal);plt.colorbar() plt.title('Pupil Diameter'); plt.xlabel('trial');plt.ylabel('stimulus') plt.show() <p>strong correlation between behavioral PC and one of visual TC</p> In\u00a0[37]: Copied! <pre>TC_idx = 2 # eyeballing to find the most similar TC\nfig,axe = plt.subplots(1,4,figsize=(16,4))\naxe[0].bar(np.arange(n_neuron),neuron_components[:,TC_idx]);axe[0].set_title('neuronal factor')\naxe[1].plot(time_components[:,TC_idx]);axe[1].set_title('temporal factor')\naxe[2].plot(stim_components[:,TC_idx]);axe[2].set_title('stim factor')\naxe[3].plot(sample_components[:,TC_idx]);axe[3].set_title('trial factor')\nplt.tight_layout();plt.show()\n\n# correlation between locomotion PC and visual TC\nfig, ax1 = plt.subplots()\nax1.set_xlabel('repetition')\nax1.set_ylabel('PC',c='C0')\nlns1 = ax1.plot(locomotion_PC,c='C0',label='Principal Component of Running Speed')\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1\nlns2 = ax2.plot(sample_components[:,TC_idx],c='C1',label='Trial Component of {} Response'.format(area))\nrho = pearsonr(sample_components[:,TC_idx],locomotion_PC)[0]\nlns3 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho))\nlns = lns1+lns2+lns3\nlabs = [l.get_label() for l in lns]\nax1.legend(lns, labs, loc='upper right')\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.savefig('run_corr_{}.png'.format(area))\n\n# correlation between pupil PC and visual TC\nfig, ax1 = plt.subplots()\nax1.set_xlabel('repetition')\nax1.set_ylabel('PC',c='C0')\nlns1 = ax1.plot(arousal_PC,c='C0',label='Principal Component of Pupil Diameter')\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1\nlns2 = ax2.plot(sample_components[:,TC_idx],c='C1',label='Trial Component of {} Response'.format(area))\nrho = pearsonr(sample_components[:,TC_idx],arousal_PC)[0]\nlns3 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho))\nlns = lns1+lns2+lns3\nlabs = [l.get_label() for l in lns]\nax1.legend(lns, labs, loc='upper right')\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.savefig('pupil_corr_{}.png'.format(area))\n</pre> TC_idx = 2 # eyeballing to find the most similar TC fig,axe = plt.subplots(1,4,figsize=(16,4)) axe[0].bar(np.arange(n_neuron),neuron_components[:,TC_idx]);axe[0].set_title('neuronal factor') axe[1].plot(time_components[:,TC_idx]);axe[1].set_title('temporal factor') axe[2].plot(stim_components[:,TC_idx]);axe[2].set_title('stim factor') axe[3].plot(sample_components[:,TC_idx]);axe[3].set_title('trial factor') plt.tight_layout();plt.show()  # correlation between locomotion PC and visual TC fig, ax1 = plt.subplots() ax1.set_xlabel('repetition') ax1.set_ylabel('PC',c='C0') lns1 = ax1.plot(locomotion_PC,c='C0',label='Principal Component of Running Speed') ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis ax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1 lns2 = ax2.plot(sample_components[:,TC_idx],c='C1',label='Trial Component of {} Response'.format(area)) rho = pearsonr(sample_components[:,TC_idx],locomotion_PC)[0] lns3 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho)) lns = lns1+lns2+lns3 labs = [l.get_label() for l in lns] ax1.legend(lns, labs, loc='upper right') fig.tight_layout()  # otherwise the right y-label is slightly clipped plt.savefig('run_corr_{}.png'.format(area))  # correlation between pupil PC and visual TC fig, ax1 = plt.subplots() ax1.set_xlabel('repetition') ax1.set_ylabel('PC',c='C0') lns1 = ax1.plot(arousal_PC,c='C0',label='Principal Component of Pupil Diameter') ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis ax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1 lns2 = ax2.plot(sample_components[:,TC_idx],c='C1',label='Trial Component of {} Response'.format(area)) rho = pearsonr(sample_components[:,TC_idx],arousal_PC)[0] lns3 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho)) lns = lns1+lns2+lns3 labs = [l.get_label() for l in lns] ax1.legend(lns, labs, loc='upper right') fig.tight_layout()  # otherwise the right y-label is slightly clipped plt.savefig('pupil_corr_{}.png'.format(area)) In\u00a0[38]: Copied! <pre># Linear Regression TC=\\alpha PC1 + \\beta PC2\nX = np.array([locomotion_PC,arousal_PC])\nweights = np.matmul(np.linalg.inv(np.matmul(X,X.T)),np.matmul(X,sample_components[:,TC_idx]))\n\n# correlation between PCs and TC\nfig, ax1 = plt.subplots()\nax1.set_xlabel('repetition')\nax1.set_ylabel('locomotion PC + arousal PC',c='C0')\nlns1 = ax1.plot(np.matmul(weights,X).T,c='C0',label='Principal Components of Behavior')\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1\nlns2 = ax2.plot(sample_components[:,TC_idx],c='C1',label='Trial Component of Visual Response')\nrho = pearsonr(sample_components[:,TC_idx],locomotion_PC)[0]\nlns3 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho))\nlns = lns1+lns2+lns3\nlabs = [l.get_label() for l in lns]\nax1.legend(lns, labs, loc='upper right')\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.show()\n</pre> # Linear Regression TC=\\alpha PC1 + \\beta PC2 X = np.array([locomotion_PC,arousal_PC]) weights = np.matmul(np.linalg.inv(np.matmul(X,X.T)),np.matmul(X,sample_components[:,TC_idx]))  # correlation between PCs and TC fig, ax1 = plt.subplots() ax1.set_xlabel('repetition') ax1.set_ylabel('locomotion PC + arousal PC',c='C0') lns1 = ax1.plot(np.matmul(weights,X).T,c='C0',label='Principal Components of Behavior') ax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis ax2.set_ylabel('TC',c='C1')  # we already handled the x-label with ax1 lns2 = ax2.plot(sample_components[:,TC_idx],c='C1',label='Trial Component of Visual Response') rho = pearsonr(sample_components[:,TC_idx],locomotion_PC)[0] lns3 = ax1.plot([], [], ' ', label='corr coef: {0:.2f}'.format(rho)) lns = lns1+lns2+lns3 labs = [l.get_label() for l in lns] ax1.legend(lns, labs, loc='upper right') fig.tight_layout()  # otherwise the right y-label is slightly clipped plt.show() In\u00a0[39]: Copied! <pre># cross correlation shows a lag of 1 trial \ncc = np.correlate(sample_components[:,TC_idx],locomotion_PC,'full')\nplt.plot(cc);plt.scatter(np.argmax(cc),cc[np.argmax(cc)]);\nplt.text(np.argmax(cc),cc[np.argmax(cc)]+10,str(np.argmax(cc)))\n\ncc = np.correlate(sample_components[:,TC_idx],arousal_PC,'full')\nplt.plot(cc);plt.scatter(np.argmax(cc),cc[np.argmax(cc)]);\nplt.text(np.argmax(cc),cc[np.argmax(cc)]+10,str(np.argmax(cc)));plt.show()\n</pre> # cross correlation shows a lag of 1 trial  cc = np.correlate(sample_components[:,TC_idx],locomotion_PC,'full') plt.plot(cc);plt.scatter(np.argmax(cc),cc[np.argmax(cc)]); plt.text(np.argmax(cc),cc[np.argmax(cc)]+10,str(np.argmax(cc)))  cc = np.correlate(sample_components[:,TC_idx],arousal_PC,'full') plt.plot(cc);plt.scatter(np.argmax(cc),cc[np.argmax(cc)]); plt.text(np.argmax(cc),cc[np.argmax(cc)]+10,str(np.argmax(cc)));plt.show() In\u00a0[40]: Copied! <pre># granger causality \nfrom statsmodels.tsa.stattools import grangercausalitytests\n'''\nall test results, dictionary keys are the number of lags. \nFor each lag the values are a tuple, with the first element \na dictionary with teststatistic, pvalues, degrees of freedom, \nthe second element are the OLS estimation results for the \nrestricted model, the unrestricted model and the restriction \n(contrast) matrix for the parameter f_test.\n'''\n\nneural2run = np.array([locomotion_PC,sample_components[:,TC_idx]]).T\nrun2neural = np.array([sample_components[:,TC_idx],locomotion_PC]).T\nneural2pupil = np.array([arousal_PC,sample_components[:,TC_idx]]).T\npupil2neural = np.array([sample_components[:,TC_idx],arousal_PC]).T\n\nprint(\"neural causes running\",grangercausalitytests(neural2run, 5, addconst=True, verbose=False)[1],'\\n')\nprint(\"running causes neural\",grangercausalitytests(run2neural, 5, addconst=True, verbose=False)[1],'\\n')\nprint(\"neural causes pupil\",grangercausalitytests(neural2pupil, 5, addconst=True, verbose=False)[1],'\\n')\nprint(\"pupil causes neural\",grangercausalitytests(pupil2neural, 5, addconst=True, verbose=False)[1],'\\n')\n</pre> # granger causality  from statsmodels.tsa.stattools import grangercausalitytests ''' all test results, dictionary keys are the number of lags.  For each lag the values are a tuple, with the first element  a dictionary with teststatistic, pvalues, degrees of freedom,  the second element are the OLS estimation results for the  restricted model, the unrestricted model and the restriction  (contrast) matrix for the parameter f_test. '''  neural2run = np.array([locomotion_PC,sample_components[:,TC_idx]]).T run2neural = np.array([sample_components[:,TC_idx],locomotion_PC]).T neural2pupil = np.array([arousal_PC,sample_components[:,TC_idx]]).T pupil2neural = np.array([sample_components[:,TC_idx],arousal_PC]).T  print(\"neural causes running\",grangercausalitytests(neural2run, 5, addconst=True, verbose=False)[1],'\\n') print(\"running causes neural\",grangercausalitytests(run2neural, 5, addconst=True, verbose=False)[1],'\\n') print(\"neural causes pupil\",grangercausalitytests(neural2pupil, 5, addconst=True, verbose=False)[1],'\\n') print(\"pupil causes neural\",grangercausalitytests(pupil2neural, 5, addconst=True, verbose=False)[1],'\\n')  <pre>neural causes running ({'ssr_ftest': (5.029481682267714, 0.030388643675895274, 41.0, 1), 'ssr_chi2test': (5.397492537067791, 0.0201657033332843, 1), 'lrtest': (5.091241347650254, 0.02404697282373468, 1), 'params_ftest': (5.029481682267701, 0.030388643675895555, 41.0, 1.0)}, [&lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84eb096c90&gt;, &lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84e9a762d0&gt;, array([[0., 1., 0.]])]) \n\nrunning causes neural ({'ssr_ftest': (0.07618960960359655, 0.7839157130216101, 41.0, 1), 'ssr_chi2test': (0.08176445908678655, 0.7749203594056085, 1), 'lrtest': (0.0816885823138449, 0.7750220055094448, 1), 'params_ftest': (0.07618960960361452, 0.7839157130215848, 41.0, 1.0)}, [&lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84ed44ca90&gt;, &lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84e9a76250&gt;, array([[0., 1., 0.]])]) \n\nneural causes pupil ({'ssr_ftest': (0.23411832808173547, 0.6310612551768022, 41.0, 1), 'ssr_chi2test': (0.2512489374535698, 0.6161970319767396, 1), 'lrtest': (0.2505343153541162, 0.6166991006580991, 1), 'params_ftest': (0.2341183280816783, 0.6310612551768457, 41.0, 1.0)}, [&lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84eb096c90&gt;, &lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84ed492e90&gt;, array([[0., 1., 0.]])]) \n\npupil causes neural ({'ssr_ftest': (0.00478790142206396, 0.945171053311284, 41.0, 1), 'ssr_chi2test': (0.005138235672458884, 0.942855388969568, 1), 'lrtest': (0.005137935679144334, 0.9428570543185285, 1), 'params_ftest': (0.004787901422073192, 0.945171053311258, 41.0, 1.0)}, [&lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84ed44ca90&gt;, &lt;statsmodels.regression.linear_model.RegressionResultsWrapper object at 0x7f84e993f790&gt;, array([[0., 1., 0.]])]) \n\n</pre> <pre>/home/jinkel/anaconda3/envs/allen/lib/python3.7/site-packages/statsmodels/compat/pandas.py:49: FutureWarning: The Panel class is removed from pandas. Accessing it from the top-level namespace will also be removed in the next version\n  data_klasses = (pandas.Series, pandas.DataFrame, pandas.Panel)\n</pre> <p>In this example, the projection onto 1st behavioral component (PC) of running data is strongly correlated with one of the trial factors (TC) on visual data ($\\rho \\simeq 0.8$), which may suggest that the 7th component is encoding the running speed of the mouse (Notice that the autocorrelation histogram shows that TC is one trial lagging behind, indicating running PC is causal to visual component). It also implies that singel-trial variance can be largely explained by behavior/movement of the animal.</p>"},{"location":"notebooks/TCA_test/#tensor-component-analysis","title":"Tensor Component Analysis\u00b6","text":""},{"location":"notebooks/TCA_test/#load-data-tensor-representation-of-neural-response","title":"Load Data: Tensor Representation of Neural Response\u00b6","text":""},{"location":"notebooks/TCA_test/#tensor-component-analysis","title":"Tensor Component Analysis\u00b6","text":"<p>spike_counts $X\\in \\mathbb{R}^{KS\\times T\\times N}$.</p>"},{"location":"notebooks/Untitled/","title":"Untitled","text":""},{"location":"notebooks/clustering_performance/","title":"Clustering performance","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>from sklearn.manifold import TSNE\n</pre> from sklearn.manifold import TSNE In\u00a0[3]: Copied! <pre>from sklearn.metrics import adjusted_rand_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\n</pre> from sklearn.metrics import adjusted_rand_score from sklearn.cluster import KMeans from sklearn.mixture import GaussianMixture In\u00a0[4]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.proc.distances.spike_metrics import pairwise_spike_distance\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.proc.distances.spike_metrics import pairwise_spike_distance <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numba/core/decorators.py:232: RuntimeWarning: nopython is set for njit and is ignored\n  warnings.warn('nopython is set for njit and is ignored', RuntimeWarning)\n</pre> <pre>\n---------------------------------------------------------------------------\nModuleNotFoundError                       Traceback (most recent call last)\n&lt;ipython-input-4-79b6dea168a9&gt; in &lt;module&gt;\n      1 import sys\n      2 sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n----&gt; 3 from spyketools.proc.distances.spike_metrics import pairwise_spike_distance\n\nModuleNotFoundError: No module named 'spyketools.proc'</pre> In\u00a0[5]: Copied! <pre>spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\nstim_label     = np.load(\"demo_dataset_allen/stim_label.npy\")\n</pre> spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\") ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\") stim_label     = np.load(\"demo_dataset_allen/stim_label.npy\") In\u00a0[6]: Copied! <pre>ii_spike_times = ii_spike_times[:,:100,:]\n</pre> ii_spike_times = ii_spike_times[:,:100,:] In\u00a0[7]: Copied! <pre>%%time\nFRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={'cost' : 0})\n</pre> %%time FRz = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={'cost' : 0}) <pre>CPU times: user 2.73 s, sys: 18.5 ms, total: 2.75 s\nWall time: 2.76 s\n</pre> In\u00a0[8]: Copied! <pre>np.fill_diagonal(FRz, np.nan)\n</pre> np.fill_diagonal(FRz, np.nan) In\u00a0[9]: Copied! <pre>plt.figure(figsize=(5,4), facecolor='w')\nplt.imshow(FRz / ii_spike_times.shape[1], cmap='viridis')\nplt.colorbar(label=\"VP distance (q=0)\")\nplt.xlabel(\"Epoch\");\nplt.ylabel(\"Epoch\");\n</pre> plt.figure(figsize=(5,4), facecolor='w') plt.imshow(FRz / ii_spike_times.shape[1], cmap='viridis') plt.colorbar(label=\"VP distance (q=0)\") plt.xlabel(\"Epoch\"); plt.ylabel(\"Epoch\"); In\u00a0[10]: Copied! <pre>l_cost = [10e-2, 10e-1, 1, 10e1, 10e2, 10e3]\n</pre> l_cost = [10e-2, 10e-1, 1, 10e1, 10e2, 10e3] In\u00a0[11]: Copied! <pre>print (\"Running VP distance for:\")\nl_VP_matrices = [] \nfor i in range(len(l_cost)):\n    cost = l_cost[i]\n    print (\"\\t q = %s\" % cost)\n    tmp_matrix = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={'cost' : cost})\n    l_VP_matrices.append(tmp_matrix.copy())\n</pre> print (\"Running VP distance for:\") l_VP_matrices = []  for i in range(len(l_cost)):     cost = l_cost[i]     print (\"\\t q = %s\" % cost)     tmp_matrix = pairwise_spike_distance(spike_times, ii_spike_times, metric='victor_purpura', attrs={'cost' : cost})     l_VP_matrices.append(tmp_matrix.copy()) <pre>Running VP distance for:\n\t q = 0.1\n\t q = 1.0\n\t q = 1\n\t q = 100.0\n\t q = 1000.0\n\t q = 10000.0\n</pre> In\u00a0[12]: Copied! <pre>perplexity = 70.\n</pre> perplexity = 70. In\u00a0[13]: Copied! <pre>%%time\nprint (\"Computing 2D t-SNE embedding for:\")\nl_embs = []\nfor i in range(len(l_cost)):\n    tmp_matrix = l_VP_matrices[i]\n    print (\"\\t q = %s\" % l_cost[i])\n    tmp_emb    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(tmp_matrix)\n    l_embs.append( tmp_emb.copy() )\n</pre> %%time print (\"Computing 2D t-SNE embedding for:\") l_embs = [] for i in range(len(l_cost)):     tmp_matrix = l_VP_matrices[i]     print (\"\\t q = %s\" % l_cost[i])     tmp_emb    = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(tmp_matrix)     l_embs.append( tmp_emb.copy() ) <pre>Computing 2D t-SNE embedding for:\n\t q = 0.1\n\t q = 1.0\n\t q = 1\n\t q = 100.0\n\t q = 1000.0\n\t q = 10000.0\nCPU times: user 5.59 s, sys: 9.99 ms, total: 5.6 s\nWall time: 5.62 s\n</pre> In\u00a0[14]: Copied! <pre>fig, axs = plt.subplots(figsize=(3*len(l_embs), 3*2), facecolor='w', nrows=2, ncols=len(l_embs))\ns=20\nfor i in range(len(l_embs)):\n    temp_matrix = l_VP_matrices[i].copy()\n    #print (temp_matrix.shape)\n    # print (np.max(temp_matrix))\n    #temp_matrix = np.fill_diagonal(temp_matrix, np.max(temp_matrix))\n    axs[0][i].imshow(temp_matrix)\n    axs[1][i].scatter(l_embs[i][:,0], l_embs[i][:,1], c=stim_label, cmap='viridis', s=s)\n    \n    axs[0][i].set_xticks([]); axs[0][i].set_yticks([]); \n    axs[1][i].set_xticks([]); axs[1][i].set_yticks([]); \n    \n    axs[0][i].axis('off')\n    axs[1][i].axis('off')\n</pre> fig, axs = plt.subplots(figsize=(3*len(l_embs), 3*2), facecolor='w', nrows=2, ncols=len(l_embs)) s=20 for i in range(len(l_embs)):     temp_matrix = l_VP_matrices[i].copy()     #print (temp_matrix.shape)     # print (np.max(temp_matrix))     #temp_matrix = np.fill_diagonal(temp_matrix, np.max(temp_matrix))     axs[0][i].imshow(temp_matrix)     axs[1][i].scatter(l_embs[i][:,0], l_embs[i][:,1], c=stim_label, cmap='viridis', s=s)          axs[0][i].set_xticks([]); axs[0][i].set_yticks([]);      axs[1][i].set_xticks([]); axs[1][i].set_yticks([]);           axs[0][i].axis('off')     axs[1][i].axis('off') In\u00a0[15]: Copied! <pre>l_ARI_score = []\n\nfor i in range(len(l_embs)):\n    temp_clusters = KMeans(n_clusters=2, random_state=0).fit_predict(l_embs[i])\n    #temp_clusters = GaussianMixture(n_components=4, random_state=0).fit(l_embs[i])\n    ARI_val = adjusted_rand_score(temp_clusters, stim_label)\n    l_ARI_score.append(ARI_val)\n</pre> l_ARI_score = []  for i in range(len(l_embs)):     temp_clusters = KMeans(n_clusters=2, random_state=0).fit_predict(l_embs[i])     #temp_clusters = GaussianMixture(n_components=4, random_state=0).fit(l_embs[i])     ARI_val = adjusted_rand_score(temp_clusters, stim_label)     l_ARI_score.append(ARI_val) In\u00a0[16]: Copied! <pre>fig, axs = plt.subplots(figsize=(6,3), facecolor='w')\naxs.plot(l_ARI_score, marker='o', ms=7, color='k', lw=2)\naxs.set_xlabel(\"q (cost)\")\naxs.set_ylabel(\"ARI score (KMeans)\")\naxs.set_xticks(range(len(l_embs)))\naxs.set_xticklabels(np.log10(l_cost))\naxs.set_xlim([0, len(l_cost)-1])\n</pre> fig, axs = plt.subplots(figsize=(6,3), facecolor='w') axs.plot(l_ARI_score, marker='o', ms=7, color='k', lw=2) axs.set_xlabel(\"q (cost)\") axs.set_ylabel(\"ARI score (KMeans)\") axs.set_xticks(range(len(l_embs))) axs.set_xticklabels(np.log10(l_cost)) axs.set_xlim([0, len(l_cost)-1]) Out[16]: <pre>(0.0, 5.0)</pre>"},{"location":"notebooks/single_neuron_distances/","title":"Single Neuron distances","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport sys; sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import numpy as np import sys; sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[2]: Copied! <pre>%load_ext autoreload\nfrom spyketools.proc.distances.spikeship import spikeship_distance_single\nfrom spyketools.proc.distances.SPIKE_distance import SPIKE_distance_single\nfrom spyketools.proc.distances.spike_metrics import pairwise_spike_distance\nfrom spyketools.proc.distances.SPIKE_distance import SPIKE_distance_single\nfrom spyketools.proc.distances.RISPIKE_distance import RISPIKE_distance_single\nfrom spyketools.proc.distances.victor_purpura_distance import VP_distance_single\nfrom spyketools.proc.distances.ISI_distance import ISI_distance_single\n%autoreload 2\n</pre> %load_ext autoreload from spyketools.proc.distances.spikeship import spikeship_distance_single from spyketools.proc.distances.SPIKE_distance import SPIKE_distance_single from spyketools.proc.distances.spike_metrics import pairwise_spike_distance from spyketools.proc.distances.SPIKE_distance import SPIKE_distance_single from spyketools.proc.distances.RISPIKE_distance import RISPIKE_distance_single from spyketools.proc.distances.victor_purpura_distance import VP_distance_single from spyketools.proc.distances.ISI_distance import ISI_distance_single %autoreload 2 <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numba/core/decorators.py:232: RuntimeWarning: nopython is set for njit and is ignored\n  warnings.warn('nopython is set for njit and is ignored', RuntimeWarning)\n</pre> In\u00a0[3]: Copied! <pre># creating random data\nfiring_rate = 20 # num. of spikes per sec\nspike_train_i = np.random.randint(1000, size=firing_rate)/1000.\nspike_train_j = np.random.randint(1000, size=firing_rate)/1000.\n</pre> # creating random data firing_rate = 20 # num. of spikes per sec spike_train_i = np.random.randint(1000, size=firing_rate)/1000. spike_train_j = np.random.randint(1000, size=firing_rate)/1000. In\u00a0[4]: Copied! <pre>%%time\nspikeship_distance_single(t1=spike_train_i, t2=spike_train_j)\n</pre> %%time spikeship_distance_single(t1=spike_train_i, t2=spike_train_j) <pre>CPU times: user 8.62 ms, sys: 1.75 ms, total: 10.4 ms\nWall time: 9.86 ms\n</pre> Out[4]: <pre>0.24915</pre> In\u00a0[5]: Copied! <pre>%%time\nSPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1)\n</pre> %%time SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1) <pre>CPU times: user 3.43 s, sys: 18 ms, total: 3.44 s\nWall time: 3.45 s\n</pre> Out[5]: <pre>68914.07819943024</pre> In\u00a0[6]: Copied! <pre>%%time\nRISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1)\n</pre> %%time RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1) <pre>CPU times: user 1.81 s, sys: 7.29 ms, total: 1.82 s\nWall time: 1.82 s\n</pre> Out[6]: <pre>106.68410755071635</pre> In\u00a0[7]: Copied! <pre>%%time\nVP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=firing_rate)\n</pre> %%time VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=firing_rate) <pre>CPU times: user 1.5 s, sys: 130 \u00b5s, total: 1.5 s\nWall time: 1.51 s\n</pre> Out[7]: <pre>14.620000000000001</pre> In\u00a0[8]: Copied! <pre>%%time\nISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1)\n</pre> %%time ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1) <pre>CPU times: user 917 ms, sys: 2.06 ms, total: 919 ms\nWall time: 921 ms\n</pre> Out[8]: <pre>0.19437331398767854</pre> <p>For this example, we will consider SPIKE distance. To run any distance from SpykeTools, we set the value of the parameter <code>mode = 'py'</code>.</p> In\u00a0[9]: Copied! <pre>from time import time\n</pre> from time import time In\u00a0[10]: Copied! <pre>exec_time = time()\nSPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')\nexec_time = time() - exec_time\nprint (\"Exec. time = %.6f\" % exec_time)\n</pre> exec_time = time() SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py') exec_time = time() - exec_time print (\"Exec. time = %.6f\" % exec_time) <pre>Exec. time = 0.000823\n</pre> In\u00a0[11]: Copied! <pre>exec_time = time()\nSPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')\nexec_time = time() - exec_time\nprint (\"Exec. time = %.6f\" % exec_time)\n</pre> exec_time = time() SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit') exec_time = time() - exec_time print (\"Exec. time = %.6f\" % exec_time) <pre>Exec. time = 0.000077\n</pre> In\u00a0[12]: Copied! <pre>n_repetitions = 1000\ntotal_exec_time_py   = 0.\ntotal_exec_time_njit = 0.\nfor i in range(n_repetitions):\n    spike_train_i = np.random.randint(1000, size=firing_rate)/1000.\n    spike_train_j = np.random.randint(1000, size=firing_rate)/1000.\n    \n    exec_time = time()\n    SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')\n    exec_time = time() - exec_time\n    total_exec_time_py += exec_time\n    \n    exec_time = time()\n    SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')\n    exec_time = time() - exec_time\n    total_exec_time_njit += exec_time\n    \ntotal_exec_time_py   /= n_repetitions\ntotal_exec_time_njit /= n_repetitions\n</pre> n_repetitions = 1000 total_exec_time_py   = 0. total_exec_time_njit = 0. for i in range(n_repetitions):     spike_train_i = np.random.randint(1000, size=firing_rate)/1000.     spike_train_j = np.random.randint(1000, size=firing_rate)/1000.          exec_time = time()     SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')     exec_time = time() - exec_time     total_exec_time_py += exec_time          exec_time = time()     SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')     exec_time = time() - exec_time     total_exec_time_njit += exec_time      total_exec_time_py   /= n_repetitions total_exec_time_njit /= n_repetitions In\u00a0[13]: Copied! <pre>print (\"Exec. time = %.8f sec (python + numpy)  \" % total_exec_time_py)\nprint (\"Exec. time = %.8f sec (   compiled   )\" % total_exec_time_njit)\nprint (\"%.3f times faster! (%i repetitions)\" % (total_exec_time_py/total_exec_time_njit, n_repetitions))\n</pre> print (\"Exec. time = %.8f sec (python + numpy)  \" % total_exec_time_py) print (\"Exec. time = %.8f sec (   compiled   )\" % total_exec_time_njit) print (\"%.3f times faster! (%i repetitions)\" % (total_exec_time_py/total_exec_time_njit, n_repetitions)) <pre>Exec. time = 0.00056659 sec (python + numpy)  \nExec. time = 0.00000471 sec (   compiled   )\n120.181 times faster! (1000 repetitions)\n</pre> <p>Note: By default, <code>mode = 'njit'</code> which correspond to \"no-python\" mode of Numba's Just-In-Time compilation).</p>"},{"location":"notebooks/single_neuron_distances/#1-computation-of-distances-between-two-spike-trains","title":"1. Computation of distances between two spike trains\u00b6","text":""},{"location":"notebooks/single_neuron_distances/#2-execution-time-difference-between-pythonnumpy-and-numba-implementations","title":"2. Execution time difference between Python+NumPy and Numba implementations\u00b6","text":""},{"location":"notebooks/test_clustering_performance/","title":"Test clustering performance","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[2]: Copied! <pre>from sklearn.manifold import TSNE\n</pre> from sklearn.manifold import TSNE In\u00a0[3]: Copied! <pre>from sklearn.metrics import adjusted_rand_score\nfrom sklearn.cluster import KMeans\nfrom sklearn.mixture import GaussianMixture\nfrom sklearn.metrics import silhouette_score\n</pre> from sklearn.metrics import adjusted_rand_score from sklearn.cluster import KMeans from sklearn.mixture import GaussianMixture from sklearn.metrics import silhouette_score In\u00a0[4]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.distances.victor_purpura import VP_pairwise_distances\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.distances.victor_purpura import VP_pairwise_distances  <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numba/core/decorators.py:232: RuntimeWarning: nopython is set for njit and is ignored\n  warnings.warn('nopython is set for njit and is ignored', RuntimeWarning)\n</pre> In\u00a0[5]: Copied! <pre># reading example data\nspike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\nstim_label     = np.load(\"demo_dataset_allen/stim_label.npy\")\n</pre> # reading example data spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\") ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\") stim_label     = np.load(\"demo_dataset_allen/stim_label.npy\") In\u00a0[6]: Copied! <pre># computation of pairwise distances\nVP = VP_pairwise_distances(spike_times, ii_spike_times, cost=1.5)\n</pre> # computation of pairwise distances VP = VP_pairwise_distances(spike_times, ii_spike_times, cost=1.5) In\u00a0[7]: Copied! <pre>plt.imshow(VP, cmap='PuBu')\n</pre> plt.imshow(VP, cmap='PuBu') Out[7]: <pre>&lt;matplotlib.image.AxesImage at 0x7f6fd22e2668&gt;</pre> In\u00a0[8]: Copied! <pre>perplexity = 30\n</pre> perplexity = 30 In\u00a0[9]: Copied! <pre>emb = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP)\n</pre> emb = TSNE(metric='precomputed', n_components=2, random_state=0, perplexity=perplexity).fit_transform(VP) In\u00a0[16]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[10]: Copied! <pre>plt.figure(figsize=(5,5), facecolor='w')\nplt.scatter(emb[:,0], emb[:,1])\n</pre> plt.figure(figsize=(5,5), facecolor='w') plt.scatter(emb[:,0], emb[:,1]) Out[10]: <pre>&lt;matplotlib.collections.PathCollection at 0x7f6fcfb76048&gt;</pre> In\u00a0[11]: Copied! <pre>plt.figure(figsize=(5,5), facecolor='w')\nplt.scatter(emb[:,0], emb[:,1], c=stim_label)\n</pre> plt.figure(figsize=(5,5), facecolor='w') plt.scatter(emb[:,0], emb[:,1], c=stim_label) Out[11]: <pre>&lt;matplotlib.collections.PathCollection at 0x7f6fcfae19b0&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[12]: Copied! <pre>adjusted_rand_score\n</pre> adjusted_rand_score Out[12]: <pre>&lt;function sklearn.metrics.cluster.supervised.adjusted_rand_score(labels_true, labels_pred)&gt;</pre> <p>[Hubert1985] L. Hubert and P. Arabie, Comparing Partitions, Journal of Classification 1985 https://link.springer.com/article/10.1007%2FBF01908075</p> <p>[Steinley2004] D. Steinley, Properties of the Hubert-Arabie adjusted Rand index, Psychological Methods 2004</p> In\u00a0[13]: Copied! <pre>import hdbscan\n</pre> import hdbscan In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[129]: Copied! <pre>def ari_KMeans(emb, labels_true, n_components=None, random_state=None):\n    if n_components is None:\n        n_components = len(np.unique(stim_label))\n    labels_pred = KMeans(n_clusters=n_components, random_state=random_state).fit_predict(emb)#.labels_\n    return adjusted_rand_score(labels_true, labels_pred)\n\ndef ari_GM(emb, labels_true, max_iter=100, n_components=None, random_state=None):\n    if n_components is None:\n        n_components = len(np.unique(stim_label))\n    labels_pred = GaussianMixture(n_components=n_components, max_iter=max_iter, random_state=random_state).fit_predict(emb)\n    return adjusted_rand_score(labels_true, labels_pred)\n\ndef ari_HDBSCAN(emb, labels_true):\n    labels_pred = hdbscan.HDBSCAN().fit(emb).labels_\n    return adjusted_rand_score(labels_true, labels_pred)\n\ndef ari_custom(labels_true, labels_pred):\n    return adjusted_rand_score(labels_true, labels_pred)\n\ndef silhouette(emb, labels_true):\n    return silhouette_score(emb, labels_true)\n</pre> def ari_KMeans(emb, labels_true, n_components=None, random_state=None):     if n_components is None:         n_components = len(np.unique(stim_label))     labels_pred = KMeans(n_clusters=n_components, random_state=random_state).fit_predict(emb)#.labels_     return adjusted_rand_score(labels_true, labels_pred)  def ari_GM(emb, labels_true, max_iter=100, n_components=None, random_state=None):     if n_components is None:         n_components = len(np.unique(stim_label))     labels_pred = GaussianMixture(n_components=n_components, max_iter=max_iter, random_state=random_state).fit_predict(emb)     return adjusted_rand_score(labels_true, labels_pred)  def ari_HDBSCAN(emb, labels_true):     labels_pred = hdbscan.HDBSCAN().fit(emb).labels_     return adjusted_rand_score(labels_true, labels_pred)  def ari_custom(labels_true, labels_pred):     return adjusted_rand_score(labels_true, labels_pred)  def silhouette(emb, labels_true):     return silhouette_score(emb, labels_true) In\u00a0[130]: Copied! <pre>ari_KMeans(emb, stim_label)\n</pre> ari_KMeans(emb, stim_label) Out[130]: <pre>1.0</pre> In\u00a0[131]: Copied! <pre>ari_GM(emb, stim_label)\n</pre> ari_GM(emb, stim_label) Out[131]: <pre>1.0</pre> In\u00a0[132]: Copied! <pre>ari_HDBSCAN(emb, stim_label)\n</pre> ari_HDBSCAN(emb, stim_label) Out[132]: <pre>0.9799025390280147</pre> In\u00a0[133]: Copied! <pre>silhouette(emb, stim_label)\n</pre> silhouette(emb, stim_label) Out[133]: <pre>0.62301695</pre> In\u00a0[14]: Copied! <pre>from spyketools.clustering.ARI_score import ari_KMeans\n</pre> from spyketools.clustering.ARI_score import ari_KMeans In\u00a0[15]: Copied! <pre>ari_KMeans(emb, stim_label)\n</pre> ari_KMeans(emb, stim_label) <pre>\n---------------------------------------------------------------------------\nNameError                                 Traceback (most recent call last)\n&lt;ipython-input-15-b475dd0e1d92&gt; in &lt;module&gt;\n----&gt; 1 ari_KMeans(emb, stim_label)\n\n/mnt/pns/home/sotomayorb/git/spyke-tools-dev/spyketools/clustering/ARI_score.py in ari_KMeans(emb, labels_true, n_components, random_state)\n     53 \n     54     if n_components is None:\n---&gt; 55         n_components = len(np.unique(stim_label))\n     56     labels_pred = KMeans(n_clusters=n_components, random_state=random_state).fit_predict(emb)#.labels_\n     57     return adjusted_rand_score(labels_true, labels_pred)\n\nNameError: name 'stim_label' is not defined</pre> <p>Simulated data</p> In\u00a0[135]: Copied! <pre>points1 = np.random.normal(0, 10, (200,2))\npoints2 = np.random.normal(30, 10, (200,2))\npoints3 = np.random.normal(60, 10, (200,2))\nemb = np.concatenate([points1, points2, points3])\nlabels = np.array([(i//200) for i in range(600)])\n</pre> points1 = np.random.normal(0, 10, (200,2)) points2 = np.random.normal(30, 10, (200,2)) points3 = np.random.normal(60, 10, (200,2)) emb = np.concatenate([points1, points2, points3]) labels = np.array([(i//200) for i in range(600)]) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[136]: Copied! <pre>plt.figure(figsize=(5,5), facecolor='w'); \nplt.scatter(emb[:,0], emb[:,1], c=labels, s=10)\n</pre> plt.figure(figsize=(5,5), facecolor='w');  plt.scatter(emb[:,0], emb[:,1], c=labels, s=10) Out[136]: <pre>&lt;matplotlib.collections.PathCollection at 0x7fd9e0266710&gt;</pre> In\u00a0[100]: Copied! <pre>emb.shape, labels.shape\n</pre> emb.shape, labels.shape Out[100]: <pre>((600, 2), (600,))</pre> In\u00a0[101]: Copied! <pre>ari_KMeans(emb, labels, n_components=None, random_state=0)\n</pre> ari_KMeans(emb, labels, n_components=None, random_state=0) Out[101]: <pre>0.7772247810881237</pre> In\u00a0[102]: Copied! <pre>ari_GM(emb, labels, n_components=None, random_state=0)\n</pre> ari_GM(emb, labels, n_components=None, random_state=0) Out[102]: <pre>0.7928597274827337</pre> In\u00a0[89]: Copied! <pre>ari_HDBSCAN(emb, labels)\n</pre> ari_HDBSCAN(emb, labels) Out[89]: <pre>0.7656426881931003</pre> In\u00a0[1]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[11]: Copied! <pre>import numpy as np\nfrom spyketools.datasets import load_allen_brain_ds\n</pre> import numpy as np from spyketools.datasets import load_allen_brain_ds In\u00a0[6]: Copied! <pre>spike_times, ii_spike_times, stim_labels = load_allen_brain_ds()\n</pre> spike_times, ii_spike_times, stim_labels = load_allen_brain_ds() <pre>sys.path ['/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python36.zip', '/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6', '/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/lib-dynload', '', '/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages', '/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/IPython/extensions', '/cs/home/sotomayorb/.ipython', '/mnt/pns/home/sotomayorb/git/spyke-tools-dev/']\ngetcwd()  /mnt/pns/home/sotomayorb/git/spyke-tools-dev/docs/notebooks\n</pre> In\u00a0[7]: Copied! <pre>spike_times.shape\n# Output: 153635\n</pre> spike_times.shape # Output: 153635 Out[7]: <pre>(153635,)</pre> In\u00a0[8]: Copied! <pre># Number of epochs/trials\nii_spike_times.shape[0]\n# Output: 200\n</pre> # Number of epochs/trials ii_spike_times.shape[0] # Output: 200 Out[8]: <pre>200</pre> In\u00a0[12]: Copied! <pre># Number of neurons\nii_spike_times.shape[1]\n# Output: 1000\n</pre> # Number of neurons ii_spike_times.shape[1] # Output: 1000 Out[12]: <pre>1000</pre> In\u00a0[13]: Copied! <pre># Num. of stim. labels:\nlen(np.unique(stim_labels))\n# Output: 4\n</pre> # Num. of stim. labels: len(np.unique(stim_labels)) # Output: 4 Out[13]: <pre>4</pre> In\u00a0[14]: Copied! <pre>import umap\n</pre> import umap In\u00a0[17]: Copied! <pre>! ls demo_preproc_data/\n</pre> ! ls demo_preproc_data/ <pre>VP.npy\r\n</pre> In\u00a0[18]: Copied! <pre>VP = np.load(\"demo_preproc_data/VP.npy\")\n</pre> VP = np.load(\"demo_preproc_data/VP.npy\") In\u00a0[21]: Copied! <pre>np.fill_diagonal(VP, 0)\n</pre> np.fill_diagonal(VP, 0) In\u00a0[23]: Copied! <pre>emb = umap.UMAP(metric='precomputed').fit_transform(VP)\n</pre> emb = umap.UMAP(metric='precomputed').fit_transform(VP) <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/umap/umap_.py:1504: UserWarning: using precomputed metric; transform will be unavailable for new data and inverse_transform will be unavailable for all data\n  \"using precomputed metric; transform will be unavailable for new data and inverse_transform \"\n</pre> In\u00a0[1]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[2]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[3]: Copied! <pre>from spyketools.datasets import load_allen_brain_ds\nfrom spyketools.distances.victor_purpura import VP_pairwise_distances\nfrom spyketools.vis.raster import plot_dissimilarity_matrix\nfrom spyketools.manifold.tsne import tsne_emb\nfrom spyketools.clustering import ari_GM\n</pre> from spyketools.datasets import load_allen_brain_ds from spyketools.distances.victor_purpura import VP_pairwise_distances from spyketools.vis.raster import plot_dissimilarity_matrix from spyketools.manifold.tsne import tsne_emb from spyketools.clustering import ari_GM <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numba/core/decorators.py:232: RuntimeWarning: nopython is set for njit and is ignored\n  warnings.warn('nopython is set for njit and is ignored', RuntimeWarning)\n</pre> In\u00a0[4]: Copied! <pre># reading data\nspike_times, ii_spike_times, stim_labels = load_allen_brain_ds()\n</pre> # reading data spike_times, ii_spike_times, stim_labels = load_allen_brain_ds() In\u00a0[5]: Copied! <pre>%%time\n# parallel computing of pairwise distances \ndistances = VP_pairwise_distances(spike_times, ii_spike_times[:,:500,:])\n</pre> %%time # parallel computing of pairwise distances  distances = VP_pairwise_distances(spike_times, ii_spike_times[:,:500,:]) <pre>CPU times: user 2min 36s, sys: 46.7 ms, total: 2min 36s\nWall time: 11.5 s\n</pre> In\u00a0[6]: Copied! <pre># creating visualization of dissimilarity matrix\nplot_dissimilarity_matrix(distances, title=\"VP distance\", xlabel='Epoch', ylabel='Epoch', fill_value=np.max(distances))\n</pre> # creating visualization of dissimilarity matrix plot_dissimilarity_matrix(distances, title=\"VP distance\", xlabel='Epoch', ylabel='Epoch', fill_value=np.max(distances)) In\u00a0[7]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[11]: Copied! <pre>from spyketools.vis.raster import plot_dissimilarity_matrix, plot_raster_spike_trains\n</pre> from spyketools.vis.raster import plot_dissimilarity_matrix, plot_raster_spike_trains In\u00a0[41]: Copied! <pre>from spyketools.clustering.ARI_score import ari_KMeans, ari_GM\n</pre> from spyketools.clustering.ARI_score import ari_KMeans, ari_GM In\u00a0[46]: Copied! <pre>del(l_ari_Kmeans)\n</pre> del(l_ari_Kmeans) In\u00a0[47]: Copied! <pre>l_ari_KMeans = np.array([ari_KMeans(emb, stim_labels) for emb in l_emb])\nl_ari_GM = np.array([ari_GM(emb, stim_labels) for emb in l_emb])\n#l_ari_Silhouette = np.array([silhouette_score(emb, stim_labels) for emb in l_emb])\n</pre> l_ari_KMeans = np.array([ari_KMeans(emb, stim_labels) for emb in l_emb]) l_ari_GM = np.array([ari_GM(emb, stim_labels) for emb in l_emb]) #l_ari_Silhouette = np.array([silhouette_score(emb, stim_labels) for emb in l_emb]) In\u00a0[60]: Copied! <pre># raster for one epoch\nfig, axs = plt.subplots(figsize=(10,8), facecolor='w', ncols=2, nrows=2, constrained_layout=True)\n#plt.colorbar(axs=axs)\nplot_dissimilarity_matrix(\n    distances, ax=axs[0,1], title=\"VP distance ($q=0.3$)\", \n    xlabel='Epoch', ylabel='Epoch', \n    fill_value=np.max(distances))\n\nplot_raster_spike_trains(\n    spike_times, ii_spike_times, epoch_id=0, ax=axs[0,0], xmin=0., xmax=0.1, xlabel='Time[s]', ylabel='Neurons')\n\nplot_embedding(\n    embedding, stim_labels, ax=axs[1,0], title='2D t-SNE embedding ($q=0.3$)', show_legend=True, figsize=(4.5,4.5), xlabel='1st comp.', ylabel='2nd comp.')\n\naxs[1,1].set_xlabel(\"$q$ (cost)\")\naxs[1,1].set_ylabel(\"ARI\")\naxs[1,1].plot(np.arange(11)/10., l_ari_GM    , lw=0.5, marker='o', color='k', label=\"GM\")\naxs[1,1].plot(np.arange(11)/10., l_ari_KMeans, lw=0.5, marker='o', color='grey',label=\"KMeans\")\naxs[1,1].legend(frameon=False, bbox_to_anchor=(1,1))\n</pre> # raster for one epoch fig, axs = plt.subplots(figsize=(10,8), facecolor='w', ncols=2, nrows=2, constrained_layout=True) #plt.colorbar(axs=axs) plot_dissimilarity_matrix(     distances, ax=axs[0,1], title=\"VP distance ($q=0.3$)\",      xlabel='Epoch', ylabel='Epoch',      fill_value=np.max(distances))  plot_raster_spike_trains(     spike_times, ii_spike_times, epoch_id=0, ax=axs[0,0], xmin=0., xmax=0.1, xlabel='Time[s]', ylabel='Neurons')  plot_embedding(     embedding, stim_labels, ax=axs[1,0], title='2D t-SNE embedding ($q=0.3$)', show_legend=True, figsize=(4.5,4.5), xlabel='1st comp.', ylabel='2nd comp.')  axs[1,1].set_xlabel(\"$q$ (cost)\") axs[1,1].set_ylabel(\"ARI\") axs[1,1].plot(np.arange(11)/10., l_ari_GM    , lw=0.5, marker='o', color='k', label=\"GM\") axs[1,1].plot(np.arange(11)/10., l_ari_KMeans, lw=0.5, marker='o', color='grey',label=\"KMeans\") axs[1,1].legend(frameon=False, bbox_to_anchor=(1,1)) <pre>0 color #440154\n45 color #31688e\n90 color #35b779\n135 color #fde725\n</pre> Out[60]: <pre>&lt;matplotlib.legend.Legend at 0x7fef34ede898&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>axs[0].plot(l_cost, , color='k', marker='o', lw=0.5)\naxs[0].set_ylabel(\"ARI(GM)\")\naxs[1].plot(l_cost, [silhouette_score(emb, stim_labels) for emb in l_emb], color='k', marker='o', lw=0.5)\naxs[1].set_ylabel(\"Silhouette\")\n</pre> axs[0].plot(l_cost, , color='k', marker='o', lw=0.5) axs[0].set_ylabel(\"ARI(GM)\") axs[1].plot(l_cost, [silhouette_score(emb, stim_labels) for emb in l_emb], color='k', marker='o', lw=0.5) axs[1].set_ylabel(\"Silhouette\") <p>Version with GridSpec</p> <p>from \"https://matplotlib.org/stable/gallery/subplots_axes_and_figures/gridspec_multicolumn.html#sphx-glr-gallery-subplots-axes-and-figures-gridspec-multicolumn-py\"</p> <p>\"<code>GridSpec</code> is a flexible way to layout subplot grids. Here is an example with a 3x3 grid, and axes spanning all three columns, two columns, and two rows\"</p> In\u00a0[62]: Copied! <pre>from matplotlib.gridspec import GridSpec\n</pre> from matplotlib.gridspec import GridSpec In\u00a0[70]: Copied! <pre>fig = plt.figure(figsize=(9,9), facecolor='w', constrained_layout=True)\ngs = GridSpec(3, 3, figure=fig)#, layout=\"constrained\")\nax1 = fig.add_subplot(gs[0, :])\n# identical to ax1 = plt.subplot(gs.new_subplotspec((0, 0), colspan=3))\nax2 = fig.add_subplot(gs[1, :-1])\nax3 = fig.add_subplot(gs[1:, -1])\nax4 = fig.add_subplot(gs[-1, 0])\nax5 = fig.add_subplot(gs[-1, -2])\n</pre> fig = plt.figure(figsize=(9,9), facecolor='w', constrained_layout=True) gs = GridSpec(3, 3, figure=fig)#, layout=\"constrained\") ax1 = fig.add_subplot(gs[0, :]) # identical to ax1 = plt.subplot(gs.new_subplotspec((0, 0), colspan=3)) ax2 = fig.add_subplot(gs[1, :-1]) ax3 = fig.add_subplot(gs[1:, -1]) ax4 = fig.add_subplot(gs[-1, 0]) ax5 = fig.add_subplot(gs[-1, -2]) In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[22]: Copied! <pre># computation of tSNE embedding from dissimilarity matrix.\nembedding = tsne_emb(distances, perplexity=30.)\n</pre> # computation of tSNE embedding from dissimilarity matrix. embedding = tsne_emb(distances, perplexity=30.) In\u00a0[26]: Copied! <pre>import matplotlib.pyplot as plt\nimport matplotlib.cm as cm\nfrom matplotlib.colors import rgb2hex\ndef plot_embedding(emb, labels=None, title=\"\", xlabel=\"\", ylabel=\"\", colorbar_label=\"\", show_legend=False, figsize=(5,4), ax=None, cmap='viridis', figpath=\"\"):\n    if ax is None:\n        fig, ax = plt.subplots(figsize=figsize, facecolor='w')\n    \n    if labels is None:\n        ax.scatter(emb[:,0], emb[:,1], cmap=cmap)\n    else:\n        unique_labels = []\n        for label in labels:\n            if not label in unique_labels:\n                unique_labels.append(label)\n        cmap_ = cm.get_cmap(cmap, len(unique_labels))\n        c = np.array([rgb2hex(cmap_(unique_labels.index(label))) for label in labels])\n        for i in range(len(unique_labels)):\n            label = unique_labels[i]\n            print (label, \"color\", rgb2hex(cmap_(i)))\n            mask = (labels == label)\n            ax.scatter(emb[mask,0], emb[mask,1], c=c[mask], cmap=cmap, label=label)\n            \n        if show_legend:\n            ax.legend()\n            \n    if len(xlabel)!=0:\n        ax.set_xlabel(xlabel)\n    if len(ylabel)!=0:\n        ax.set_ylabel(ylabel)\n    if len(title)!=0:\n        ax.set_title(title)\n    if len(figpath)!=0:\n        plt.savefig(figpath, bbox_inches=\"tight\")\n        print(\"[INFO]\\tFigure was saved as '%s'\" % figpath)\n</pre> import matplotlib.pyplot as plt import matplotlib.cm as cm from matplotlib.colors import rgb2hex def plot_embedding(emb, labels=None, title=\"\", xlabel=\"\", ylabel=\"\", colorbar_label=\"\", show_legend=False, figsize=(5,4), ax=None, cmap='viridis', figpath=\"\"):     if ax is None:         fig, ax = plt.subplots(figsize=figsize, facecolor='w')          if labels is None:         ax.scatter(emb[:,0], emb[:,1], cmap=cmap)     else:         unique_labels = []         for label in labels:             if not label in unique_labels:                 unique_labels.append(label)         cmap_ = cm.get_cmap(cmap, len(unique_labels))         c = np.array([rgb2hex(cmap_(unique_labels.index(label))) for label in labels])         for i in range(len(unique_labels)):             label = unique_labels[i]             print (label, \"color\", rgb2hex(cmap_(i)))             mask = (labels == label)             ax.scatter(emb[mask,0], emb[mask,1], c=c[mask], cmap=cmap, label=label)                      if show_legend:             ax.legend()                  if len(xlabel)!=0:         ax.set_xlabel(xlabel)     if len(ylabel)!=0:         ax.set_ylabel(ylabel)     if len(title)!=0:         ax.set_title(title)     if len(figpath)!=0:         plt.savefig(figpath, bbox_inches=\"tight\")         print(\"[INFO]\\tFigure was saved as '%s'\" % figpath) In\u00a0[24]: Copied! <pre>plot_embedding(embedding, stim_labels, title='2D t-SNE embedding', show_legend=True, figsize=(4.5,4.5), xlabel='1st comp.', ylabel='2nd comp.')\n</pre> plot_embedding(embedding, stim_labels, title='2D t-SNE embedding', show_legend=True, figsize=(4.5,4.5), xlabel='1st comp.', ylabel='2nd comp.') <pre>0 color #440154\n45 color #31688e\n90 color #35b779\n135 color #fde725\n</pre> In\u00a0[106]: Copied! <pre># evaluation of clustering perforamnce via ARI-KMeans\nari_GM(embedding, stim_labels)\n</pre> # evaluation of clustering perforamnce via ARI-KMeans ari_GM(embedding, stim_labels) Out[106]: <pre>0.752700660068003</pre> In\u00a0[107]: Copied! <pre>?VP_pairwise_distances\n</pre> ?VP_pairwise_distances In\u00a0[30]: Copied! <pre>np.max(spike_times)\n</pre> np.max(spike_times) Out[30]: <pre>0.09999947704864098</pre> In\u00a0[31]: Copied! <pre>l_cost = np.array(range(11))/10.\n</pre> l_cost = np.array(range(11))/10. In\u00a0[32]: Copied! <pre>np.mean(ii_spike_times[:,:,1]-ii_spike_times[:,:,0])\n</pre> np.mean(ii_spike_times[:,:,1]-ii_spike_times[:,:,0]) Out[32]: <pre>0.768175</pre> In\u00a0[33]: Copied! <pre>l_distances = []\n\nfor cost in l_cost:\n    print ('cost %s' % cost)\n    distances = VP_pairwise_distances(spike_times, ii_spike_times[:,:500,:], cost = cost)\n    l_distances.append(distances)\n</pre> l_distances = []  for cost in l_cost:     print ('cost %s' % cost)     distances = VP_pairwise_distances(spike_times, ii_spike_times[:,:500,:], cost = cost)     l_distances.append(distances) <pre>cost 0.0\ncost 0.1\ncost 0.2\ncost 0.3\ncost 0.4\ncost 0.5\ncost 0.6\ncost 0.7\ncost 0.8\ncost 0.9\ncost 1.0\n</pre> In\u00a0[34]: Copied! <pre>l_emb = []\nfor diss in l_distances:\n    emb = tsne_emb(distances, perplexity=30.)\n    l_emb.append(emb)\n</pre> l_emb = [] for diss in l_distances:     emb = tsne_emb(distances, perplexity=30.)     l_emb.append(emb) In\u00a0[35]: Copied! <pre>l_ari_GM = []\n\nfor emb in l_emb:\n    temp_ari = ari_GM(emb, stim_labels)\n    l_ari_GM.append(temp_ari)\nl_ari_GM\n</pre> l_ari_GM = []  for emb in l_emb:     temp_ari = ari_GM(emb, stim_labels)     l_ari_GM.append(temp_ari) l_ari_GM Out[35]: <pre>[0.6223723579317266,\n 0.732894493606282,\n 0.8823235878986699,\n 0.8821664972126567,\n 0.8563440349060287,\n 0.5777784954223248,\n 0.5216388109465457,\n 0.8209369089228546,\n 0.7238912424581351,\n 0.6820479324724915,\n 0.9079177586451743]</pre> In\u00a0[36]: Copied! <pre>plt.plot(l_cost, l_ari_GM)\n#plt.semilogx()\n</pre> plt.plot(l_cost, l_ari_GM) #plt.semilogx() Out[36]: <pre>[&lt;matplotlib.lines.Line2D at 0x7fef4cc2e358&gt;]</pre> In\u00a0[37]: Copied! <pre>from spyketools.vis.raster import plot_raster_spike_trains\n</pre> from spyketools.vis.raster import plot_raster_spike_trains In\u00a0[285]: Copied! <pre>plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id=0, figsize=(5,5), xlabel='Time', ylabel='$N$', xmin=0., xmax=0.1)\n</pre> plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id=0, figsize=(5,5), xlabel='Time', ylabel='$N$', xmin=0., xmax=0.1) In\u00a0[288]: Copied! <pre># raster for one epoch\nfig, axs = plt.subplots(figsize=(8,8), facecolor='w', ncols=2, nrows=2, constrained_layout=True)\n\naxs[0][0] = plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id=0, figsize=(5,5), xlabel='Time', ylabel='$N$', xmin=0., xmax=0.1)\n</pre> # raster for one epoch fig, axs = plt.subplots(figsize=(8,8), facecolor='w', ncols=2, nrows=2, constrained_layout=True)  axs[0][0] = plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id=0, figsize=(5,5), xlabel='Time', ylabel='$N$', xmin=0., xmax=0.1) In\u00a0[231]: Copied! <pre>len(l_emb)\n</pre> len(l_emb) Out[231]: <pre>6</pre> In\u00a0[247]: Copied! <pre>_min_im = np.min(l_distances[i]); _max_im = np.max(l_distances[i])\n</pre> _min_im = np.min(l_distances[i]); _max_im = np.max(l_distances[i]) In\u00a0[250]: Copied! <pre># diss and embeddings\nfig, axs = plt.subplots(figsize=(10,4), facecolor='w', ncols=5, nrows=2, constrained_layout=True)\n\nfor i in range(5):\n    axs[0][i].imshow(l_distances[i], vmin=_min_im, vmax=_max_im)\n    axs[0][i].axis('off')\n    \n    axs[1][i].scatter(l_emb[i][:,0], l_emb[i][:,1], s=10, c=stim_labels)\n    #axs[1][i].set_xticks([]); axs[1][i].set_yticks([]); \n    axs[1][i].axis('off')\n</pre> # diss and embeddings fig, axs = plt.subplots(figsize=(10,4), facecolor='w', ncols=5, nrows=2, constrained_layout=True)  for i in range(5):     axs[0][i].imshow(l_distances[i], vmin=_min_im, vmax=_max_im)     axs[0][i].axis('off')          axs[1][i].scatter(l_emb[i][:,0], l_emb[i][:,1], s=10, c=stim_labels)     #axs[1][i].set_xticks([]); axs[1][i].set_yticks([]);      axs[1][i].axis('off') In\u00a0[266]: Copied! <pre>from spyketools.clustering.silhouette_score import silhouette_score\n</pre> from spyketools.clustering.silhouette_score import silhouette_score In\u00a0[275]: Copied! <pre># clustering performance (ARI_KMeans and Silhouette)\nfig, axs = plt.subplots(figsize=(4,4), facecolor='w', ncols=1, nrows=2, constrained_layout=True, sharex=True)\n\naxs[0].plot(l_cost, [ari_GM(emb, stim_labels) for emb in l_emb], color='k', marker='o', lw=0.5)\naxs[0].set_ylabel(\"ARI(GM)\")\naxs[1].plot(l_cost, [silhouette_score(emb, stim_labels) for emb in l_emb], color='k', marker='o', lw=0.5)\naxs[1].set_ylabel(\"Silhouette\")\n</pre> # clustering performance (ARI_KMeans and Silhouette) fig, axs = plt.subplots(figsize=(4,4), facecolor='w', ncols=1, nrows=2, constrained_layout=True, sharex=True)  axs[0].plot(l_cost, [ari_GM(emb, stim_labels) for emb in l_emb], color='k', marker='o', lw=0.5) axs[0].set_ylabel(\"ARI(GM)\") axs[1].plot(l_cost, [silhouette_score(emb, stim_labels) for emb in l_emb], color='k', marker='o', lw=0.5) axs[1].set_ylabel(\"Silhouette\") Out[275]: <pre>Text(0, 0.5, 'Silhouette')</pre> In\u00a0[79]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[143]: Copied! <pre>from spyketools.distances.SPIKE import SPIKE_distance\nfrom spyketools.distances.ISI import ISI_distance\nfrom spyketools.distances.RISPIKE import RISPIKE_distance\nfrom spyketools.distances.victor_purpura import VP_distance\nfrom spyketools.distances.spikeship import spikeship_distance\n</pre> from spyketools.distances.SPIKE import SPIKE_distance from spyketools.distances.ISI import ISI_distance from spyketools.distances.RISPIKE import RISPIKE_distance from spyketools.distances.victor_purpura import VP_distance from spyketools.distances.spikeship import spikeship_distance In\u00a0[81]: Copied! <pre>from time import time\n</pre> from time import time In\u00a0[82]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[83]: Copied! <pre>n_rep = 1000\n</pre> n_rep = 1000 In\u00a0[145]: Copied! <pre>l_times_py_ISI       = []; l_times_njit_ISI       = [];\nl_times_py_SPIKE     = []; l_times_njit_SPIKE     = []; \nl_times_py_RISPIKE   = []; l_times_njit_RISPIKE   = [];  \nl_times_py_VP        = []; l_times_njit_VP        = [];  \nl_times_py_SpikeShip = []; l_times_njit_SpikeShip = []; \n\nn = 50\nt1 = np.random.randint(10_000, size=(n)) / 10_000.\nt2 = np.random.randint(10_000, size=(n)) / 10_000.\nISI_distance(t1, t2, t_start=0, t_end=1, mode='njit')\nSPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit')\nRISPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit')\nVP_distance(t1, t2, cost=n, mode='njit')\nspikeship_distance(t1, t2, mode='njit')\nfor i in range(n_rep):\n    t1 = np.random.randint(10_000, size=(n)) / 10_000.\n    t2 = np.random.randint(10_000, size=(n)) / 10_000.\n    \n    #### ISI ####\n    # python backend\n    delta_time = time()\n    ISI_distance(t1, t2, t_start=0, t_end=1, mode='py')\n    delta_time = time() - delta_time\n    l_times_py_ISI.append(delta_time)\n    \n    # njit\n    delta_time = time()\n    ISI_distance(t1, t2, t_start=0, t_end=1, mode='njit')\n    delta_time = time() - delta_time\n    l_times_njit_ISI.append(delta_time)\n\n    #### SPIKE ####\n    # python backend\n    delta_time = time()\n    SPIKE_distance(t1, t2, t_start=0, t_end=1, mode='py')\n    delta_time = time() - delta_time\n    l_times_py_SPIKE.append(delta_time)\n    \n    # njit\n    delta_time = time()\n    SPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit')\n    delta_time = time() - delta_time\n    l_times_njit_SPIKE.append(delta_time)\n    \n    \n    #### RISPIKE ####\n    # python backend\n    delta_time = time()\n    RISPIKE_distance(t1, t2, t_start=0, t_end=1, mode='py')\n    delta_time = time() - delta_time\n    l_times_py_RISPIKE.append(delta_time)\n    \n    # njit\n    delta_time = time()\n    RISPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit')\n    delta_time = time() - delta_time\n    l_times_njit_RISPIKE.append(delta_time)\n    \n    \n    #### VP ####\n    delta_time = time()\n    VP_distance(t1, t2, cost=n, mode='py')\n    delta_time = time() - delta_time\n    l_times_py_VP.append(delta_time)\n    \n    delta_time = time()\n    VP_distance(t1, t2, cost=n, mode='njit')\n    delta_time = time() - delta_time\n    l_times_njit_VP.append(delta_time)\n    \n    \n    #### SPIKESHIP ####\n    delta_time = time()\n    spikeship_distance(t1, t2, mode='py')\n    delta_time = time() - delta_time\n    l_times_py_SpikeShip.append(delta_time)\n    \n    delta_time = time()\n    spikeship_distance(t1, t2, mode='njit')\n    delta_time = time() - delta_time\n    l_times_njit_SpikeShip.append(delta_time)\n    \nl_times_py_SPIKE       = np.array(l_times_py_SPIKE)*1_000 # to miliseconds\nl_times_njit_SPIKE     = np.array(l_times_njit_SPIKE)*1_000 # to miliseconds\nl_times_py_RISPIKE     = np.array(l_times_py_RISPIKE)*1_000 # to miliseconds\nl_times_njit_RISPIKE   = np.array(l_times_njit_RISPIKE)*1_000 # to miliseconds\nl_times_py_VP          = np.array(l_times_py_VP)*1_000 # to miliseconds\nl_times_njit_VP        = np.array(l_times_njit_VP)*1_000 # to miliseconds\nl_times_py_SpikeShip   = np.array(l_times_py_SpikeShip)*1_000 # to miliseconds\nl_times_njit_SpikeShip = np.array(l_times_njit_SpikeShip)*1_000 # to miliseconds\n</pre> l_times_py_ISI       = []; l_times_njit_ISI       = []; l_times_py_SPIKE     = []; l_times_njit_SPIKE     = [];  l_times_py_RISPIKE   = []; l_times_njit_RISPIKE   = [];   l_times_py_VP        = []; l_times_njit_VP        = [];   l_times_py_SpikeShip = []; l_times_njit_SpikeShip = [];   n = 50 t1 = np.random.randint(10_000, size=(n)) / 10_000. t2 = np.random.randint(10_000, size=(n)) / 10_000. ISI_distance(t1, t2, t_start=0, t_end=1, mode='njit') SPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit') RISPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit') VP_distance(t1, t2, cost=n, mode='njit') spikeship_distance(t1, t2, mode='njit') for i in range(n_rep):     t1 = np.random.randint(10_000, size=(n)) / 10_000.     t2 = np.random.randint(10_000, size=(n)) / 10_000.          #### ISI ####     # python backend     delta_time = time()     ISI_distance(t1, t2, t_start=0, t_end=1, mode='py')     delta_time = time() - delta_time     l_times_py_ISI.append(delta_time)          # njit     delta_time = time()     ISI_distance(t1, t2, t_start=0, t_end=1, mode='njit')     delta_time = time() - delta_time     l_times_njit_ISI.append(delta_time)      #### SPIKE ####     # python backend     delta_time = time()     SPIKE_distance(t1, t2, t_start=0, t_end=1, mode='py')     delta_time = time() - delta_time     l_times_py_SPIKE.append(delta_time)          # njit     delta_time = time()     SPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit')     delta_time = time() - delta_time     l_times_njit_SPIKE.append(delta_time)               #### RISPIKE ####     # python backend     delta_time = time()     RISPIKE_distance(t1, t2, t_start=0, t_end=1, mode='py')     delta_time = time() - delta_time     l_times_py_RISPIKE.append(delta_time)          # njit     delta_time = time()     RISPIKE_distance(t1, t2, t_start=0, t_end=1, mode='njit')     delta_time = time() - delta_time     l_times_njit_RISPIKE.append(delta_time)               #### VP ####     delta_time = time()     VP_distance(t1, t2, cost=n, mode='py')     delta_time = time() - delta_time     l_times_py_VP.append(delta_time)          delta_time = time()     VP_distance(t1, t2, cost=n, mode='njit')     delta_time = time() - delta_time     l_times_njit_VP.append(delta_time)               #### SPIKESHIP ####     delta_time = time()     spikeship_distance(t1, t2, mode='py')     delta_time = time() - delta_time     l_times_py_SpikeShip.append(delta_time)          delta_time = time()     spikeship_distance(t1, t2, mode='njit')     delta_time = time() - delta_time     l_times_njit_SpikeShip.append(delta_time)      l_times_py_SPIKE       = np.array(l_times_py_SPIKE)*1_000 # to miliseconds l_times_njit_SPIKE     = np.array(l_times_njit_SPIKE)*1_000 # to miliseconds l_times_py_RISPIKE     = np.array(l_times_py_RISPIKE)*1_000 # to miliseconds l_times_njit_RISPIKE   = np.array(l_times_njit_RISPIKE)*1_000 # to miliseconds l_times_py_VP          = np.array(l_times_py_VP)*1_000 # to miliseconds l_times_njit_VP        = np.array(l_times_njit_VP)*1_000 # to miliseconds l_times_py_SpikeShip   = np.array(l_times_py_SpikeShip)*1_000 # to miliseconds l_times_njit_SpikeShip = np.array(l_times_njit_SpikeShip)*1_000 # to miliseconds In\u00a0[146]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[171]: Copied! <pre>fig, axs = plt.subplots(figsize=(2.1*4,4), facecolor='w', ncols=1, constrained_layout=True, sharey=True)\n\nl_times_py   = [l_times_py_VP  , l_times_py_ISI  , l_times_py_SPIKE  , l_times_py_RISPIKE  , l_times_py_SpikeShip  ]\nl_times_njit = [l_times_njit_VP, l_times_njit_ISI, l_times_njit_SPIKE, l_times_njit_RISPIKE, l_times_njit_SpikeShip]\nl_hatch = ['/', '\\\\']\nl_colors = ['cornflowerblue', 'blueviolet']\nl_metric_name = ['$VP(q=n)$', '$ISI$', '$SPIKE$', '$RI$-$SPIKE$', '$SpikeShip$']\n\nl_speedup = []\nwidth = 0.25\nfor i in range(len(l_times_py)):\n    temp_mean_py   = np.mean(l_times_py[i])\n    temp_mean_njit = np.mean(l_times_njit[i])\n    temp_std_py   = np.std(l_times_py[i])\n    temp_std_njit = np.std(l_times_njit[i])\n    temp_speedup = temp_mean_py/temp_mean_njit\n    #print (temp_mean_py, 'vs', temp_mean_njit, 'speed-up:', temp_speedup)\n    l_speedup.append(\"%s\\nSpeed-up: %.1f\" % (l_metric_name[i], temp_speedup))\n    \n    axs.errorbar(\n        [i-(width/2), i+(width/2)],\n        [temp_mean_py, temp_mean_njit],\n        yerr=[temp_std_py*2, temp_std_njit*2],\n        fmt='', color='k', mew=4, ls=''\n    )\n    if i == 0:\n        axs.bar([i-(width/2)], [temp_mean_py  ], width=width, edgecolor='', color=l_colors[0], label='Python &amp; Numpy')\n        axs.bar([i+(width/2)], [temp_mean_njit], width=width, edgecolor='', color=l_colors[1], label='Compiled (Numba)')\n    else:\n        axs.bar([i-(width/2)], [temp_mean_py  ], width=width, edgecolor='', color=l_colors[0])\n        axs.bar([i+(width/2)], [temp_mean_njit], width=width, edgecolor='', color=l_colors[1])\n        \n\n    axs.semilogy()\n\n    axs.set_xlabel(\"Exec. mode\", fontsize=14)\n\n    #axs.set_title(\"%s\\n(speed-up: x%.1f)\" % (l_metric_name[i], temp_speedup), fontsize=12)\n    \n    \n    axs.spines['top'].set_visible(False)\n    axs.spines['right'].set_visible(False)\n\naxs.set_xticks(range(len(l_speedup)))\naxs.set_xticklabels(l_speedup, fontsize=12)\naxs.set_ylabel(\"Time [ms][LOG]\", fontsize=14)\naxs.legend(frameon=False, fontsize=14, bbox_to_anchor=(1.,1.05))\n\nplt.savefig('figs/comp_time_py_njit_.pdf', bbox_inches=\"tight\")\n</pre> fig, axs = plt.subplots(figsize=(2.1*4,4), facecolor='w', ncols=1, constrained_layout=True, sharey=True)  l_times_py   = [l_times_py_VP  , l_times_py_ISI  , l_times_py_SPIKE  , l_times_py_RISPIKE  , l_times_py_SpikeShip  ] l_times_njit = [l_times_njit_VP, l_times_njit_ISI, l_times_njit_SPIKE, l_times_njit_RISPIKE, l_times_njit_SpikeShip] l_hatch = ['/', '\\\\'] l_colors = ['cornflowerblue', 'blueviolet'] l_metric_name = ['$VP(q=n)$', '$ISI$', '$SPIKE$', '$RI$-$SPIKE$', '$SpikeShip$']  l_speedup = [] width = 0.25 for i in range(len(l_times_py)):     temp_mean_py   = np.mean(l_times_py[i])     temp_mean_njit = np.mean(l_times_njit[i])     temp_std_py   = np.std(l_times_py[i])     temp_std_njit = np.std(l_times_njit[i])     temp_speedup = temp_mean_py/temp_mean_njit     #print (temp_mean_py, 'vs', temp_mean_njit, 'speed-up:', temp_speedup)     l_speedup.append(\"%s\\nSpeed-up: %.1f\" % (l_metric_name[i], temp_speedup))          axs.errorbar(         [i-(width/2), i+(width/2)],         [temp_mean_py, temp_mean_njit],         yerr=[temp_std_py*2, temp_std_njit*2],         fmt='', color='k', mew=4, ls=''     )     if i == 0:         axs.bar([i-(width/2)], [temp_mean_py  ], width=width, edgecolor='', color=l_colors[0], label='Python &amp; Numpy')         axs.bar([i+(width/2)], [temp_mean_njit], width=width, edgecolor='', color=l_colors[1], label='Compiled (Numba)')     else:         axs.bar([i-(width/2)], [temp_mean_py  ], width=width, edgecolor='', color=l_colors[0])         axs.bar([i+(width/2)], [temp_mean_njit], width=width, edgecolor='', color=l_colors[1])               axs.semilogy()      axs.set_xlabel(\"Exec. mode\", fontsize=14)      #axs.set_title(\"%s\\n(speed-up: x%.1f)\" % (l_metric_name[i], temp_speedup), fontsize=12)               axs.spines['top'].set_visible(False)     axs.spines['right'].set_visible(False)  axs.set_xticks(range(len(l_speedup))) axs.set_xticklabels(l_speedup, fontsize=12) axs.set_ylabel(\"Time [ms][LOG]\", fontsize=14) axs.legend(frameon=False, fontsize=14, bbox_to_anchor=(1.,1.05))  plt.savefig('figs/comp_time_py_njit_.pdf', bbox_inches=\"tight\") <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:27: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:28: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:30: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:31: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[63]: Copied! <pre>\n</pre> <pre>18.904208183288574 vs 0.366487979888916 speed-up: 51.58206877349297\n1.2373216152191162 vs 0.0065615177154541016 speed-up: 188.57247193052578\n0.5369141101837158 vs 0.005411386489868164 speed-up: 99.21932413975415\n0.11269617080688477 vs 0.02306675910949707 speed-up: 4.885652564884391\n</pre> <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:14: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n  \n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:15: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n  from ipykernel import kernelapp as app\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[1]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[2]: Copied! <pre>from time import time\n</pre> from time import time In\u00a0[3]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[4]: Copied! <pre>from spyketools.distances.SPIKE import SPIKE_pairwise_distances\nfrom spyketools.distances.RISPIKE import RISPIKE_pairwise_distances\nfrom spyketools.distances.victor_purpura import VP_pairwise_distances\nfrom spyketools.distances.spikeship import spikeship_pairwise_distances\n</pre> from spyketools.distances.SPIKE import SPIKE_pairwise_distances from spyketools.distances.RISPIKE import RISPIKE_pairwise_distances from spyketools.distances.victor_purpura import VP_pairwise_distances from spyketools.distances.spikeship import spikeship_pairwise_distances <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numba/core/decorators.py:232: RuntimeWarning: nopython is set for njit and is ignored\n  warnings.warn('nopython is set for njit and is ignored', RuntimeWarning)\n</pre> In\u00a0[28]: Copied! <pre>\n</pre> In\u00a0[56]: Copied! <pre>def generate_sim_data(M = 200, N = 20, n = 20):\n    sim_spike_times = []; sim_ii_spike_times = []; \n    index = 0\n    for i_e in range(M):\n        temp_ii_spike_times = [];\n        for i_N in range(N):\n            temp_st = np.random.randint(10_000, size=(n)) / 10_000. \n            temp_st.sort()\n            sim_spike_times.append(temp_st)\n            temp_ii_spike_times.append([index, index+len(temp_st)])\n            index += len(temp_st)\n        sim_ii_spike_times.append(temp_ii_spike_times)\n\n    sim_spike_times = np.concatenate(sim_spike_times)\n    sim_ii_spike_times = np.array(sim_ii_spike_times)\n    return sim_spike_times, sim_ii_spike_times\n</pre> def generate_sim_data(M = 200, N = 20, n = 20):     sim_spike_times = []; sim_ii_spike_times = [];      index = 0     for i_e in range(M):         temp_ii_spike_times = [];         for i_N in range(N):             temp_st = np.random.randint(10_000, size=(n)) / 10_000.              temp_st.sort()             sim_spike_times.append(temp_st)             temp_ii_spike_times.append([index, index+len(temp_st)])             index += len(temp_st)         sim_ii_spike_times.append(temp_ii_spike_times)      sim_spike_times = np.concatenate(sim_spike_times)     sim_ii_spike_times = np.array(sim_ii_spike_times)     return sim_spike_times, sim_ii_spike_times In\u00a0[57]: Copied! <pre>sim_spike_times.shape, sim_ii_spike_times.shape\n</pre> sim_spike_times.shape, sim_ii_spike_times.shape Out[57]: <pre>((200000,), (100, 100, 2))</pre> In\u00a0[99]: Copied! <pre>n_rep = 10;\n</pre> n_rep = 10; In\u00a0[100]: Copied! <pre>l_times_py_SPIKE_pw     = []; l_times_njit_SPIKE_pw     = []; \nl_times_py_RISPIKE_pw   = []; l_times_njit_RISPIKE_pw   = [];  \nl_times_py_VP_pw        = []; l_times_njit_VP_pw        = [];  \nl_times_py_SpikeShip_pw = []; l_times_njit_SpikeShip_pw = []; \n\nsim_spike_times, sim_ii_spike_times = generate_sim_data()\nSPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times[:,:10,:], window_length=1)\nRISPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times[:,:10,:], window_length=1)\n#VP_distance(t1, t2, cost=n, mode='njit')\n#spikeship_distance(t1, t2, mode='njit')\n\nfor num_threads in [1,2,4,8]:#range(1, n_cores):\n    for i in range(n_rep):\n        sim_spike_times, sim_ii_spike_times = generate_sim_data()\n        print (\"cores %i rep %i\" % (num_threads, i))\n\n        #### SPIKE ####\n#         delta_time = time()\n#         SPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times, window_length=1, num_threads=num_threads)\n#         delta_time = time() - delta_time\n#         l_times_py_SPIKE_pw.append(delta_time)\n\n#         #### RISPIKE ####\n#         delta_time = time()\n#         RISPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times, window_length=1, num_threads=num_threads)\n#         delta_time = time() - delta_time\n#         l_times_py_RISPIKE_pw.append(delta_time)\n\n    #     #### VP ####\n    #     delta_time = time()\n    #     VP_distance(t1, t2, cost=n, mode='py')\n    #     delta_time = time() - delta_time\n    #     l_times_py_VP.append(delta_time)\n\n    #     delta_time = time()\n    #     VP_distance(t1, t2, cost=n, mode='njit')\n    #     delta_time = time() - delta_time\n    #     l_times_njit_VP.append(delta_time)\n\n\n        #### SPIKESHIP ####\n        delta_time = time()\n        spikeship_pairwise_distances(sim_spike_times, sim_ii_spike_times, num_threads=num_threads)\n        delta_time = time() - delta_time\n        l_times_py_SpikeShip_pw.append(delta_time)\n    \nl_times_py_SPIKE_pw       = np.array(l_times_py_SPIKE_pw)*1_000 # to miliseconds\nl_times_py_RISPIKE_pw     = np.array(l_times_py_RISPIKE_pw)*1_000 # to miliseconds\nl_times_py_VP_pw          = np.array(l_times_py_VP_pw)*1_000 # to miliseconds\nl_times_py_SpikeShip_pw   = np.array(l_times_py_SpikeShip_pw)*1_000 # to miliseconds\n</pre> l_times_py_SPIKE_pw     = []; l_times_njit_SPIKE_pw     = [];  l_times_py_RISPIKE_pw   = []; l_times_njit_RISPIKE_pw   = [];   l_times_py_VP_pw        = []; l_times_njit_VP_pw        = [];   l_times_py_SpikeShip_pw = []; l_times_njit_SpikeShip_pw = [];   sim_spike_times, sim_ii_spike_times = generate_sim_data() SPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times[:,:10,:], window_length=1) RISPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times[:,:10,:], window_length=1) #VP_distance(t1, t2, cost=n, mode='njit') #spikeship_distance(t1, t2, mode='njit')  for num_threads in [1,2,4,8]:#range(1, n_cores):     for i in range(n_rep):         sim_spike_times, sim_ii_spike_times = generate_sim_data()         print (\"cores %i rep %i\" % (num_threads, i))          #### SPIKE #### #         delta_time = time() #         SPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times, window_length=1, num_threads=num_threads) #         delta_time = time() - delta_time #         l_times_py_SPIKE_pw.append(delta_time)  #         #### RISPIKE #### #         delta_time = time() #         RISPIKE_pairwise_distances(sim_spike_times, sim_ii_spike_times, window_length=1, num_threads=num_threads) #         delta_time = time() - delta_time #         l_times_py_RISPIKE_pw.append(delta_time)      #     #### VP ####     #     delta_time = time()     #     VP_distance(t1, t2, cost=n, mode='py')     #     delta_time = time() - delta_time     #     l_times_py_VP.append(delta_time)      #     delta_time = time()     #     VP_distance(t1, t2, cost=n, mode='njit')     #     delta_time = time() - delta_time     #     l_times_njit_VP.append(delta_time)           #### SPIKESHIP ####         delta_time = time()         spikeship_pairwise_distances(sim_spike_times, sim_ii_spike_times, num_threads=num_threads)         delta_time = time() - delta_time         l_times_py_SpikeShip_pw.append(delta_time)      l_times_py_SPIKE_pw       = np.array(l_times_py_SPIKE_pw)*1_000 # to miliseconds l_times_py_RISPIKE_pw     = np.array(l_times_py_RISPIKE_pw)*1_000 # to miliseconds l_times_py_VP_pw          = np.array(l_times_py_VP_pw)*1_000 # to miliseconds l_times_py_SpikeShip_pw   = np.array(l_times_py_SpikeShip_pw)*1_000 # to miliseconds <pre>cores 1 rep 0\ncores 1 rep 1\ncores 1 rep 2\ncores 1 rep 3\ncores 1 rep 4\ncores 1 rep 5\ncores 1 rep 6\ncores 1 rep 7\ncores 1 rep 8\ncores 1 rep 9\ncores 2 rep 0\ncores 2 rep 1\ncores 2 rep 2\ncores 2 rep 3\ncores 2 rep 4\ncores 2 rep 5\ncores 2 rep 6\ncores 2 rep 7\ncores 2 rep 8\ncores 2 rep 9\ncores 4 rep 0\ncores 4 rep 1\ncores 4 rep 2\ncores 4 rep 3\ncores 4 rep 4\ncores 4 rep 5\ncores 4 rep 6\ncores 4 rep 7\ncores 4 rep 8\ncores 4 rep 9\ncores 8 rep 0\ncores 8 rep 1\ncores 8 rep 2\ncores 8 rep 3\ncores 8 rep 4\ncores 8 rep 5\ncores 8 rep 6\ncores 8 rep 7\ncores 8 rep 8\ncores 8 rep 9\n</pre> In\u00a0[101]: Copied! <pre>l_times_py_SPIKE_pw\n</pre> l_times_py_SPIKE_pw Out[101]: <pre>array([], dtype=float64)</pre> In\u00a0[102]: Copied! <pre>l_times_py_RISPIKE_pw\n</pre> l_times_py_RISPIKE_pw Out[102]: <pre>array([], dtype=float64)</pre> In\u00a0[104]: Copied! <pre># #temp_mean = [np.mean(l_times_py_SPIKE_pw[:4])/np.mean(l_times_py_RISPIKE_pw[i*4:(i+1)*4]) for i in range(1,len(l_times_py_RISPIKE_pw)//4) ]\n# temp_mean = [np.mean(l_times_py_SPIKE_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_SPIKE_pw)//4) ]\n\n# plt.plot([1,2,4,8], temp_mean, marker='o', ms=10)\n# #plt.semilogy()\n</pre> # #temp_mean = [np.mean(l_times_py_SPIKE_pw[:4])/np.mean(l_times_py_RISPIKE_pw[i*4:(i+1)*4]) for i in range(1,len(l_times_py_RISPIKE_pw)//4) ] # temp_mean = [np.mean(l_times_py_SPIKE_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_SPIKE_pw)//4) ]  # plt.plot([1,2,4,8], temp_mean, marker='o', ms=10) # #plt.semilogy() In\u00a0[74]: Copied! <pre># temp_mean = [np.mean(l_times_py_SPIKE_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_SPIKE_pw)//4) ]\n# plt.plot([1,2,4,8], temp_mean, marker='o', ms=10, label='SPIKE')\n\n# temp_mean = [np.mean(l_times_py_RISPIKE_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_RISPIKE_pw)//4) ]\n# plt.plot([1,2,4,8], temp_mean, marker='o', ms=10, label='RISPIKE')\n\n# temp_mean = [np.mean(l_times_py_SpikeShip_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_SpikeShip_pw)//4) ]\n# plt.plot([1,2,4,8], temp_mean, marker='o', ms=10, label='SpikeShip')\n# #plt.semilogy()\n# plt.legend()\n</pre> # temp_mean = [np.mean(l_times_py_SPIKE_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_SPIKE_pw)//4) ] # plt.plot([1,2,4,8], temp_mean, marker='o', ms=10, label='SPIKE')  # temp_mean = [np.mean(l_times_py_RISPIKE_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_RISPIKE_pw)//4) ] # plt.plot([1,2,4,8], temp_mean, marker='o', ms=10, label='RISPIKE')  # temp_mean = [np.mean(l_times_py_SpikeShip_pw[i*4:(i+1)*4]) for i in range(0,len(l_times_py_SpikeShip_pw)//4) ] # plt.plot([1,2,4,8], temp_mean, marker='o', ms=10, label='SpikeShip') # #plt.semilogy() # plt.legend() Out[74]: <pre>&lt;matplotlib.legend.Legend at 0x7fe4097ccf98&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[126]: Copied! <pre>temp_mean = [np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_std  = [np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_mean = np.array(temp_mean)\ntemp_std = np.array(temp_std)\nfig, axs = plt.subplots(figsize=(3*2,4), facecolor='w', ncols=2, constrained_layout=True)\naxs[0].plot([0,1,2,3], temp_mean, marker='o', ms=10, label='SpikeShip')\naxs[0].set_xticks([0,1,2,3])\naxs[0].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14)\naxs[0].fill_between(\n    [0,1,2,3], \n    temp_mean-temp_std, \n    temp_mean+temp_std, \n    alpha=0.1\n    )\naxs[1].plot([0,1,2,3], temp_mean[0]/temp_mean, marker='o', ms=10, label='SpikeShip')\naxs[1].set_xticks([0,1,2,3])\naxs[1].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14)\naxs[1].fill_between(\n    [0,1,2,3], \n    (temp_mean[0]/temp_mean)-(temp_std[0]/temp_std), \n    (temp_mean[0]/temp_mean)+(temp_std[0]/temp_std), \n    alpha=0.1\n    )\naxs[1].axhline(1, color='k', ls='--', marker='', lw=0.5, )\n\naxs[0].set_xlabel(\"# Cores\", fontsize=12)\naxs[0].set_ylabel(\"Time [ms]\", fontsize=12)\naxs[1].set_xlabel(\"# Cores\", fontsize=12)\naxs[1].set_ylabel(\"Efficiency\", fontsize=12)\n\nfig.suptitle(\"SpikeShip\", fontsize=12)\n</pre> temp_mean = [np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_std  = [np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_mean = np.array(temp_mean) temp_std = np.array(temp_std) fig, axs = plt.subplots(figsize=(3*2,4), facecolor='w', ncols=2, constrained_layout=True) axs[0].plot([0,1,2,3], temp_mean, marker='o', ms=10, label='SpikeShip') axs[0].set_xticks([0,1,2,3]) axs[0].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14) axs[0].fill_between(     [0,1,2,3],      temp_mean-temp_std,      temp_mean+temp_std,      alpha=0.1     ) axs[1].plot([0,1,2,3], temp_mean[0]/temp_mean, marker='o', ms=10, label='SpikeShip') axs[1].set_xticks([0,1,2,3]) axs[1].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14) axs[1].fill_between(     [0,1,2,3],      (temp_mean[0]/temp_mean)-(temp_std[0]/temp_std),      (temp_mean[0]/temp_mean)+(temp_std[0]/temp_std),      alpha=0.1     ) axs[1].axhline(1, color='k', ls='--', marker='', lw=0.5, )  axs[0].set_xlabel(\"# Cores\", fontsize=12) axs[0].set_ylabel(\"Time [ms]\", fontsize=12) axs[1].set_xlabel(\"# Cores\", fontsize=12) axs[1].set_ylabel(\"Efficiency\", fontsize=12)  fig.suptitle(\"SpikeShip\", fontsize=12) Out[126]: <pre>Text(0.5, 0.98, 'SpikeShip')</pre> In\u00a0[155]: Copied! <pre>temp_mean = [np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_std  = [np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_mean = np.array(temp_mean)\ntemp_std = np.array(temp_std)\nfig, axs = plt.subplots(figsize=(3*2,4), facecolor='w', ncols=2, constrained_layout=True)\naxs[0].bar([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], temp_mean, color='#AED581', edgecolor='k') # '#8E44AD'\n\naxs[0].errorbar(\n        [\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"],\n        temp_mean,\n        yerr=temp_std*2,\n        fmt='', color='k', mew=4, ls=''\n    )\n# axs[0].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14)\n\n# axs[0].set_xticks([0,1,2,3])\n# axs[0].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14)\n# axs[0].fill_between(\n#     [0,1,2,3], \n#     temp_mean-temp_std, \n#     temp_mean+temp_std, \n#     alpha=0.1\n#     )\n# axs[1].plot([0,1,2,3], temp_mean[0]/temp_mean, marker='o', ms=10, label='SpikeShip')\n# axs[1].set_xticks([0,1,2,3])\n# axs[1].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14)\n# axs[1].fill_between(\n#     [0,1,2,3], \n#     (temp_mean[0]/temp_mean)-(temp_std[0]/temp_std), \n#     (temp_mean[0]/temp_mean)+(temp_std[0]/temp_std), \n#     alpha=0.1\n#     )\n# axs[1].axhline(1, color='k', ls='--', marker='', lw=0.5, )\n\naxs[0].set_xlabel(\"# Cores\", fontsize=12)\naxs[0].set_ylabel(\"Time [ms]\", fontsize=12)\naxs[0].set_title(\"SpikeShip\", fontsize=14)\n# axs[1].set_xlabel(\"# Cores\", fontsize=12)\n# axs[1].set_ylabel(\"Efficiency\", fontsize=12)\n\n#fig.suptitle(\"SpikeShip\", fontsize=12)\n</pre> temp_mean = [np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_std  = [np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_mean = np.array(temp_mean) temp_std = np.array(temp_std) fig, axs = plt.subplots(figsize=(3*2,4), facecolor='w', ncols=2, constrained_layout=True) axs[0].bar([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], temp_mean, color='#AED581', edgecolor='k') # '#8E44AD'  axs[0].errorbar(         [\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"],         temp_mean,         yerr=temp_std*2,         fmt='', color='k', mew=4, ls=''     ) # axs[0].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14)  # axs[0].set_xticks([0,1,2,3]) # axs[0].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14) # axs[0].fill_between( #     [0,1,2,3],  #     temp_mean-temp_std,  #     temp_mean+temp_std,  #     alpha=0.1 #     ) # axs[1].plot([0,1,2,3], temp_mean[0]/temp_mean, marker='o', ms=10, label='SpikeShip') # axs[1].set_xticks([0,1,2,3]) # axs[1].set_xticklabels([\"$2^0$\",\"$2^1$\",\"$2^2$\",\"$2^3$\"], fontsize=14) # axs[1].fill_between( #     [0,1,2,3],  #     (temp_mean[0]/temp_mean)-(temp_std[0]/temp_std),  #     (temp_mean[0]/temp_mean)+(temp_std[0]/temp_std),  #     alpha=0.1 #     ) # axs[1].axhline(1, color='k', ls='--', marker='', lw=0.5, )  axs[0].set_xlabel(\"# Cores\", fontsize=12) axs[0].set_ylabel(\"Time [ms]\", fontsize=12) axs[0].set_title(\"SpikeShip\", fontsize=14) # axs[1].set_xlabel(\"# Cores\", fontsize=12) # axs[1].set_ylabel(\"Efficiency\", fontsize=12)  #fig.suptitle(\"SpikeShip\", fontsize=12) Out[155]: <pre>Text(0.5, 1.0, 'SpikeShip')</pre> In\u00a0[72]: Copied! <pre>import pandas as pd\n</pre> import pandas as pd In\u00a0[73]: Copied! <pre>!pwd\n</pre> !pwd  <pre>/mnt/pns/home/sotomayorb/git/spyke-tools-dev/docs/notebooks\r\n</pre> In\u00a0[74]: Copied! <pre>df_comp_time = pd.read_csv(\"../../spyketools/others/comp_time.Jul05.csv\", delimiter=',')\n</pre> df_comp_time = pd.read_csv(\"../../spyketools/others/comp_time.Jul05.csv\", delimiter=',') In\u00a0[75]: Copied! <pre>df_comp_time[df_comp_time.metric==\"SpikeShip\"]\n</pre> df_comp_time[df_comp_time.metric==\"SpikeShip\"] Out[75]: metric time cores i_rep 2 SpikeShip 104.026755 1 0 5 SpikeShip 104.048027 1 1 8 SpikeShip 104.023195 1 2 11 SpikeShip 104.053059 1 3 14 SpikeShip 104.033242 1 4 17 SpikeShip 104.041625 1 5 20 SpikeShip 104.003091 1 6 23 SpikeShip 103.995864 1 7 26 SpikeShip 104.053515 1 8 29 SpikeShip 104.066333 1 9 32 SpikeShip 71.048871 2 0 35 SpikeShip 71.422407 2 1 38 SpikeShip 71.116817 2 2 41 SpikeShip 72.175041 2 3 44 SpikeShip 71.142030 2 4 47 SpikeShip 72.039809 2 5 50 SpikeShip 71.551300 2 6 53 SpikeShip 71.859250 2 7 56 SpikeShip 71.861480 2 8 59 SpikeShip 71.644020 2 9 62 SpikeShip 45.593545 4 0 65 SpikeShip 45.062675 4 1 68 SpikeShip 46.610235 4 2 71 SpikeShip 46.510454 4 3 74 SpikeShip 45.291815 4 4 77 SpikeShip 45.332593 4 5 80 SpikeShip 45.636419 4 6 83 SpikeShip 46.181435 4 7 86 SpikeShip 46.448729 4 8 89 SpikeShip 44.863621 4 9 92 SpikeShip 55.092553 8 0 95 SpikeShip 60.382288 8 1 98 SpikeShip 60.142841 8 2 101 SpikeShip 69.834260 8 3 104 SpikeShip 69.599364 8 4 107 SpikeShip 64.017080 8 5 110 SpikeShip 68.389591 8 6 113 SpikeShip 69.100049 8 7 116 SpikeShip 70.186455 8 8 119 SpikeShip 69.988240 8 9 122 SpikeShip 91.211910 16 0 125 SpikeShip 91.236524 16 1 128 SpikeShip 93.041180 16 2 131 SpikeShip 93.382406 16 3 134 SpikeShip 92.640255 16 4 137 SpikeShip 90.234501 16 5 140 SpikeShip 91.471357 16 6 143 SpikeShip 91.379879 16 7 146 SpikeShip 87.279026 16 8 149 SpikeShip 90.544167 16 9 152 SpikeShip 114.285030 32 0 155 SpikeShip 114.112853 32 1 158 SpikeShip 115.266028 32 2 161 SpikeShip 113.578928 32 3 164 SpikeShip 112.981349 32 4 167 SpikeShip 114.784985 32 5 170 SpikeShip 113.099118 32 6 173 SpikeShip 114.157975 32 7 176 SpikeShip 115.414881 32 8 179 SpikeShip 112.219345 32 9 In\u00a0[76]: Copied! <pre>l_cores = np.unique(df_comp_time['cores'])\nl_cores\n</pre> l_cores = np.unique(df_comp_time['cores']) l_cores Out[76]: <pre>array([ 1,  2,  4,  8, 16, 32])</pre> In\u00a0[77]: Copied! <pre>temp_mean = [df_comp_time[(df_comp_time.metric == 'SPIKE') &amp; (df_comp_time.cores == i)]['time'].mean() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].mean() #[np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_std  = [df_comp_time[(df_comp_time.metric == 'SPIKE') &amp; (df_comp_time.cores == i)]['time'].std() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].std() #[np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_mean = np.array(temp_mean)\ntemp_std = np.array(temp_std)\nfig, axs = plt.subplots(figsize=(3*3,4), facecolor='w', ncols=3, constrained_layout=True)\nxticks = [\"$2^%i$\" % i for i in range(len(l_cores))]\naxs[0].bar(xticks, temp_mean, color='#AED581', edgecolor='k') # '#8E44AD'\naxs[0].errorbar(xticks, temp_mean, yerr=temp_std, fmt='', color='k', mew=4, ls='')\n\naxs[0].set_xlabel(\"# Threads\", fontsize=12)\naxs[0].set_ylabel(\"Time [s]\", fontsize=12)\naxs[0].set_title(\"SPIKE\", fontsize=14)\n\n# RISPIKE\ntemp_mean = [df_comp_time[(df_comp_time.metric == 'RISPIKE') &amp; (df_comp_time.cores == i)]['time'].mean() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].mean() #[np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_std  = [df_comp_time[(df_comp_time.metric == 'RISPIKE') &amp; (df_comp_time.cores == i)]['time'].std() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].std() #[np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_mean = np.array(temp_mean)\ntemp_std = np.array(temp_std)\nxticks = [\"$2^%i$\" % i for i in range(len(l_cores))]\naxs[1].bar(xticks, temp_mean, color='#AED581', edgecolor='k') # '#8E44AD'\naxs[1].errorbar(xticks, temp_mean, yerr=temp_std, fmt='', color='k', mew=4, ls='')\n\naxs[1].set_xlabel(\"# Threads\", fontsize=12)\naxs[1].set_ylabel(\"Time [s]\", fontsize=12)\naxs[1].set_title(\"RISPIKE\", fontsize=14)\n\n\n# RISPIKE\ntemp_mean = [df_comp_time[(df_comp_time.metric == 'SpikeShip') &amp; (df_comp_time.cores == i)]['time'].mean() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].mean() #[np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_std  = [df_comp_time[(df_comp_time.metric == 'SpikeShip') &amp; (df_comp_time.cores == i)]['time'].std() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].std() #[np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ]\ntemp_mean = np.array(temp_mean)\ntemp_std = np.array(temp_std)\nxticks = [\"$2^%i$\" % i for i in range(len(l_cores))]\naxs[2].bar(xticks, temp_mean, color='#AED581', edgecolor='k') # '#8E44AD'\naxs[2].errorbar(xticks, temp_mean, yerr=temp_std, fmt='', color='k', mew=4, ls='')\n\naxs[2].set_xlabel(\"# Threads\", fontsize=12)\naxs[2].set_ylabel(\"Time [s]\", fontsize=12)\naxs[2].set_title(\"SpikeShip\", fontsize=14)\n# axs[1].set_xlabel(\"# Cores\", fontsize=12)\n# axs[1].set_ylabel(\"Efficiency\", fontsize=12)\n\n#fig.suptitle(\"SpikeShip\", fontsize=12)\n</pre> temp_mean = [df_comp_time[(df_comp_time.metric == 'SPIKE') &amp; (df_comp_time.cores == i)]['time'].mean() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].mean() #[np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_std  = [df_comp_time[(df_comp_time.metric == 'SPIKE') &amp; (df_comp_time.cores == i)]['time'].std() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].std() #[np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_mean = np.array(temp_mean) temp_std = np.array(temp_std) fig, axs = plt.subplots(figsize=(3*3,4), facecolor='w', ncols=3, constrained_layout=True) xticks = [\"$2^%i$\" % i for i in range(len(l_cores))] axs[0].bar(xticks, temp_mean, color='#AED581', edgecolor='k') # '#8E44AD' axs[0].errorbar(xticks, temp_mean, yerr=temp_std, fmt='', color='k', mew=4, ls='')  axs[0].set_xlabel(\"# Threads\", fontsize=12) axs[0].set_ylabel(\"Time [s]\", fontsize=12) axs[0].set_title(\"SPIKE\", fontsize=14)  # RISPIKE temp_mean = [df_comp_time[(df_comp_time.metric == 'RISPIKE') &amp; (df_comp_time.cores == i)]['time'].mean() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].mean() #[np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_std  = [df_comp_time[(df_comp_time.metric == 'RISPIKE') &amp; (df_comp_time.cores == i)]['time'].std() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].std() #[np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_mean = np.array(temp_mean) temp_std = np.array(temp_std) xticks = [\"$2^%i$\" % i for i in range(len(l_cores))] axs[1].bar(xticks, temp_mean, color='#AED581', edgecolor='k') # '#8E44AD' axs[1].errorbar(xticks, temp_mean, yerr=temp_std, fmt='', color='k', mew=4, ls='')  axs[1].set_xlabel(\"# Threads\", fontsize=12) axs[1].set_ylabel(\"Time [s]\", fontsize=12) axs[1].set_title(\"RISPIKE\", fontsize=14)   # RISPIKE temp_mean = [df_comp_time[(df_comp_time.metric == 'SpikeShip') &amp; (df_comp_time.cores == i)]['time'].mean() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].mean() #[np.mean(l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_std  = [df_comp_time[(df_comp_time.metric == 'SpikeShip') &amp; (df_comp_time.cores == i)]['time'].std() for i in l_cores] #df_comp_time[df_comp_time.metric == 'SPIKE']['time'].std() #[np.std( l_times_py_SpikeShip_pw[i*n_rep:(i+1)*n_rep]) for i in range(0,len(l_times_py_SpikeShip_pw)//n_rep) ] temp_mean = np.array(temp_mean) temp_std = np.array(temp_std) xticks = [\"$2^%i$\" % i for i in range(len(l_cores))] axs[2].bar(xticks, temp_mean, color='#AED581', edgecolor='k') # '#8E44AD' axs[2].errorbar(xticks, temp_mean, yerr=temp_std, fmt='', color='k', mew=4, ls='')  axs[2].set_xlabel(\"# Threads\", fontsize=12) axs[2].set_ylabel(\"Time [s]\", fontsize=12) axs[2].set_title(\"SpikeShip\", fontsize=14) # axs[1].set_xlabel(\"# Cores\", fontsize=12) # axs[1].set_ylabel(\"Efficiency\", fontsize=12)  #fig.suptitle(\"SpikeShip\", fontsize=12) Out[77]: <pre>Text(0.5, 1.0, 'SpikeShip')</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[206]: Copied! <pre>\n</pre> Out[206]: <pre>Text(0.5, 1.0, 'SpikeShip')</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[35]: Copied! <pre>import matplotlib.pyplot as plt\n</pre> import matplotlib.pyplot as plt In\u00a0[36]: Copied! <pre>fig, axs = plt.subplots(figsize=(2.5*4,4), facecolor='w', ncols=4, constrained_layout=True, sharey=True)\n\nl_times_py   = [l_times_py_VP_pw  , l_times_py_SPIKE_pw  , l_times_py_RISPIKE_pw  , l_times_py_SpikeShip_pw  ]\nl_times_njit = [l_times_njit_VP_pw, l_times_njit_SPIKE_pw, l_times_njit_RISPIKE_pw, l_times_njit_SpikeShip_pw]\nl_hatch = ['/', '\\\\']\nl_metric_name = ['VP(q=n)','SPIKE', 'RI-SPIKE', 'SpikeShip']\nfor i in range(4):\n    temp_mean_py   = np.mean(l_times_py[i])\n    temp_mean_njit = np.mean(l_times_njit[i])\n    temp_std_py   = np.std(l_times_py[i])\n    temp_std_njit = np.std(l_times_njit[i])\n    temp_speedup = temp_mean_py/temp_mean_njit\n    print (temp_mean_py, 'vs', temp_mean_njit, 'speed-up:', temp_speedup)\n    axs[i].bar(['Python &amp;\\nNumPy'], [temp_mean_py], edgecolor='k', hatch=l_hatch[0], color='')\n    axs[i].bar(['Compiled\\n(Numba)'],[temp_mean_njit], edgecolor='k', hatch=l_hatch[1], color='')\n    axs[i].errorbar(\n        ['Python &amp;\\nNumPy', 'Compiled\\n(Numba)'],\n        [temp_mean_py, temp_mean_njit],\n        yerr=[temp_std_py, temp_std_njit],\n        fmt='', color='k', mew=4, ls=''\n    )\n\n    axs[i].semilogy()\n\n    axs[i].set_xlabel(\"Exec. mode\", fontsize=12)\n\n    axs[i].set_title(\"%s\\n(speed-up: x%.1f)\" % (l_metric_name[i], temp_speedup), fontsize=12)\n    \n    \n    axs[i].spines['top'].set_visible(False)\n    axs[i].spines['right'].set_visible(False)\n\naxs[0].set_ylabel(\"Time [ms][LOG]\", fontsize=12)\n\n#plt.savefig('figs/comp_time_py_njit_pw.pdf', bbox_inches=\"tight\")\n</pre> fig, axs = plt.subplots(figsize=(2.5*4,4), facecolor='w', ncols=4, constrained_layout=True, sharey=True)  l_times_py   = [l_times_py_VP_pw  , l_times_py_SPIKE_pw  , l_times_py_RISPIKE_pw  , l_times_py_SpikeShip_pw  ] l_times_njit = [l_times_njit_VP_pw, l_times_njit_SPIKE_pw, l_times_njit_RISPIKE_pw, l_times_njit_SpikeShip_pw] l_hatch = ['/', '\\\\'] l_metric_name = ['VP(q=n)','SPIKE', 'RI-SPIKE', 'SpikeShip'] for i in range(4):     temp_mean_py   = np.mean(l_times_py[i])     temp_mean_njit = np.mean(l_times_njit[i])     temp_std_py   = np.std(l_times_py[i])     temp_std_njit = np.std(l_times_njit[i])     temp_speedup = temp_mean_py/temp_mean_njit     print (temp_mean_py, 'vs', temp_mean_njit, 'speed-up:', temp_speedup)     axs[i].bar(['Python &amp;\\nNumPy'], [temp_mean_py], edgecolor='k', hatch=l_hatch[0], color='')     axs[i].bar(['Compiled\\n(Numba)'],[temp_mean_njit], edgecolor='k', hatch=l_hatch[1], color='')     axs[i].errorbar(         ['Python &amp;\\nNumPy', 'Compiled\\n(Numba)'],         [temp_mean_py, temp_mean_njit],         yerr=[temp_std_py, temp_std_njit],         fmt='', color='k', mew=4, ls=''     )      axs[i].semilogy()      axs[i].set_xlabel(\"Exec. mode\", fontsize=12)      axs[i].set_title(\"%s\\n(speed-up: x%.1f)\" % (l_metric_name[i], temp_speedup), fontsize=12)               axs[i].spines['top'].set_visible(False)     axs[i].spines['right'].set_visible(False)  axs[0].set_ylabel(\"Time [ms][LOG]\", fontsize=12)  #plt.savefig('figs/comp_time_py_njit_pw.pdf', bbox_inches=\"tight\") <pre>nan vs nan speed-up: nan\n1385.0613981485367 vs nan speed-up: nan\n696.0767209529877 vs nan speed-up: nan\nnan vs nan speed-up: nan\n</pre> <pre>/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numpy/core/fromnumeric.py:3335: RuntimeWarning: Mean of empty slice.\n  out=out, **kwargs)\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numpy/core/_methods.py:161: RuntimeWarning: invalid value encountered in double_scalars\n  ret = ret.dtype.type(ret / rcount)\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numpy/core/_methods.py:217: RuntimeWarning: Degrees of freedom &lt;= 0 for slice\n  keepdims=keepdims)\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numpy/core/_methods.py:186: RuntimeWarning: invalid value encountered in true_divide\n  arrmean, rcount, out=arrmean, casting='unsafe', subok=False)\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/numpy/core/_methods.py:209: RuntimeWarning: invalid value encountered in double_scalars\n  ret = ret.dtype.type(ret / rcount)\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:14: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n  \n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/ipykernel_launcher.py:15: MatplotlibDeprecationWarning: Using a string of single character colors as a color sequence is deprecated. Use an explicit list instead.\n  from ipykernel import kernelapp as app\n</pre> Out[36]: <pre>Text(0, 0.5, 'Time [ms][LOG]')</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/test_clustering_performance/#datasets-module","title":"Datasets module\u00b6","text":""},{"location":"notebooks/test_clustering_performance/#tutorial-for-creating-a-figure-paper","title":"Tutorial for creating a figure (paper)\u00b6","text":"<p>TODO: Add as a tutorial for \"subplots\" or... joining plots thingys...</p>"},{"location":"notebooks/test_clustering_performance/#varying-q-cost-of-spike-shifts","title":"Varying q (cost of spike shifts)\u00b6","text":""},{"location":"notebooks/test_clustering_performance/#performance-compare-pythonnjitparallel-njit","title":"Performance (compare python/njit/parallel njit)\u00b6","text":""},{"location":"notebooks/test_clustering_performance/#comparison-of-pairwise-distances-parallelization","title":"Comparison of pairwise distances (parallelization)\u00b6","text":""},{"location":"notebooks/test_clustering_performance/#speed-up-analysis-via-ibm-power7-machine","title":"Speed-up analysis via IBM POWER7 machine\u00b6","text":""},{"location":"notebooks/test_distance_single_neuron/","title":"Test distance single neuron","text":"In\u00a0[66]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[67]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') In\u00a0[68]: Copied! <pre>%load_ext autoreload\n\nfrom spyketools.proc.distances.spike_metrics import pairwise_spike_distance\nfrom spyketools.proc.distances.SPIKE_distance import SPIKE_distance_single\nfrom spyketools.proc.distances.RISPIKE_distance import RISPIKE_distance_single\nfrom spyketools.proc.distances.victor_purpura_distance import VP_distance_single\nfrom spyketools.proc.distances.ISI_distance import ISI_distance_single\n%autoreload 2\n</pre> %load_ext autoreload  from spyketools.proc.distances.spike_metrics import pairwise_spike_distance from spyketools.proc.distances.SPIKE_distance import SPIKE_distance_single from spyketools.proc.distances.RISPIKE_distance import RISPIKE_distance_single from spyketools.proc.distances.victor_purpura_distance import VP_distance_single from spyketools.proc.distances.ISI_distance import ISI_distance_single %autoreload 2 <pre>The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n</pre> In\u00a0[69]: Copied! <pre>#! ls ../../docs/notebooks\n</pre> #! ls ../../docs/notebooks In\u00a0[70]: Copied! <pre>stim_label     = np.load(\"../../docs/notebooks/demo_dataset_allen/stim_label.npy\")\nspike_times    = np.load(\"../../docs/notebooks/demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"../../docs/notebooks/demo_dataset_allen/ii_spike_times.npy\")\n</pre> stim_label     = np.load(\"../../docs/notebooks/demo_dataset_allen/stim_label.npy\") spike_times    = np.load(\"../../docs/notebooks/demo_dataset_allen/spike_times.npy\") ii_spike_times = np.load(\"../../docs/notebooks/demo_dataset_allen/ii_spike_times.npy\") In\u00a0[71]: Copied! <pre>epoch_i = 225\nepoch_j = 227\n</pre> epoch_i = 225 epoch_j = 227 In\u00a0[\u00a0]: Copied! <pre>spike_time([1,2,3,4],[1,2,3,3.5],cost=0.5)\n</pre> spike_time([1,2,3,4],[1,2,3,3.5],cost=0.5) In\u00a0[92]: Copied! <pre>spike_train_i = np.array([1,2,3,4])\nspike_train_j = np.array([1,2,3])\nSPIKE_distance_single(spike_train_i, spike_train_j, t_start=0, t_end=1)\n</pre> spike_train_i = np.array([1,2,3,4]) spike_train_j = np.array([1,2,3]) SPIKE_distance_single(spike_train_i, spike_train_j, t_start=0, t_end=1)   Out[92]: <pre>0.0</pre> In\u00a0[95]: Copied! <pre>spike_train_i = np.array([1.2,2,3.2])\nspike_train_j = np.array([1,2,3])\nSPIKE_distance_single(spike_train_i, spike_train_j, t_start=0, t_end=5)\n</pre> spike_train_i = np.array([1.2,2,3.2]) spike_train_j = np.array([1,2,3]) SPIKE_distance_single(spike_train_i, spike_train_j, t_start=0, t_end=5)  Out[95]: <pre>0.11887592817462238</pre> In\u00a0[96]: Copied! <pre>spike_train_i = np.array([1,2,3,4])\nspike_train_j = np.array([1,2,3,3.5])\nSPIKE_distance_single(spike_train_i, spike_train_j, t_start=0, t_end=5)\n</pre> spike_train_i = np.array([1,2,3,4]) spike_train_j = np.array([1,2,3,3.5]) SPIKE_distance_single(spike_train_i, spike_train_j, t_start=0, t_end=5)  Out[96]: <pre>0.14177777777777778</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>import numpy as np\n    from spyketools.distances.victor_purpura_distance import SPIKE_distance\n\n    spike_train_i = np.array([1.2,2,3.2])\n    spike_train_j = np.array([1,2,3])\n    cost = 1\n    SPIKE_distance(spike_train_i, spike_train_j, cost=cost) \n    # Output: 0.4\n    ```\n\n    ```python\n    import numpy as np\n    from spyketools.distances.victor_purpura_distance import SPIKE_distance\n\n    spike_train_i = np.array([1,2,3,4])\n    spike_train_j = np.array([1,2,3,3.5])\n    cost = 0.5\n\n    SPIKE_distance(spike_train_i, spike_train_j, cost=cost) \n    # Output: 0.25\n</pre>     import numpy as np     from spyketools.distances.victor_purpura_distance import SPIKE_distance      spike_train_i = np.array([1.2,2,3.2])     spike_train_j = np.array([1,2,3])     cost = 1     SPIKE_distance(spike_train_i, spike_train_j, cost=cost)      # Output: 0.4     ```      ```python     import numpy as np     from spyketools.distances.victor_purpura_distance import SPIKE_distance      spike_train_i = np.array([1,2,3,4])     spike_train_j = np.array([1,2,3,3.5])     cost = 0.5      SPIKE_distance(spike_train_i, spike_train_j, cost=cost)      # Output: 0.25 In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[72]: Copied! <pre>spike_train_i = spike_times[ii_spike_times[0,epoch_i,0]:ii_spike_times[0,epoch_i,1]]\nspike_train_j = spike_times[ii_spike_times[0,epoch_j,0]:ii_spike_times[0,epoch_j,1]]\n</pre> spike_train_i = spike_times[ii_spike_times[0,epoch_i,0]:ii_spike_times[0,epoch_i,1]] spike_train_j = spike_times[ii_spike_times[0,epoch_j,0]:ii_spike_times[0,epoch_j,1]] In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[73]: Copied! <pre>spike_train_i\n</pre> spike_train_i Out[73]: <pre>array([0.0077216 , 0.03715495, 0.05015496, 0.05685496, 0.0608883 ,\n       0.06405497, 0.0678883 , 0.07178831, 0.07738831, 0.08398831,\n       0.08948832, 0.09852165])</pre> In\u00a0[74]: Copied! <pre>spike_train_j\n</pre> spike_train_j Out[74]: <pre>array([0.00845494, 0.05885497, 0.07138831, 0.07832164, 0.08728831])</pre> In\u00a0[75]: Copied! <pre>%%time\nSPIKE_val_py = SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py')\n</pre> %%time SPIKE_val_py = SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py') <pre>CPU times: user 0 ns, sys: 477 \u00b5s, total: 477 \u00b5s\nWall time: 430 \u00b5s\n</pre> In\u00a0[76]: Copied! <pre>%%time\nSPIKE_val_njit = SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit')\n</pre> %%time SPIKE_val_njit = SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit') <pre>CPU times: user 17 \u00b5s, sys: 1e+03 ns, total: 18 \u00b5s\nWall time: 21 \u00b5s\n</pre> In\u00a0[77]: Copied! <pre>%%time\nRISPIKE_val_py = RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py')\n</pre> %%time RISPIKE_val_py = RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py') <pre>CPU times: user 239 \u00b5s, sys: 16 \u00b5s, total: 255 \u00b5s\nWall time: 241 \u00b5s\n</pre> In\u00a0[78]: Copied! <pre>%%time\nRISPIKE_val_njit = RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit')\n</pre> %%time RISPIKE_val_njit = RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit') <pre>CPU times: user 18 \u00b5s, sys: 1 \u00b5s, total: 19 \u00b5s\nWall time: 21.7 \u00b5s\n</pre> In\u00a0[79]: Copied! <pre>%%time\nVP_val_py = VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=0.1, mode='py')\n</pre> %%time VP_val_py = VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=0.1, mode='py') <pre>CPU times: user 1.03 ms, sys: 73 \u00b5s, total: 1.11 ms\nWall time: 716 \u00b5s\n</pre> In\u00a0[80]: Copied! <pre>%%time\nVP_val_njit = VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=0.1, mode='njit')\n</pre> %%time VP_val_njit = VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=0.1, mode='njit') <pre>CPU times: user 24 \u00b5s, sys: 2 \u00b5s, total: 26 \u00b5s\nWall time: 29.6 \u00b5s\n</pre> In\u00a0[81]: Copied! <pre>%%time\nISI_val_py = ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py')\n</pre> %%time ISI_val_py = ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py') <pre>CPU times: user 78 \u00b5s, sys: 5 \u00b5s, total: 83 \u00b5s\nWall time: 86.1 \u00b5s\n</pre> In\u00a0[82]: Copied! <pre>%%time\nISI_val_njit = ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit')\n</pre> %%time ISI_val_njit = ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit') <pre>CPU times: user 17 \u00b5s, sys: 0 ns, total: 17 \u00b5s\nWall time: 19.1 \u00b5s\n</pre> <p>Test</p> In\u00a0[84]: Copied! <pre>print (ISI_val_py == ISI_val_njit)\nprint (SPIKE_val_py == SPIKE_val_njit)\nprint (RISPIKE_val_py == RISPIKE_val_njit)\nprint (VP_val_py == VP_val_njit)\n</pre> print (ISI_val_py == ISI_val_njit) print (SPIKE_val_py == SPIKE_val_njit) print (RISPIKE_val_py == RISPIKE_val_njit) print (VP_val_py == VP_val_njit) <pre>True\nTrue\nTrue\nTrue\n</pre> In\u00a0[19]: Copied! <pre>firing_rate = 30\n</pre> firing_rate = 30 In\u00a0[20]: Copied! <pre>def run_simple_test():\n    \n    spike_train_i = np.random.randint(1000, size=firing_rate)/1000.\n    spike_train_j = np.random.randint(1000, size=firing_rate)/1000.\n    \n    SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py')\n    SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit')\n\nrun_simple_test()\n</pre> def run_simple_test():          spike_train_i = np.random.randint(1000, size=firing_rate)/1000.     spike_train_j = np.random.randint(1000, size=firing_rate)/1000.          SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='py')     SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1, mode='njit')  run_simple_test() In\u00a0[21]: Copied! <pre>from time import time\n</pre> from time import time In\u00a0[27]: Copied! <pre>def compute_speed_up(metric, params={}):\n    times_python = []; times_compiled = []; l_firing_rates = []\n    \n    unique_firing_rates = np.array([2, 5, 10, 20, 30, 40])\n    for temp_firing_rate in unique_firing_rates:#, 25,50,100]:\n        for i_rep in range(100):\n            spike_train_i = np.random.randint(1_000, size=temp_firing_rate)/1_000.\n            spike_train_j = np.random.randint(1_000, size=temp_firing_rate)/1_000.\n            \n            if metric=='ISI':\n                \n                cost = temp_firing_rate\n                \n                time_diff = time()\n                ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')\n                time_diff = time() - time_diff\n                times_python.append(time_diff)\n\n                time_diff = time()\n                ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')\n                time_diff = time() - time_diff\n                times_compiled.append(time_diff)   \n            \n                l_firing_rates.append(temp_firing_rate)\n    \n            elif metric=='SPIKE':\n                    \n                time_diff = time()\n                SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')\n                time_diff = time() - time_diff\n                times_python.append(time_diff)\n\n                time_diff = time()\n                SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')\n                time_diff = time() - time_diff\n                times_compiled.append(time_diff)   \n            \n                l_firing_rates.append(temp_firing_rate)\n            \n            elif metric=='RISPIKE':\n                \n                time_diff = time()\n                RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')\n                time_diff = time() - time_diff\n                times_python.append(time_diff)\n\n                time_diff = time()\n                RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')\n                time_diff = time() - time_diff\n                times_compiled.append(time_diff)   \n            \n                l_firing_rates.append(temp_firing_rate)\n                \n            elif metric=='VP':\n                \n                cost = temp_firing_rate\n                \n                time_diff = time()\n                VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=cost, mode='py')\n                time_diff = time() - time_diff\n                times_python.append(time_diff)\n\n                time_diff = time()\n                VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=cost, mode='njit')\n                time_diff = time() - time_diff\n                times_compiled.append(time_diff)   \n            \n                l_firing_rates.append(temp_firing_rate)\n            \n            \n    times_python   = np.array(times_python)\n    times_compiled = np.array(times_compiled)\n    l_firing_rates = np.array(l_firing_rates)\n    l_mean_speedup = []; l_std_speedup = []; \n    for tmp in np.unique(l_firing_rates):\n        temp_mean_speedup  = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])\n        temp_std_speedup   = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])\n        l_mean_speedup.append(temp_mean_speedup)\n        l_std_speedup.append(temp_std_speedup)\n    l_mean_speedup = np.array(l_mean_speedup)\n    l_std_speedup  = np.array(l_std_speedup )\n    \n    return l_mean_speedup, l_std_speedup#, l_firing_rates\n</pre> def compute_speed_up(metric, params={}):     times_python = []; times_compiled = []; l_firing_rates = []          unique_firing_rates = np.array([2, 5, 10, 20, 30, 40])     for temp_firing_rate in unique_firing_rates:#, 25,50,100]:         for i_rep in range(100):             spike_train_i = np.random.randint(1_000, size=temp_firing_rate)/1_000.             spike_train_j = np.random.randint(1_000, size=temp_firing_rate)/1_000.                          if metric=='ISI':                                  cost = temp_firing_rate                                  time_diff = time()                 ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')                 time_diff = time() - time_diff                 times_python.append(time_diff)                  time_diff = time()                 ISI_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')                 time_diff = time() - time_diff                 times_compiled.append(time_diff)                                 l_firing_rates.append(temp_firing_rate)                  elif metric=='SPIKE':                                      time_diff = time()                 SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')                 time_diff = time() - time_diff                 times_python.append(time_diff)                  time_diff = time()                 SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')                 time_diff = time() - time_diff                 times_compiled.append(time_diff)                                 l_firing_rates.append(temp_firing_rate)                          elif metric=='RISPIKE':                                  time_diff = time()                 RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')                 time_diff = time() - time_diff                 times_python.append(time_diff)                  time_diff = time()                 RISPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')                 time_diff = time() - time_diff                 times_compiled.append(time_diff)                                 l_firing_rates.append(temp_firing_rate)                              elif metric=='VP':                                  cost = temp_firing_rate                                  time_diff = time()                 VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=cost, mode='py')                 time_diff = time() - time_diff                 times_python.append(time_diff)                  time_diff = time()                 VP_distance_single(t1=spike_train_i, t2=spike_train_j, cost=cost, mode='njit')                 time_diff = time() - time_diff                 times_compiled.append(time_diff)                                 l_firing_rates.append(temp_firing_rate)                               times_python   = np.array(times_python)     times_compiled = np.array(times_compiled)     l_firing_rates = np.array(l_firing_rates)     l_mean_speedup = []; l_std_speedup = [];      for tmp in np.unique(l_firing_rates):         temp_mean_speedup  = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])         temp_std_speedup   = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])         l_mean_speedup.append(temp_mean_speedup)         l_std_speedup.append(temp_std_speedup)     l_mean_speedup = np.array(l_mean_speedup)     l_std_speedup  = np.array(l_std_speedup )          return l_mean_speedup, l_std_speedup#, l_firing_rates In\u00a0[31]: Copied! <pre>l_mean_speedup_ISI, l_std_speedup_ISI     = compute_speed_up(metric='ISI')\n</pre> l_mean_speedup_ISI, l_std_speedup_ISI     = compute_speed_up(metric='ISI') In\u00a0[32]: Copied! <pre>l_mean_speedup_SPIKE, l_std_speedup_SPIKE     = compute_speed_up(metric='SPIKE')\n</pre> l_mean_speedup_SPIKE, l_std_speedup_SPIKE     = compute_speed_up(metric='SPIKE') In\u00a0[33]: Copied! <pre>l_mean_speedup_RISPIKE, l_std_speedup_RISPIKE = compute_speed_up(metric='RISPIKE')\n</pre> l_mean_speedup_RISPIKE, l_std_speedup_RISPIKE = compute_speed_up(metric='RISPIKE') In\u00a0[35]: Copied! <pre>l_mean_speedup_VP, l_std_speedup_VP           = compute_speed_up(metric='VP')\n</pre> l_mean_speedup_VP, l_std_speedup_VP           = compute_speed_up(metric='VP') In\u00a0[36]: Copied! <pre>l_mean_speedup_RISPIKE\n</pre> l_mean_speedup_RISPIKE Out[36]: <pre>array([ 30.37529724,  38.12075175,  51.95217016,  74.08149055,\n        89.49416355, 101.20936102])</pre> In\u00a0[40]: Copied! <pre>fig, axs = plt.subplots(figsize=(4,4), facecolor='w')\n\n##axs.plot(l_firing_rates, times_python / times_compiled , ls='', ms=6, marker='o', color='k', fillstyle='none', alpha=0.2)\naxs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_ISI    , color='green'    , label='ISI'    )\naxs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_SPIKE  , color='royalblue', label='SPIKE'  )\naxs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_RISPIKE, color='black'    , label='RISPIKE')\naxs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_VP     , color='orange'   , label='VP'     )\naxs.fill_between(\n    np.array([2, 5, 10, 20, 30, 40]),\n    l_mean_speedup_ISI   - (l_std_speedup_ISI   / np.sqrt(100)),\n    l_mean_speedup_ISI   + (l_std_speedup_ISI   / np.sqrt(100)),\n    alpha=0.05,\n    color='green'\n)\naxs.fill_between(\n    np.array([2, 5, 10, 20, 30, 40]),\n    l_mean_speedup_SPIKE - (l_std_speedup_SPIKE / np.sqrt(100)),\n    l_mean_speedup_SPIKE + (l_std_speedup_SPIKE / np.sqrt(100)),\n    alpha=0.05,\n    color='royalblue'\n)\naxs.fill_between(\n    np.array([2, 5, 10, 20, 30, 40]),\n    l_mean_speedup_RISPIKE - (l_std_speedup_RISPIKE / np.sqrt(100)),\n    l_mean_speedup_RISPIKE + (l_std_speedup_RISPIKE / np.sqrt(100)),\n    alpha=0.05,\n    color='black'\n)\naxs.fill_between(\n    np.array([2, 5, 10, 20, 30, 40]),\n    l_mean_speedup_VP - (l_std_speedup_VP / np.sqrt(100)),\n    l_mean_speedup_VP + (l_std_speedup_VP / np.sqrt(100)),\n    alpha=0.15,\n    color='orange'\n)\n\naxs.set_xlabel(\"$Firing\\ rates$\"   , fontsize=14)\naxs.set_ylabel(\"$Speed$-$up$\", fontsize=14)\n_ = axs.set_xticks(np.array([2, 5, 10, 20, 30, 40]))\n\nplt.legend(frameon=False, fontsize=14, bbox_to_anchor=(1.05, 1))\n</pre> fig, axs = plt.subplots(figsize=(4,4), facecolor='w')  ##axs.plot(l_firing_rates, times_python / times_compiled , ls='', ms=6, marker='o', color='k', fillstyle='none', alpha=0.2) axs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_ISI    , color='green'    , label='ISI'    ) axs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_SPIKE  , color='royalblue', label='SPIKE'  ) axs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_RISPIKE, color='black'    , label='RISPIKE') axs.plot(np.array([2, 5, 10, 20, 30, 40]), l_mean_speedup_VP     , color='orange'   , label='VP'     ) axs.fill_between(     np.array([2, 5, 10, 20, 30, 40]),     l_mean_speedup_ISI   - (l_std_speedup_ISI   / np.sqrt(100)),     l_mean_speedup_ISI   + (l_std_speedup_ISI   / np.sqrt(100)),     alpha=0.05,     color='green' ) axs.fill_between(     np.array([2, 5, 10, 20, 30, 40]),     l_mean_speedup_SPIKE - (l_std_speedup_SPIKE / np.sqrt(100)),     l_mean_speedup_SPIKE + (l_std_speedup_SPIKE / np.sqrt(100)),     alpha=0.05,     color='royalblue' ) axs.fill_between(     np.array([2, 5, 10, 20, 30, 40]),     l_mean_speedup_RISPIKE - (l_std_speedup_RISPIKE / np.sqrt(100)),     l_mean_speedup_RISPIKE + (l_std_speedup_RISPIKE / np.sqrt(100)),     alpha=0.05,     color='black' ) axs.fill_between(     np.array([2, 5, 10, 20, 30, 40]),     l_mean_speedup_VP - (l_std_speedup_VP / np.sqrt(100)),     l_mean_speedup_VP + (l_std_speedup_VP / np.sqrt(100)),     alpha=0.15,     color='orange' )  axs.set_xlabel(\"$Firing\\ rates$\"   , fontsize=14) axs.set_ylabel(\"$Speed$-$up$\", fontsize=14) _ = axs.set_xticks(np.array([2, 5, 10, 20, 30, 40]))  plt.legend(frameon=False, fontsize=14, bbox_to_anchor=(1.05, 1)) Out[40]: <pre>&lt;matplotlib.legend.Legend at 0x7fcc6d042f28&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[55]: Copied! <pre>from numba import njit\n</pre> from numba import njit In\u00a0[60]: Copied! <pre>@njit\ndef njit_get_min_dist(spike_time, spike_train, N, start_index, t_start, t_end):\n    # TODO: MOVE.\n\n\"\"\" Returns the minimal distance |spike_time - spike_train[i]| \n    with i&gt;=start_index.\n    \"\"\"\n    # start with the distance to the start time\n    d = np.abs(spike_time - t_start)\n    if start_index &lt; 0:\n        start_index = 0\n    while start_index &lt; N:\n        d_temp = np.abs(spike_time - spike_train[start_index])\n        if d_temp &gt; d:\n            return d\n        else:\n            d = d_temp\n        start_index += 1\n\n    # finally, check the distance to end time\n    d_temp = np.abs(t_end - spike_time)\n    if d_temp &gt; d:\n        return d\n    else:\n        return d_temp\n</pre> @njit def njit_get_min_dist(spike_time, spike_train, N, start_index, t_start, t_end):     # TODO: MOVE.      \"\"\" Returns the minimal distance |spike_time - spike_train[i]|      with i&gt;=start_index.     \"\"\"     # start with the distance to the start time     d = np.abs(spike_time - t_start)     if start_index &lt; 0:         start_index = 0     while start_index &lt; N:         d_temp = np.abs(spike_time - spike_train[start_index])         if d_temp &gt; d:             return d         else:             d = d_temp         start_index += 1      # finally, check the distance to end time     d_temp = np.abs(t_end - spike_time)     if d_temp &gt; d:         return d     else:         return d_temp In\u00a0[66]: Copied! <pre>@njit\ndef njit_avrg(isi1, isi2):\n    # TODO: Move\n    return 0.5*(isi1+isi2)*(isi1+isi2)\n</pre> @njit def njit_avrg(isi1, isi2):     # TODO: Move     return 0.5*(isi1+isi2)*(isi1+isi2) In\u00a0[94]: Copied! <pre>@njit\ndef njit_SPIKE_distance(t1, t2, t_start, t_end):\n\n    N1=0; N2=0; index1=0; index2=0; index=0;\n    t_p1=0.; t_f1=0.; t_p2=0.; t_f2=0.; dt_p1=0.; dt_p2=0.; dt_f1=0.; dt_f2=0.;\n    isi1=0.; isi2=0.; s1=0.; s2=0.;\n    y_start=0.; y_end=0.; t_last=0.; t_current=0.; spike_value=0.;\n    \n    t_aux1 = np.array([0.,0.], dtype=np.float64)\n    t_aux2 = np.array([0.,0.], dtype=np.float64)\n    spike_value = 0.0\n\n    N1 = len(t1)\n    N2 = len(t2)\n\n    # we can assume at least one spikes per spike train\n    assert N1 &gt; 0\n    assert N2 &gt; 0\n    \n    t_last = t_start\n    \n    t_aux1[0] = np.min(np.array([t_start, 2*t1[0]-t1[1]])) if N1 &gt; 1 else t_start\n    t_aux1[1] = np.max(np.array([t_end, 2*t1[N1-1]-t1[N1-2]])) if N1 &gt; 1 else t_end\n    t_aux2[0] = np.min(np.array([t_start, 2*t2[0]-t2[1]])) if N2 &gt; 1 else t_start\n    t_aux2[1] = np.max(np.array([t_end, 2*t2[N2-1]+-t2[N2-2]])) if N2 &gt; 1 else t_end\n    \n    t_p1 = t_start if (t1[0] == t_start) else t_aux1[0]\n    t_p2 = t_start if (t2[0] == t_start) else t_aux2[0]\n    if t1[0] &gt; t_start:\n        # dt_p1 = t2[0]-t_start\n        t_f1 = t1[0]\n        dt_f1 = njit_get_min_dist(t_f1, t2, N2, 0, t_aux2[0], t_aux2[1])\n        isi1 = np.max(np.array([t_f1-t_start, t1[1]-t1[0]])) if N1 &gt; 1 else t_f1-t_start\n        dt_p1 = dt_f1\n        s1 = dt_p1\n        index1 = -1\n    else:\n        t_f1 = t1[1] if N1 &gt; 1 else t_end\n        dt_f1 = njit_get_min_dist(t_f1, t2, N2, 0, t_aux2[0], t_aux2[1])\n        dt_p1 = njit_get_min_dist(t_p1, t2, N2, 0, t_aux2[0], t_aux2[1])\n        isi1 = t_f1-t1[0]\n        s1 = dt_p1\n        index1 = 0\n    if t2[0] &gt; t_start:\n        t_f2 = t2[0]\n        dt_f2 = njit_get_min_dist(t_f2, t1, N1, 0, t_aux1[0], t_aux1[1])\n        dt_p2 = dt_f2\n        isi2 = np.max(np.array([t_f2-t_start, t2[1]-t2[0]])) if N2 &gt; 1 else t_f2-t_start\n        s2 = dt_p2\n        index2 = -1\n    else:\n        t_f2 = t2[1] if N2 &gt; 1 else t_end\n        dt_f2 = njit_get_min_dist(t_f2, t1, N1, 0, t_aux1[0], t_aux1[1])\n        dt_p2 = njit_get_min_dist(t_p2, t1, N1, 0, t_aux1[0], t_aux1[1])\n        isi2 = t_f2-t2[0]\n        s2 = dt_p2\n        index2 = 0\n\n    y_start = (s1*isi2 + s2*isi1) / njit_avrg(isi1, isi2)\n    index = 1\n\n    while index1+index2 &lt; N1+N2-2:\n        if (index1 &lt; N1-1) and (t_f1 &lt; t_f2 or index2 == N2-1):\n            index1 += 1\n            s1 = dt_f1*(t_f1-t_p1) / isi1\n            dt_p1 = dt_f1\n            t_p1 = t_f1\n            if index1 &lt; N1-1:\n                t_f1 = t1[index1+1]\n            else:\n                t_f1 = t_aux1[1]\n            t_curr =  t_p1\n            s2 = (dt_p2*(t_f2-t_p1) + dt_f2*(t_p1-t_p2)) / isi2\n            y_end = (s1*isi2 + s2*isi1)/njit_avrg(isi1, isi2)\n\n            spike_value += 0.5*(y_start + y_end) * (t_curr - t_last)\n\n            if index1 &lt; N1-1:\n                dt_f1 = njit_get_min_dist(t_f1, t2, N2, index2,\n                                            t_aux2[0], t_aux2[1])\n                isi1 = t_f1-t_p1\n                s1 = dt_p1\n            else:\n                dt_f1 = dt_p1\n                isi1 = np.max(np.array([t_end-t1[N1-1], t1[N1-1]-t1[N1-2]])) if N1 &gt; 1 \\\n                       else t_end-t1[N1-1]\n                s1 = dt_p1\n            y_start = (s1*isi2 + s2*isi1)/njit_avrg(isi1, isi2)\n        elif (index2 &lt; N2-1) and (t_f1 &gt; t_f2 or index1 == N1-1):\n            index2 += 1\n            s2 = dt_f2*(t_f2-t_p2) / isi2\n            dt_p2 = dt_f2\n            t_p2 = t_f2\n            if index2 &lt; N2-1:\n                t_f2 = t2[index2+1]\n            else:\n                t_f2 = t_aux2[1]\n            t_curr = t_p2\n            s1 = (dt_p1*(t_f1-t_p2) + dt_f1*(t_p2-t_p1)) / isi1\n            y_end = (s1*isi2 + s2*isi1) / njit_avrg(isi1, isi2)\n\n            spike_value += 0.5*(y_start + y_end) * (t_curr - t_last)\n            \n            if index2 &lt; N2-1:\n                dt_f2 = njit_get_min_dist(t_f2, t1, N1, index1,\n                                            t_aux1[0], t_aux1[1])\n                isi2 = t_f2-t_p2\n                s2 = dt_p2\n            else:\n                dt_f2 = dt_p2\n                isi2 = np.max(np.array([t_end-t2[N2-1], t2[N2-1]-t2[N2-2]])) if N2 &gt; 1 \\\n                       else t_end-t2[N2-1]\n                s2 = dt_p2\n                \n            y_start = (s1*isi2 + s2*isi1)/njit_avrg(isi1, isi2)\n        else: # t_f1 == t_f2 - generate only one event\n            index1 += 1\n            index2 += 1\n            t_p1 = t_f1\n            t_p2 = t_f2\n            dt_p1 = 0.0\n            dt_p2 = 0.0\n            t_curr = t_f1\n            y_end = 0.0\n            spike_value += 0.5*(y_start + y_end) * (t_curr - t_last)\n            y_start = 0.0\n            if index1 &lt; N1-1:\n                t_f1 = t1[index1+1]\n                dt_f1 = njit_get_min_dist(t_f1, t2, N2, index2,\n                                            t_aux2[0], t_aux2[1])\n                isi1 = t_f1 - t_p1\n            else:\n                t_f1 = t_aux1[1]\n                dt_f1 = dt_p1\n                isi1 = np.max(np.array([t_end-t1[N1-1], t1[N1-1]-t1[N1-2]])) if N1 &gt; 1 \\\n                       else t_end-t1[N1-1]\n            if index2 &lt; N2-1:\n                t_f2 = t2[index2+1]\n                dt_f2 = njit_get_min_dist(t_f2, t1, N1, index1,\n                                            t_aux1[0], t_aux1[1])\n                isi2 = t_f2 - t_p2\n            else:\n                t_f2 = t_aux2[1]\n                dt_f2 = dt_p2\n                isi2 = np.max(np.array([t_end-t2[N2-1], t2[N2-1]-t2[N2-2]])) if N2 &gt; 1 \\\n                       else t_end-t2[N2-1]\n        index += 1\n        t_last = t_curr\n    s1 = dt_f1\n    s2 = dt_f2\n    y_end = (s1*isi2 + s2*isi1) / njit_avrg(isi1, isi2)\n\n    spike_value += 0.5*(y_start + y_end) * (t_end - t_last)\n\n    return spike_value / (t_end-t_start)\n</pre> @njit def njit_SPIKE_distance(t1, t2, t_start, t_end):      N1=0; N2=0; index1=0; index2=0; index=0;     t_p1=0.; t_f1=0.; t_p2=0.; t_f2=0.; dt_p1=0.; dt_p2=0.; dt_f1=0.; dt_f2=0.;     isi1=0.; isi2=0.; s1=0.; s2=0.;     y_start=0.; y_end=0.; t_last=0.; t_current=0.; spike_value=0.;          t_aux1 = np.array([0.,0.], dtype=np.float64)     t_aux2 = np.array([0.,0.], dtype=np.float64)     spike_value = 0.0      N1 = len(t1)     N2 = len(t2)      # we can assume at least one spikes per spike train     assert N1 &gt; 0     assert N2 &gt; 0          t_last = t_start          t_aux1[0] = np.min(np.array([t_start, 2*t1[0]-t1[1]])) if N1 &gt; 1 else t_start     t_aux1[1] = np.max(np.array([t_end, 2*t1[N1-1]-t1[N1-2]])) if N1 &gt; 1 else t_end     t_aux2[0] = np.min(np.array([t_start, 2*t2[0]-t2[1]])) if N2 &gt; 1 else t_start     t_aux2[1] = np.max(np.array([t_end, 2*t2[N2-1]+-t2[N2-2]])) if N2 &gt; 1 else t_end          t_p1 = t_start if (t1[0] == t_start) else t_aux1[0]     t_p2 = t_start if (t2[0] == t_start) else t_aux2[0]     if t1[0] &gt; t_start:         # dt_p1 = t2[0]-t_start         t_f1 = t1[0]         dt_f1 = njit_get_min_dist(t_f1, t2, N2, 0, t_aux2[0], t_aux2[1])         isi1 = np.max(np.array([t_f1-t_start, t1[1]-t1[0]])) if N1 &gt; 1 else t_f1-t_start         dt_p1 = dt_f1         s1 = dt_p1         index1 = -1     else:         t_f1 = t1[1] if N1 &gt; 1 else t_end         dt_f1 = njit_get_min_dist(t_f1, t2, N2, 0, t_aux2[0], t_aux2[1])         dt_p1 = njit_get_min_dist(t_p1, t2, N2, 0, t_aux2[0], t_aux2[1])         isi1 = t_f1-t1[0]         s1 = dt_p1         index1 = 0     if t2[0] &gt; t_start:         t_f2 = t2[0]         dt_f2 = njit_get_min_dist(t_f2, t1, N1, 0, t_aux1[0], t_aux1[1])         dt_p2 = dt_f2         isi2 = np.max(np.array([t_f2-t_start, t2[1]-t2[0]])) if N2 &gt; 1 else t_f2-t_start         s2 = dt_p2         index2 = -1     else:         t_f2 = t2[1] if N2 &gt; 1 else t_end         dt_f2 = njit_get_min_dist(t_f2, t1, N1, 0, t_aux1[0], t_aux1[1])         dt_p2 = njit_get_min_dist(t_p2, t1, N1, 0, t_aux1[0], t_aux1[1])         isi2 = t_f2-t2[0]         s2 = dt_p2         index2 = 0      y_start = (s1*isi2 + s2*isi1) / njit_avrg(isi1, isi2)     index = 1      while index1+index2 &lt; N1+N2-2:         if (index1 &lt; N1-1) and (t_f1 &lt; t_f2 or index2 == N2-1):             index1 += 1             s1 = dt_f1*(t_f1-t_p1) / isi1             dt_p1 = dt_f1             t_p1 = t_f1             if index1 &lt; N1-1:                 t_f1 = t1[index1+1]             else:                 t_f1 = t_aux1[1]             t_curr =  t_p1             s2 = (dt_p2*(t_f2-t_p1) + dt_f2*(t_p1-t_p2)) / isi2             y_end = (s1*isi2 + s2*isi1)/njit_avrg(isi1, isi2)              spike_value += 0.5*(y_start + y_end) * (t_curr - t_last)              if index1 &lt; N1-1:                 dt_f1 = njit_get_min_dist(t_f1, t2, N2, index2,                                             t_aux2[0], t_aux2[1])                 isi1 = t_f1-t_p1                 s1 = dt_p1             else:                 dt_f1 = dt_p1                 isi1 = np.max(np.array([t_end-t1[N1-1], t1[N1-1]-t1[N1-2]])) if N1 &gt; 1 \\                        else t_end-t1[N1-1]                 s1 = dt_p1             y_start = (s1*isi2 + s2*isi1)/njit_avrg(isi1, isi2)         elif (index2 &lt; N2-1) and (t_f1 &gt; t_f2 or index1 == N1-1):             index2 += 1             s2 = dt_f2*(t_f2-t_p2) / isi2             dt_p2 = dt_f2             t_p2 = t_f2             if index2 &lt; N2-1:                 t_f2 = t2[index2+1]             else:                 t_f2 = t_aux2[1]             t_curr = t_p2             s1 = (dt_p1*(t_f1-t_p2) + dt_f1*(t_p2-t_p1)) / isi1             y_end = (s1*isi2 + s2*isi1) / njit_avrg(isi1, isi2)              spike_value += 0.5*(y_start + y_end) * (t_curr - t_last)                          if index2 &lt; N2-1:                 dt_f2 = njit_get_min_dist(t_f2, t1, N1, index1,                                             t_aux1[0], t_aux1[1])                 isi2 = t_f2-t_p2                 s2 = dt_p2             else:                 dt_f2 = dt_p2                 isi2 = np.max(np.array([t_end-t2[N2-1], t2[N2-1]-t2[N2-2]])) if N2 &gt; 1 \\                        else t_end-t2[N2-1]                 s2 = dt_p2                              y_start = (s1*isi2 + s2*isi1)/njit_avrg(isi1, isi2)         else: # t_f1 == t_f2 - generate only one event             index1 += 1             index2 += 1             t_p1 = t_f1             t_p2 = t_f2             dt_p1 = 0.0             dt_p2 = 0.0             t_curr = t_f1             y_end = 0.0             spike_value += 0.5*(y_start + y_end) * (t_curr - t_last)             y_start = 0.0             if index1 &lt; N1-1:                 t_f1 = t1[index1+1]                 dt_f1 = njit_get_min_dist(t_f1, t2, N2, index2,                                             t_aux2[0], t_aux2[1])                 isi1 = t_f1 - t_p1             else:                 t_f1 = t_aux1[1]                 dt_f1 = dt_p1                 isi1 = np.max(np.array([t_end-t1[N1-1], t1[N1-1]-t1[N1-2]])) if N1 &gt; 1 \\                        else t_end-t1[N1-1]             if index2 &lt; N2-1:                 t_f2 = t2[index2+1]                 dt_f2 = njit_get_min_dist(t_f2, t1, N1, index1,                                             t_aux1[0], t_aux1[1])                 isi2 = t_f2 - t_p2             else:                 t_f2 = t_aux2[1]                 dt_f2 = dt_p2                 isi2 = np.max(np.array([t_end-t2[N2-1], t2[N2-1]-t2[N2-2]])) if N2 &gt; 1 \\                        else t_end-t2[N2-1]         index += 1         t_last = t_curr     s1 = dt_f1     s2 = dt_f2     y_end = (s1*isi2 + s2*isi1) / njit_avrg(isi1, isi2)      spike_value += 0.5*(y_start + y_end) * (t_end - t_last)      return spike_value / (t_end-t_start) In\u00a0[95]: Copied! <pre>%%time\nnjit_SPIKE_distance(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1)\n</pre> %%time njit_SPIKE_distance(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=0.1) <pre>CPU times: user 2.07 s, sys: 11.5 ms, total: 2.09 s\nWall time: 2.09 s\n</pre> Out[95]: <pre>0.22039300805215156</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[22]: Copied! <pre>_ = \"\"\"times_python = []; times_compiled = []; l_firing_rates = []\n\nfor temp_firing_rate in [2, 5, 10, 20, 30, 40]:#, 25,50,100]:\n    for i_rep in range(100):\n        spike_train_i = np.random.randint(1_000, size=temp_firing_rate)/1_000.\n        spike_train_j = np.random.randint(1_000, size=temp_firing_rate)/1_000.\n\n        time_diff = time()\n        SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')\n        time_diff = time() - time_diff\n        times_python.append(time_diff)\n\n        time_diff = time()\n        SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')\n        time_diff = time() - time_diff\n        times_compiled.append(time_diff)\n        l_firing_rates.append(temp_firing_rate)\n\ntimes_python   = np.array(times_python)\ntimes_compiled = np.array(times_compiled)\nl_firing_rates = np.array(l_firing_rates)\"\"\"\n</pre> _ = \"\"\"times_python = []; times_compiled = []; l_firing_rates = []  for temp_firing_rate in [2, 5, 10, 20, 30, 40]:#, 25,50,100]:     for i_rep in range(100):         spike_train_i = np.random.randint(1_000, size=temp_firing_rate)/1_000.         spike_train_j = np.random.randint(1_000, size=temp_firing_rate)/1_000.          time_diff = time()         SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='py')         time_diff = time() - time_diff         times_python.append(time_diff)          time_diff = time()         SPIKE_distance_single(t1=spike_train_i, t2=spike_train_j, t_start=0, t_end=1, mode='njit')         time_diff = time() - time_diff         times_compiled.append(time_diff)                  l_firing_rates.append(temp_firing_rate)  times_python   = np.array(times_python) times_compiled = np.array(times_compiled) l_firing_rates = np.array(l_firing_rates)\"\"\" In\u00a0[23]: Copied! <pre>_ = \"\"\"l_mean_python = []; l_mean_compiled = []; \nfor tmp in np.unique(l_firing_rates):\n    temp_mean_python   = np.mean(times_python[l_firing_rates==tmp])\n    temp_mean_compiled = np.mean(times_compiled[l_firing_rates==tmp])\n    l_mean_python.append(temp_mean_python)\n    l_mean_compiled.append(temp_mean_compiled)\nl_mean_python   = np.array(l_mean_python)\nl_mean_compiled = np.array(l_mean_compiled)\"\"\"\n</pre> _ = \"\"\"l_mean_python = []; l_mean_compiled = [];  for tmp in np.unique(l_firing_rates):     temp_mean_python   = np.mean(times_python[l_firing_rates==tmp])     temp_mean_compiled = np.mean(times_compiled[l_firing_rates==tmp])     l_mean_python.append(temp_mean_python)     l_mean_compiled.append(temp_mean_compiled) l_mean_python   = np.array(l_mean_python) l_mean_compiled = np.array(l_mean_compiled)\"\"\" In\u00a0[24]: Copied! <pre>_ = \"\"\"fig, axs = plt.subplots(figsize=(4,4), facecolor='w')\n\naxs.plot(l_firing_rates, times_python  , ls='', ms=8, marker='o', color='green', fillstyle='none', alpha=0.05)\naxs.plot(l_firing_rates, times_compiled, ls='', ms=8, marker='o', color='black', fillstyle='none', alpha=0.05)\naxs.plot(np.unique(l_firing_rates), l_mean_python  , color='green')\naxs.plot(np.unique(l_firing_rates), l_mean_compiled, color='black')\n\n#plt.semilogy()\naxs.set_xlabel(\"$Firing\\ rates$\"   , fontsize=14)\naxs.set_ylabel(\"$Time\\ [LOG]\\ (s)$\", fontsize=14)\"\"\"\n</pre> _ = \"\"\"fig, axs = plt.subplots(figsize=(4,4), facecolor='w')  axs.plot(l_firing_rates, times_python  , ls='', ms=8, marker='o', color='green', fillstyle='none', alpha=0.05) axs.plot(l_firing_rates, times_compiled, ls='', ms=8, marker='o', color='black', fillstyle='none', alpha=0.05) axs.plot(np.unique(l_firing_rates), l_mean_python  , color='green') axs.plot(np.unique(l_firing_rates), l_mean_compiled, color='black')  #plt.semilogy() axs.set_xlabel(\"$Firing\\ rates$\"   , fontsize=14) axs.set_ylabel(\"$Time\\ [LOG]\\ (s)$\", fontsize=14)\"\"\" In\u00a0[25]: Copied! <pre>_ = \"\"\"l_mean_speedup = []; l_std_speedup = []; \nfor tmp in np.unique(l_firing_rates):\n    temp_mean_speedup  = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])\n    temp_std_speedup   = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])\n    l_mean_speedup.append(temp_mean_speedup)\n    l_std_speedup.append(temp_std_speedup)\nl_mean_speedup = np.array(l_mean_speedup)\nl_std_speedup  = np.array(l_std_speedup )\"\"\"\n</pre> _ = \"\"\"l_mean_speedup = []; l_std_speedup = [];  for tmp in np.unique(l_firing_rates):     temp_mean_speedup  = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])     temp_std_speedup   = np.mean(times_python[l_firing_rates==tmp] / times_compiled[l_firing_rates==tmp])     l_mean_speedup.append(temp_mean_speedup)     l_std_speedup.append(temp_std_speedup) l_mean_speedup = np.array(l_mean_speedup) l_std_speedup  = np.array(l_std_speedup )\"\"\""},{"location":"notebooks/test_distance_single_neuron/#speed-up-test","title":"Speed-up test\u00b6","text":""},{"location":"notebooks/test_distance_single_neuron/#test","title":"Test\u00b6","text":""},{"location":"notebooks/tutorial_spike_stats/","title":"Tutorial spike stats","text":"In\u00a0[8]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n</pre> import numpy as np import matplotlib.pyplot as plt In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[333]: Copied! <pre>num_trials = 100\nsimulated_spike_trains = []\nfor i in range(num_trials):\n    spike_train_i = np.random.randint(1000, size=100)/1000.\n    #temp_mask = ((spike_train_i &gt; 0.1) &amp; (spike_train_i &lt;= 0.4)) | ((spike_train_i &gt; 0.45) &amp; (spike_train_i &lt;= 0.7))\n    #spike_train_i = spike_train_i[temp_mask]\n    simulated_spike_trains.append(spike_train_i)\nsimulated_spike_trains = np.array(simulated_spike_trains)\n</pre> num_trials = 100 simulated_spike_trains = [] for i in range(num_trials):     spike_train_i = np.random.randint(1000, size=100)/1000.     #temp_mask = ((spike_train_i &gt; 0.1) &amp; (spike_train_i &lt;= 0.4)) | ((spike_train_i &gt; 0.45) &amp; (spike_train_i &lt;= 0.7))     #spike_train_i = spike_train_i[temp_mask]     simulated_spike_trains.append(spike_train_i) simulated_spike_trains = np.array(simulated_spike_trains) In\u00a0[334]: Copied! <pre>fig, axs = plt.subplots(figsize=(10,5), facecolor='w')\nfor i in range(num_trials):\n    axs.plot(simulated_spike_trains[i], np.ones(shape=len(simulated_spike_trains[i]))*i, marker='|', color='k', ls='', ms=2)\naxs.set_xlim([0,1])\naxs.set_ylim([-1.5,100.5])\n</pre> fig, axs = plt.subplots(figsize=(10,5), facecolor='w') for i in range(num_trials):     axs.plot(simulated_spike_trains[i], np.ones(shape=len(simulated_spike_trains[i]))*i, marker='|', color='k', ls='', ms=2) axs.set_xlim([0,1]) axs.set_ylim([-1.5,100.5]) Out[334]: <pre>(-1.5, 100.5)</pre> In\u00a0[539]: Copied! <pre>def psth(spike_times, ii_spike_times, neuron_id, window_length, sel_trials=None, nbins=10, norm=False):\n    \n    if window_length is None:\n        window_length = np.max(ii_spike_times[:, neuron_id,])\n        \n    if sel_trials is None:\n        sel_trials = np.arange(ii_spike_times.shape[0], dtype=np.int)\n        #print (sel_trials)\n        \n    M = len(sel_trials) # number of epochs\n    ret_mat = np.zeros(shape=(M, nbins), dtype=np.float16)\n    \n    for i in range(M):\n        i_trials = sel_trials[i]\n        temp_spike_train = spike_times[ii_spike_times[i_trials, neuron_id, 0]:ii_spike_times[i_trials, neuron_id, 1]].copy()\n        temp_spike_train.sort()\n        #print (binned_firing_rates(temp_spike_train, nbins=nbins, window_length=window_length))\n        ret_mat[i,:], _ = np.histogram(temp_spike_train, bins=nbins) #binned_firing_rates(temp_spike_train, nbins=nbins, window_length=window_length)\n        #print (ret_mat)\n        #print (ret_mat[:, i].shape, ret_mat.shape)\n        \n    if norm:\n        return np.sum(ret_mat, axis=0)/(np.sum(ret_mat)*nbins)\n    return np.sum(ret_mat, axis=0)/(nbins)#.copy()\n</pre> def psth(spike_times, ii_spike_times, neuron_id, window_length, sel_trials=None, nbins=10, norm=False):          if window_length is None:         window_length = np.max(ii_spike_times[:, neuron_id,])              if sel_trials is None:         sel_trials = np.arange(ii_spike_times.shape[0], dtype=np.int)         #print (sel_trials)              M = len(sel_trials) # number of epochs     ret_mat = np.zeros(shape=(M, nbins), dtype=np.float16)          for i in range(M):         i_trials = sel_trials[i]         temp_spike_train = spike_times[ii_spike_times[i_trials, neuron_id, 0]:ii_spike_times[i_trials, neuron_id, 1]].copy()         temp_spike_train.sort()         #print (binned_firing_rates(temp_spike_train, nbins=nbins, window_length=window_length))         ret_mat[i,:], _ = np.histogram(temp_spike_train, bins=nbins) #binned_firing_rates(temp_spike_train, nbins=nbins, window_length=window_length)         #print (ret_mat)         #print (ret_mat[:, i].shape, ret_mat.shape)              if norm:         return np.sum(ret_mat, axis=0)/(np.sum(ret_mat)*nbins)     return np.sum(ret_mat, axis=0)/(nbins)#.copy() In\u00a0[540]: Copied! <pre>def test_data(simulated_spike_trains):\n    spike_times = [];\n    ii_spike_times = [];\n    \n    index = 0; \n    for i_M in range(simulated_spike_trains.shape[0]):\n        temp_ii_spike_times = []\n        for i_N in range(1):\n            spike_times.append(simulated_spike_trains[i_M])\n            temp_ii_spike_times.append([index, index+len(simulated_spike_trains[i_M])])\n            index+=len(simulated_spike_trains[i_M])\n        ii_spike_times.append(temp_ii_spike_times)\n    \n    spike_times = np.concatenate(spike_times)\n    ii_spike_times = np.array(ii_spike_times)\n    \n    return spike_times, ii_spike_times\n\nspike_times, ii_spike_times = test_data(simulated_spike_trains)\n</pre> def test_data(simulated_spike_trains):     spike_times = [];     ii_spike_times = [];          index = 0;      for i_M in range(simulated_spike_trains.shape[0]):         temp_ii_spike_times = []         for i_N in range(1):             spike_times.append(simulated_spike_trains[i_M])             temp_ii_spike_times.append([index, index+len(simulated_spike_trains[i_M])])             index+=len(simulated_spike_trains[i_M])         ii_spike_times.append(temp_ii_spike_times)          spike_times = np.concatenate(spike_times)     ii_spike_times = np.array(ii_spike_times)          return spike_times, ii_spike_times  spike_times, ii_spike_times = test_data(simulated_spike_trains) In\u00a0[541]: Copied! <pre>spike_times.shape, ii_spike_times.shape\n</pre> spike_times.shape, ii_spike_times.shape Out[541]: <pre>((10000,), (100, 1, 2))</pre> In\u00a0[542]: Copied! <pre>neuron_id = 0;\nwindow_length = 1;\n</pre> neuron_id = 0; window_length = 1; In\u00a0[563]: Copied! <pre>nbins = 10\n</pre> nbins = 10 In\u00a0[567]: Copied! <pre>mat_psth = psth(spike_times, ii_spike_times, neuron_id, window_length, sel_trials=None, nbins=nbins, norm=True)\n</pre> mat_psth = psth(spike_times, ii_spike_times, neuron_id, window_length, sel_trials=None, nbins=nbins, norm=True) In\u00a0[573]: Copied! <pre>mat_psth\n</pre> mat_psth Out[573]: <pre>array([0.0112 , 0.00985, 0.01005, 0.00943, 0.00978, 0.00979, 0.00938,\n       0.00996, 0.00954, 0.01102], dtype=float32)</pre> In\u00a0[571]: Copied! <pre>from sklearn.neighbors import KernelDensity\n</pre> from sklearn.neighbors import KernelDensity In\u00a0[643]: Copied! <pre>data = np.array((np.arange(len(mat_psth)).reshape(-1,1), mat_psth.reshape(-1,1)))[:,:,0].T\ndata, data.shape\n</pre> data = np.array((np.arange(len(mat_psth)).reshape(-1,1), mat_psth.reshape(-1,1)))[:,:,0].T data, data.shape Out[643]: <pre>(array([[0.     , 0.0112 ],\n        [1.     , 0.00985],\n        [2.     , 0.01005],\n        [3.     , 0.00943],\n        [4.     , 0.00978],\n        [5.     , 0.00979],\n        [6.     , 0.00938],\n        [7.     , 0.00996],\n        [8.     , 0.00954],\n        [9.     , 0.01102]]),\n (10, 2))</pre> In\u00a0[646]: Copied! <pre>kde = KernelDensity(kernel=\"gaussian\", bandwidth=0.75)\nkde.fit(data)\nprint (kde.score_samples(data))\n#log_dens = kde.score_samples(np.arange(len(mat_psth)))\n#print (kde)\nplt.fill(mat_psth, kde.score_samples(data), fc=\"#AAAAFF\")\n#ax[1, 1].text(-3.5, 0.31, \"Gaussian Kernel Density\")\n</pre> kde = KernelDensity(kernel=\"gaussian\", bandwidth=0.75) kde.fit(data) print (kde.score_samples(data)) #log_dens = kde.score_samples(np.arange(len(mat_psth))) #print (kde) plt.fill(mat_psth, kde.score_samples(data), fc=\"#AAAAFF\") #ax[1, 1].text(-3.5, 0.31, \"Gaussian Kernel Density\") <pre>[-3.20044572 -2.94930417 -2.93399034 -2.93381189 -2.93381146 -2.93381146\n -2.93381188 -2.93399035 -2.94930427 -3.20044581]\n</pre> Out[646]: <pre>[&lt;matplotlib.patches.Polygon at 0x7f717de910f0&gt;]</pre> In\u00a0[569]: Copied! <pre>fig, axs = plt.subplots(figsize=(8,4), facecolor='w')\naxs.bar(np.arange(nbins,dtype=np.int), np.sum(mat_psth, axis=0), width=1, align='edge')\naxs.set_xticks([0, nbins/2, nbins])\naxs.set_xticklabels([0, 0.5*window_length, 1*window_length])#[0, 0.5*window_length, window_length])\n#axs.set_xticklabels((np.arange(0.5, nbins+1, nbins//2)-0.5)//(nbins))\naxs.set_xlabel(\"$Time\\ [s]$\", fontsize=12)\n</pre> fig, axs = plt.subplots(figsize=(8,4), facecolor='w') axs.bar(np.arange(nbins,dtype=np.int), np.sum(mat_psth, axis=0), width=1, align='edge') axs.set_xticks([0, nbins/2, nbins]) axs.set_xticklabels([0, 0.5*window_length, 1*window_length])#[0, 0.5*window_length, window_length]) #axs.set_xticklabels((np.arange(0.5, nbins+1, nbins//2)-0.5)//(nbins)) axs.set_xlabel(\"$Time\\ [s]$\", fontsize=12) Out[569]: <pre>Text(0.5, 0, '$Time\\\\ [s]$')</pre> In\u00a0[22]: Copied! <pre>spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n</pre> spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\") ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\") In\u00a0[30]: Copied! <pre>spike_times is None\n</pre> spike_times is None Out[30]: <pre>False</pre> In\u00a0[236]: Copied! <pre>?np.linspace\n</pre> ?np.linspace In\u00a0[272]: Copied! <pre>def testing(spike_train, nbins=10, step=0.1, window_length=1):\n    lims = np.linspace(0, window_length, num=(nbins))\n    hist = np.zeros(shape=nbins, dtype=np.int16)\n    #for i in range(20):\n    print (lims, lims.shape)\n    \n    window_length = 1\n    i = 0\n    i_spike = 0\n    curr_time = 0\n    \n    while i &lt; nbins: #i_spike &lt; len(spike_train):\n    #for spike in spike_train:\n        spike = spike_train[i_spike]\n        print (i, spike, '|', '%.2f' % lims[i], '%.2f' % lims[i+1], (spike&gt;=lims[i] and spike&lt;lims[i+1]))\n    \n        if ((spike&gt;curr_time) and (spike&lt;(curr_time+step))):\n            hist[i]+=1\n        else:\n            i+=1 # index hist\n        i_spike+=1\n        curr_time +=step\n        \n    \n    #for i in range(nbins-1):\n        #while (onset+step &lt; window_length):\n    \n    print (\"hist\", hist)\n\ntesting(np.arange(10)/10., 10, 0.2, 1)\n</pre> def testing(spike_train, nbins=10, step=0.1, window_length=1):     lims = np.linspace(0, window_length, num=(nbins))     hist = np.zeros(shape=nbins, dtype=np.int16)     #for i in range(20):     print (lims, lims.shape)          window_length = 1     i = 0     i_spike = 0     curr_time = 0          while i &lt; nbins: #i_spike &lt; len(spike_train):     #for spike in spike_train:         spike = spike_train[i_spike]         print (i, spike, '|', '%.2f' % lims[i], '%.2f' % lims[i+1], (spike&gt;=lims[i] and spikecurr_time) and (spike&lt;(curr_time+step))):             hist[i]+=1         else:             i+=1 # index hist         i_spike+=1         curr_time +=step                   #for i in range(nbins-1):         #while (onset+step &lt; window_length):          print (\"hist\", hist)  testing(np.arange(10)/10., 10, 0.2, 1) <pre>[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556\n 0.66666667 0.77777778 0.88888889 1.        ] (10,)\n0 0.0 | 0.00 0.11 True\n1 0.1 | 0.11 0.22 False\n2 0.2 | 0.22 0.33 False\n3 0.3 | 0.33 0.44 False\n4 0.4 | 0.44 0.56 False\n5 0.5 | 0.56 0.67 False\n6 0.6 | 0.67 0.78 False\n7 0.7 | 0.78 0.89 False\n8 0.8 | 0.89 1.00 False\n</pre> <pre>\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n&lt;ipython-input-272-186bc359727c&gt; in &lt;module&gt;\n     28     print (\"hist\", hist)\n     29 \n---&gt; 30 testing(np.arange(10)/10., 10, 0.2, 1)\n\n&lt;ipython-input-272-186bc359727c&gt; in testing(spike_train, nbins, step, window_length)\n     13     #for spike in spike_train:\n     14         spike = spike_train[i_spike]\n---&gt; 15         print (i, spike, '|', '%.2f' % lims[i], '%.2f' % lims[i+1], (spike&gt;=lims[i] and spike&lt;lims[i+1]))\n     16 \n     17         if ((spike&gt;curr_time) and (spike&lt;(curr_time+step))):\n\nIndexError: index 10 is out of bounds for axis 0 with size 10</pre> In\u00a0[275]: Copied! <pre>np.histogram(a=np.arange(10)/10, bins=11)\n</pre> np.histogram(a=np.arange(10)/10, bins=11) Out[275]: <pre>(array([1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1]),\n array([0.        , 0.08181818, 0.16363636, 0.24545455, 0.32727273,\n        0.40909091, 0.49090909, 0.57272727, 0.65454545, 0.73636364,\n        0.81818182, 0.9       ]))</pre> In\u00a0[230]: Copied! <pre>test = np.array([1,4,5,2,3,4,6,7,9,8,2,1,1,1])/20.\ntest.sort()\ntest\nonset = 0; step=1/20\nwindow_length = 1\nwhile (onset+step &lt; window_length):\n    print (\"%.2f\" % onset, test[(test&gt;=onset) &amp; (test&lt;(onset+step))])\n    onset+=step\n</pre> test = np.array([1,4,5,2,3,4,6,7,9,8,2,1,1,1])/20. test.sort() test onset = 0; step=1/20 window_length = 1 while (onset+step &lt; window_length):     print (\"%.2f\" % onset, test[(test&gt;=onset) &amp; (test&lt;(onset+step))])     onset+=step <pre>0.00 []\n0.05 [0.05 0.05 0.05 0.05]\n0.10 [0.1  0.1  0.15]\n0.15 []\n0.20 [0.2 0.2]\n0.25 [0.25]\n0.30 [0.3]\n0.35 [0.35]\n0.40 [0.4]\n0.45 [0.45]\n0.50 []\n0.55 []\n0.60 []\n0.65 []\n0.70 []\n0.75 []\n0.80 []\n0.85 []\n0.90 []\n</pre> In\u00a0[105]: Copied! <pre>from numba import njit\n#njit\ndef binned_firing_rates(spike_train, nbins, window_length, step=None):\n\"\"\"\n    Note: It doesnt allow overlapping epochs.\n    \"\"\"\n    binned_vec = np.empty(shape=nbins, dtype=np.int16)\n    if step is None:\n        step = window_length / nbins\n    onset = 0; step=0.1#1/nbins\n    window_length = 1\n    i = 0\n    while (onset+step &lt; window_length):\n        #print (\"%.2f\" % onset, spike_train[(spike_train&gt;=onset) &amp; (spike_train&lt;(onset+step))])\n        binned_vec[i] = len(spike_train[(spike_train&gt;=onset) &amp; (spike_train&lt;(onset+step))])\n        onset+=step\n        i+=1\n    return binned_vec\n</pre> from numba import njit #njit def binned_firing_rates(spike_train, nbins, window_length, step=None):     \"\"\"     Note: It doesnt allow overlapping epochs.     \"\"\"     binned_vec = np.empty(shape=nbins, dtype=np.int16)     if step is None:         step = window_length / nbins     onset = 0; step=0.1#1/nbins     window_length = 1     i = 0     while (onset+step &lt; window_length):         #print (\"%.2f\" % onset, spike_train[(spike_train&gt;=onset) &amp; (spike_train&lt;(onset+step))])         binned_vec[i] = len(spike_train[(spike_train&gt;=onset) &amp; (spike_train&lt;(onset+step))])         onset+=step         i+=1     return binned_vec In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[279]: Copied! <pre>psth_mat = psth(spike_times, ii_spike_times, window_length = .1, neuron_id=0, nbins=10)\n</pre> psth_mat = psth(spike_times, ii_spike_times, window_length = .1, neuron_id=0, nbins=10) In\u00a0[280]: Copied! <pre>psth_mat\n</pre> psth_mat Out[280]: <pre>array([[16., 11., 11.,  7., 11., 10.,  9.,  7., 12.,  6.],\n       [12., 14., 10.,  7., 10., 11., 12.,  5.,  8., 11.],\n       [12., 10.,  4., 15.,  9., 11., 12.,  8.,  7., 12.],\n       [ 8., 14., 11.,  8., 12.,  3., 12., 15.,  9.,  8.],\n       [14., 12., 14.,  6.,  5., 15.,  4.,  8.,  7., 15.],\n       [14.,  6., 12., 13.,  5., 10.,  7.,  9.,  8., 16.],\n       [14.,  5.,  7., 11., 16., 11.,  9., 11.,  7.,  9.],\n       [17.,  8.,  7., 12.,  7., 11., 10., 11.,  6., 11.],\n       [ 7.,  4., 16., 12., 13., 14.,  8.,  8.,  5., 13.],\n       [ 8.,  3., 13., 12.,  9., 10., 11., 14., 10., 10.],\n       [ 8., 13., 11.,  6., 12.,  8., 13.,  8.,  8., 13.],\n       [10., 15.,  9., 14.,  7.,  5., 13.,  8.,  9., 10.],\n       [10., 12.,  9.,  9.,  8., 15.,  9.,  5., 13., 10.],\n       [12., 15., 10., 13.,  6.,  9.,  5.,  9.,  6., 15.],\n       [13.,  4., 12.,  8., 12.,  7., 10.,  8., 10., 16.],\n       [14.,  7.,  8., 16.,  9., 10.,  8.,  6., 13.,  9.],\n       [ 7., 10., 11.,  8.,  7., 13.,  7., 13.,  9., 15.],\n       [ 7.,  7., 15., 10., 16.,  9., 12.,  9.,  8.,  7.],\n       [10., 10.,  6.,  9.,  8., 13.,  8., 14.,  9., 13.],\n       [ 8.,  6.,  8.,  9., 11., 12., 13., 10., 11., 12.],\n       [ 9.,  9., 14., 11.,  4., 13.,  8., 16., 11.,  5.],\n       [ 8.,  9.,  9.,  8.,  9., 10.,  7., 14., 12., 14.],\n       [ 8., 14., 16.,  8.,  7.,  5., 15.,  3., 10., 14.],\n       [13.,  9., 14.,  9., 12.,  7., 10.,  8.,  8., 10.],\n       [16., 10.,  7., 13., 16., 11.,  9.,  5.,  5.,  8.],\n       [11., 11.,  4., 13., 17.,  7.,  8.,  5., 14., 10.],\n       [ 8., 11.,  8., 11., 13., 12., 14.,  7.,  7.,  9.],\n       [11., 12., 10.,  7., 13., 10.,  9.,  7., 10., 11.],\n       [11., 11.,  7.,  5.,  9., 14., 15.,  9.,  6., 13.],\n       [ 9., 10., 11., 10.,  9., 12., 12., 10.,  8.,  9.],\n       [11.,  8., 10., 11., 11.,  8., 14., 13.,  9.,  5.],\n       [11.,  5.,  8.,  9., 13., 13., 11.,  5., 13., 12.],\n       [ 8., 17., 10.,  6., 14.,  7.,  6.,  6., 12., 14.],\n       [11., 10.,  8., 14., 12.,  9., 10.,  8., 10.,  8.],\n       [11., 17.,  6., 10.,  9.,  8., 14., 12.,  4.,  9.],\n       [ 6., 14.,  6., 15.,  5., 11., 14., 12.,  8.,  9.],\n       [ 6.,  8., 10.,  8.,  8., 12., 11., 11., 14., 12.],\n       [12., 10.,  8., 11.,  9., 11.,  6., 12., 12.,  9.],\n       [ 9., 15.,  8., 13.,  3., 11.,  4., 16., 15.,  6.],\n       [15.,  8., 14.,  7., 10., 12., 11.,  8.,  8.,  7.],\n       [13.,  9., 19.,  2.,  6.,  7., 10., 13., 12.,  9.],\n       [11.,  9.,  8., 14.,  2.,  9., 10.,  7., 15., 15.],\n       [10., 13.,  8.,  9., 10., 11.,  9.,  7., 14.,  9.],\n       [ 8.,  4., 16., 15., 11., 10., 12.,  5.,  9., 10.],\n       [14., 12.,  8.,  7., 10., 10., 11.,  8.,  8., 12.],\n       [13., 12., 13., 15.,  4.,  3.,  9., 12., 10.,  9.],\n       [11.,  7., 12.,  7.,  9., 10., 10., 17., 10.,  7.],\n       [10.,  6.,  7., 12.,  9., 14., 13.,  9.,  8., 12.],\n       [14.,  9.,  9.,  8.,  9., 15., 10.,  8., 10.,  8.],\n       [13.,  7., 10.,  7.,  9., 10.,  9., 13., 10., 12.],\n       [12.,  8., 16., 14.,  7.,  8.,  4., 10., 12.,  9.],\n       [10.,  6., 14., 10.,  9.,  9.,  8.,  8., 11., 15.],\n       [10.,  9., 10., 10., 10.,  8.,  9.,  8.,  9., 17.],\n       [10., 10., 11., 11., 13., 11.,  6.,  9., 10.,  9.],\n       [11.,  6.,  7., 12.,  7., 12., 16.,  9., 12.,  8.],\n       [ 7., 13.,  4., 13., 13.,  8., 10., 14.,  8., 10.],\n       [16., 11.,  8., 10.,  9.,  6.,  9., 13., 10.,  8.],\n       [10., 14.,  6., 15.,  4., 15.,  9.,  4.,  6., 17.],\n       [12., 14.,  8., 10.,  8., 10., 10.,  6.,  8., 14.],\n       [ 9., 11., 10., 12.,  8., 14., 13.,  4.,  8., 11.],\n       [14.,  6., 13., 10.,  7.,  8., 10.,  9., 13., 10.],\n       [11., 13.,  9., 10., 12.,  6., 10., 11.,  7., 11.],\n       [10., 10., 14.,  3., 15.,  7., 10., 11.,  9., 11.],\n       [12.,  7.,  9., 11., 10., 15.,  9.,  8., 10.,  9.],\n       [10., 11., 11.,  3., 14., 11.,  9., 10.,  8., 13.],\n       [ 6., 10., 11., 12., 13., 15.,  9.,  5., 10.,  9.],\n       [12.,  7.,  8.,  7., 10., 15.,  6., 13., 11., 11.],\n       [11.,  8.,  7., 10.,  9., 20.,  9., 10.,  6., 10.],\n       [14., 10.,  9., 12.,  6., 11.,  6.,  9., 10., 13.],\n       [10., 10., 11.,  9.,  7., 13., 11., 12.,  9.,  8.],\n       [11.,  9., 12., 14.,  6., 12.,  5., 14.,  9.,  8.],\n       [15.,  3.,  9., 15., 10.,  8.,  6.,  8., 13., 13.],\n       [ 8., 13., 13., 10.,  5., 11., 12.,  8., 11.,  9.],\n       [11., 18.,  8., 13., 11.,  6.,  5.,  8., 12.,  8.],\n       [14.,  8., 11., 11.,  8.,  9., 12., 11.,  7.,  9.],\n       [16.,  6., 15., 10.,  7., 15., 12.,  3.,  6., 10.],\n       [10., 10.,  8., 12., 12., 14.,  8.,  8., 11.,  7.],\n       [13., 11.,  9., 13.,  6., 12., 12.,  5.,  9., 10.],\n       [13.,  7.,  8., 10., 15., 10.,  5.,  7., 11., 14.],\n       [11., 12., 11.,  7., 17.,  8.,  7.,  9., 10.,  8.],\n       [ 9.,  9.,  9., 14.,  9., 11., 10., 13.,  9.,  7.],\n       [14., 15.,  9.,  4., 12., 10., 10., 16.,  5.,  5.],\n       [ 6., 11.,  9., 11., 11., 12., 11.,  9.,  9., 11.],\n       [ 9.,  7., 12., 10., 13., 12.,  8., 12., 12.,  5.],\n       [13., 11.,  9.,  5.,  4., 13.,  9., 13.,  7., 16.],\n       [16.,  6., 11., 10., 13., 10.,  3., 13., 13.,  5.],\n       [12.,  9., 14., 11.,  8.,  8.,  8.,  8.,  9., 13.],\n       [ 8., 10., 12.,  6.,  6., 10., 13., 11., 16.,  8.],\n       [12.,  9.,  9.,  8.,  9.,  8.,  8., 16., 11., 10.],\n       [15.,  8., 13., 12.,  7., 14.,  7., 11.,  8.,  5.],\n       [ 5., 11.,  7., 14., 14.,  6.,  7., 18., 12.,  6.],\n       [13., 11.,  7., 11.,  9., 10., 13.,  7., 11.,  8.],\n       [ 7.,  5., 12.,  9.,  9., 16., 13.,  8.,  9., 12.],\n       [13.,  6., 12., 10., 12.,  8.,  7.,  6., 13., 13.],\n       [ 8.,  7.,  7., 12., 10.,  8., 15., 15.,  9.,  9.],\n       [14.,  7., 16.,  4., 10., 10.,  9.,  9.,  8., 13.],\n       [11., 13.,  6., 16., 10.,  8., 12.,  9.,  7.,  8.],\n       [ 7.,  9.,  7., 11., 13., 11., 20.,  5., 10.,  7.],\n       [13., 17.,  9., 14.,  6.,  9.,  7.,  8.,  7., 10.],\n       [11.,  8., 10.,  9.,  9.,  6., 11., 12., 12., 12.]], dtype=float16)</pre> In\u00a0[281]: Copied! <pre>plt.plot(psth_mat)\n</pre> plt.plot(psth_mat) Out[281]: <pre>[&lt;matplotlib.lines.Line2D at 0x7f7143978be0&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f7143978cf8&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f7143a6beb8&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f7143a6b630&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f7143a6bd68&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f714acd6f60&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f714acd6d68&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f714af127f0&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f714ac9f1d0&gt;,\n &lt;matplotlib.lines.Line2D at 0x7f714ac9f320&gt;]</pre> In\u00a0[282]: Copied! <pre>plt.imshow(np.array(psth_mat, dtype=np.int16), aspect='auto', cmap='Greys_r')\n</pre> plt.imshow(np.array(psth_mat, dtype=np.int16), aspect='auto', cmap='Greys_r') Out[282]: <pre>&lt;matplotlib.image.AxesImage at 0x7f714ae93d68&gt;</pre> In\u00a0[283]: Copied! <pre>plt.imshow(psth_mat)\n</pre> plt.imshow(psth_mat) Out[283]: <pre>&lt;matplotlib.image.AxesImage at 0x7f71439bb470&gt;</pre> <pre>\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/IPython/core/formatters.py in __call__(self, obj)\n    339                 pass\n    340             else:\n--&gt; 341                 return printer(obj)\n    342             # Finally look for special method names\n    343             method = get_real_method(obj, self.print_method)\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/IPython/core/pylabtools.py in &lt;lambda&gt;(fig)\n    246 \n    247     if 'png' in formats:\n--&gt; 248         png_formatter.for_type(Figure, lambda fig: print_figure(fig, 'png', **kwargs))\n    249     if 'retina' in formats or 'png2x' in formats:\n    250         png_formatter.for_type(Figure, lambda fig: retina_figure(fig, **kwargs))\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/IPython/core/pylabtools.py in print_figure(fig, fmt, bbox_inches, **kwargs)\n    130         FigureCanvasBase(fig)\n    131 \n--&gt; 132     fig.canvas.print_figure(bytes_io, **kw)\n    133     data = bytes_io.getvalue()\n    134     if fmt == 'svg':\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/backend_bases.py in print_figure(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, **kwargs)\n   2077                             print_method, dpi=dpi, orientation=orientation),\n   2078                         draw_disabled=True)\n-&gt; 2079                     self.figure.draw(renderer)\n   2080                     bbox_artists = kwargs.pop(\"bbox_extra_artists\", None)\n   2081                     bbox_inches = self.figure.get_tightbbox(renderer,\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\n     36                 renderer.start_filter()\n     37 \n---&gt; 38             return draw(artist, renderer, *args, **kwargs)\n     39         finally:\n     40             if artist.get_agg_filter() is not None:\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/figure.py in draw(self, renderer)\n   1734             self.patch.draw(renderer)\n   1735             mimage._draw_list_compositing_images(\n-&gt; 1736                 renderer, self, artists, self.suppressComposite)\n   1737 \n   1738             renderer.close_group('figure')\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)\n    135     if not_composite or not has_images:\n    136         for a in artists:\n--&gt; 137             a.draw(renderer)\n    138     else:\n    139         # Composite any adjacent images together\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\n     36                 renderer.start_filter()\n     37 \n---&gt; 38             return draw(artist, renderer, *args, **kwargs)\n     39         finally:\n     40             if artist.get_agg_filter() is not None:\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/axes/_base.py in draw(self, renderer, inframe)\n   2628             renderer.stop_rasterizing()\n   2629 \n-&gt; 2630         mimage._draw_list_compositing_images(renderer, self, artists)\n   2631 \n   2632         renderer.close_group('axes')\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/image.py in _draw_list_compositing_images(renderer, parent, artists, suppress_composite)\n    135     if not_composite or not has_images:\n    136         for a in artists:\n--&gt; 137             a.draw(renderer)\n    138     else:\n    139         # Composite any adjacent images together\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/artist.py in draw_wrapper(artist, renderer, *args, **kwargs)\n     36                 renderer.start_filter()\n     37 \n---&gt; 38             return draw(artist, renderer, *args, **kwargs)\n     39         finally:\n     40             if artist.get_agg_filter() is not None:\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/image.py in draw(self, renderer, *args, **kwargs)\n    624         else:\n    625             im, l, b, trans = self.make_image(\n--&gt; 626                 renderer, renderer.get_image_magnification())\n    627             if im is not None:\n    628                 renderer.draw_image(gc, l, b, im)\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/image.py in make_image(self, renderer, magnification, unsampled)\n    915             self._A, bbox, transformed_bbox,\n    916             self.get_clip_box() or self.axes.bbox,\n--&gt; 917             magnification, unsampled=unsampled)\n    918 \n    919     def _check_unsampled_image(self, renderer):\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/image.py in _make_image(self, A, in_bbox, out_bbox, clip_bbox, magnification, unsampled, round_to_pixel_border)\n    476                 A_scaled += 0.1\n    477                 # resample the input data to the correct resolution and shape\n--&gt; 478                 A_resampled = _resample(self, A_scaled, out_shape, t)\n    479                 # done with A_scaled now, remove from namespace to be sure!\n    480                 del A_scaled\n\n/home/sotomayorb/anaconda3/envs/allensdk_SS/lib/python3.6/site-packages/matplotlib/image.py in _resample(image_obj, data, out_shape, transform, resample, alpha)\n    200                     alpha,\n    201                     image_obj.get_filternorm(),\n--&gt; 202                     image_obj.get_filterrad())\n    203     return out\n    204 \n\nValueError: Unsupported dtype</pre> <pre>&lt;Figure size 432x288 with 1 Axes&gt;</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"notebooks/visualization_tutorial/","title":"Raster plots","text":"In\u00a0[1]: Copied! <pre>import numpy as np\n</pre> import numpy as np In\u00a0[2]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.vis.raster import plot_raster_spike_trains\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.vis.raster import plot_raster_spike_trains In\u00a0[3]: Copied! <pre>spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\")\nii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\")\n</pre> spike_times    = np.load(\"demo_dataset_allen/spike_times.npy\") ii_spike_times = np.load(\"demo_dataset_allen/ii_spike_times.npy\") In\u00a0[4]: Copied! <pre>plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id=0)\n</pre> plot_raster_spike_trains(spike_times, ii_spike_times, epoch_id=0) In\u00a0[5]: Copied! <pre>plot_raster_spike_trains(\n    spike_times, \n    ii_spike_times, \n    epoch_id=0, \n    xmin=0, xmax=0.1, \n    xlabel=\"Time (s)\", \n    ylabel=\"Neuron ID\")\n</pre> plot_raster_spike_trains(     spike_times,      ii_spike_times,      epoch_id=0,      xmin=0, xmax=0.1,      xlabel=\"Time (s)\",      ylabel=\"Neuron ID\") In\u00a0[6]: Copied! <pre>import sys\nsys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/')\nfrom spyketools.vis.raster import plot_dissimilarity_matrix\n</pre> import sys sys.path.append('/mnt/pns/home/sotomayorb/git/spyke-tools-dev/') from spyketools.vis.raster import plot_dissimilarity_matrix In\u00a0[7]: Copied! <pre># loading dissimilarity matrix\ndiss_matrix_VP = np.load(\"demo_preproc_data/VP.npy\")\n</pre> # loading dissimilarity matrix diss_matrix_VP = np.load(\"demo_preproc_data/VP.npy\") In\u00a0[8]: Copied! <pre>plot_dissimilarity_matrix(diss_matrix_VP)\n</pre> plot_dissimilarity_matrix(diss_matrix_VP) In\u00a0[9]: Copied! <pre># computation of maximum value\nfill_value=np.nanmax(diss_matrix_VP)\n</pre> # computation of maximum value fill_value=np.nanmax(diss_matrix_VP) In\u00a0[10]: Copied! <pre>plot_dissimilarity_matrix(\n    diss_matrix_VP, \n    fill_value=fill_value\n)\n</pre> plot_dissimilarity_matrix(     diss_matrix_VP,      fill_value=fill_value ) In\u00a0[11]: Copied! <pre>plot_dissimilarity_matrix(\n    diss_matrix_VP, \n    xlabel=\"Epoch\",\n    ylabel=\"Epoch\",\n    colorbar_label=\"VP(q=0.5)\",\n    title=\"VP distance\",\n    fill_value=fill_value\n)\n</pre> plot_dissimilarity_matrix(     diss_matrix_VP,      xlabel=\"Epoch\",     ylabel=\"Epoch\",     colorbar_label=\"VP(q=0.5)\",     title=\"VP distance\",     fill_value=fill_value ) In\u00a0[12]: Copied! <pre>plot_dissimilarity_matrix(\n    diss_matrix_VP, \n    xlabel=\"Epoch\",\n    ylabel=\"Epoch\",\n    colorbar_label=\"VP(q=0.5)\",\n    title=\"VP distance\",\n    cmap='Spectral_r',\n    fill_value=fill_value\n)\n</pre> plot_dissimilarity_matrix(     diss_matrix_VP,      xlabel=\"Epoch\",     ylabel=\"Epoch\",     colorbar_label=\"VP(q=0.5)\",     title=\"VP distance\",     cmap='Spectral_r',     fill_value=fill_value ) In\u00a0[13]: Copied! <pre>plot_dissimilarity_matrix(\n    diss_matrix_VP, \n    xlabel=\"Epoch\",\n    ylabel=\"Epoch\",\n    colorbar_label=\"VP(q=0.5)\",\n    title=\"VP distance\",\n    cmap='PuBu'\n)\n</pre> plot_dissimilarity_matrix(     diss_matrix_VP,      xlabel=\"Epoch\",     ylabel=\"Epoch\",     colorbar_label=\"VP(q=0.5)\",     title=\"VP distance\",     cmap='PuBu' ) In\u00a0[14]: Copied! <pre>plot_dissimilarity_matrix(\n    diss_matrix_VP, \n    xlabel=\"Epoch\",\n    ylabel=\"Epoch\",\n    colorbar_label=\"VP(q=0.5)\",\n    title=\"VP distance\",\n    cmap='PuBu',\n    figpath='tmp_figure.pdf'\n)\n</pre> plot_dissimilarity_matrix(     diss_matrix_VP,      xlabel=\"Epoch\",     ylabel=\"Epoch\",     colorbar_label=\"VP(q=0.5)\",     title=\"VP distance\",     cmap='PuBu',     figpath='tmp_figure.pdf' ) <pre>[INFO]\tFigure was saved as 'tmp_figure.pdf'\n</pre>"},{"location":"notebooks/visualization_tutorial/#1-neural-activity","title":"1. Neural activity\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#11-spike-trains-in-a-given-epoch","title":"1.1. Spike trains in a given epoch\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#2-dissimilarity-matrix","title":"2. Dissimilarity Matrix\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#21-basic-visualization","title":"2.1. Basic visualization\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#22-customizing-visualization","title":"2.2. Customizing visualization\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#221-changing-diagonal-values-for-visualization","title":"2.2.1. Changing diagonal values for visualization\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#222-adding-labels-and-title","title":"2.2.2. Adding labels and title\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#223-changing-colormap-cmap","title":"2.2.3. Changing colormap (<code>cmap</code>)\u00b6","text":""},{"location":"notebooks/visualization_tutorial/#224-saving-figure","title":"2.2.4. Saving figure\u00b6","text":""}]}